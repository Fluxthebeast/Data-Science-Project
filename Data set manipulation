{"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2312,"status":"ok","timestamp":1734195664262,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"14ZP-C4vyHDl","outputId":"8e744be9-b81b-493c-e452-af023aa8c9d6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"aMNtKOuPUrJF","executionInfo":{"status":"ok","timestamp":1734195668720,"user_tz":-60,"elapsed":4467,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e0371381-1427-4d47-cd50-8f74cd0cb11b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pycountry in /usr/local/lib/python3.10/dist-packages (24.6.1)\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","from scipy.stats import skew\n","from scipy import interpolate\n","!pip install pycountry\n","from pycountry import countries"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4hVrNIXAiIP","outputId":"e968211d-908f-4cc3-b8a6-1ae25b98a2a0","executionInfo":{"status":"ok","timestamp":1734195672913,"user_tz":-60,"elapsed":4203,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: DoubleML in /usr/local/lib/python3.10/dist-packages (0.9.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.4.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from DoubleML) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.5.2)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from DoubleML) (0.14.4)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from DoubleML) (5.24.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (24.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->DoubleML) (3.5.0)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->DoubleML) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->DoubleML) (1.17.0)\n"]}],"source":["# Install the DoubleML package, upgrading to the latest version if it's already installed.\n","# !: This symbol in a Colab notebook indicates that the following command should be run in the system shell (like a terminal), not within the Python interpreter.\n","!pip install -U DoubleML\n","\n","import graphviz as gr  # For creating and visualizing directed acyclic graphs (DAGs)\n","\n","import statsmodels.formula.api as smf  # For statistical modeling using R-style formulas\n","\n","from matplotlib.colors import ListedColormap  # For creating custom colormaps for visualizations\n","import seaborn as sns  # For statistical data visualization based on matplotlib\n","\n","from sklearn.model_selection import KFold, RepeatedKFold  # For cross-validation techniques\n","from sklearn.base import clone  # For cloning estimator objects\n","\n","from sklearn.tree import DecisionTreeRegressor  # For Decision Tree regression models\n","from sklearn.ensemble import RandomForestRegressor  # For Random Forest regression models\n","from xgboost import XGBRegressor  # For XGBoost regression models\n","\n","import doubleml as dml  # For Double/Debiased Machine Learning\n","from doubleml import DoubleMLClusterData  # For DoubleML data handling with clustered data"]},{"cell_type":"markdown","metadata":{"id":"qLn_MMHiXrXK"},"source":["#Creation of the orinial Data set without confounders"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"tMpQhU3Pyv6u","executionInfo":{"status":"ok","timestamp":1734195674463,"user_tz":-60,"elapsed":1560,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/cleaned_datasets_by_country_and_year.csv')"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E7rRfmaJFy2P","executionInfo":{"status":"ok","timestamp":1734195678301,"user_tz":-60,"elapsed":3851,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"0f46ef23-de18-44b5-a449-e474ed0b99e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["QoG Data:\n","   Unnamed: 0        cname  ccode  year    cname_qog  ccode_qog ccodealp  \\\n","0           1  Afghanistan    4.0  1946  Afghanistan          4      AFG   \n","1           2  Afghanistan    4.0  1947  Afghanistan          4      AFG   \n","2           3  Afghanistan    4.0  1948  Afghanistan          4      AFG   \n","3           4  Afghanistan    4.0  1949  Afghanistan          4      AFG   \n","4           5  Afghanistan    4.0  1950  Afghanistan          4      AFG   \n","\n","  ccodealp_year  ccodecow  ccodevdem  ... wdi_precip wdi_tpa  wvs_ameop  \\\n","0         AFG46     700.0       36.0  ...        NaN     NaN        NaN   \n","1         AFG47     700.0       36.0  ...        NaN     NaN        NaN   \n","2         AFG48     700.0       36.0  ...        NaN     NaN        NaN   \n","3         AFG49     700.0       36.0  ...        NaN     NaN        NaN   \n","4         AFG50     700.0       36.0  ...        NaN     NaN        NaN   \n","\n","   wvs_ceom  wvs_deop  wvs_epmip  wvs_epmpp  wvs_imeop  wvs_pedp  wvs_ploem  \n","0       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","1       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","2       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","3       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","4       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","\n","[5 rows x 415 columns]\n","\n","Electoral Democracy Data:\n","        Entity Code  Year  \\\n","0  Afghanistan  AFG  1789   \n","1  Afghanistan  AFG  1790   \n","2  Afghanistan  AFG  1791   \n","3  Afghanistan  AFG  1792   \n","4  Afghanistan  AFG  1793   \n","\n","   Electoral democracy index (best estimate, aggregate: average)  \n","0                                              0.016              \n","1                                              0.016              \n","2                                              0.016              \n","3                                              0.016              \n","4                                              0.016              \n","\n","OECD Transport Data:\n","  STRUCTURE                        STRUCTURE_ID           STRUCTURE_NAME  \\\n","0  DATAFLOW  OECD.ITF:DSD_TRENDS@DF_TRENDS(1.0)  Annual transport trends   \n","1  DATAFLOW  OECD.ITF:DSD_TRENDS@DF_TRENDS(1.0)  Annual transport trends   \n","2  DATAFLOW  OECD.ITF:DSD_TRENDS@DF_TRENDS(1.0)  Annual transport trends   \n","3  DATAFLOW  OECD.ITF:DSD_TRENDS@DF_TRENDS(1.0)  Annual transport trends   \n","4  DATAFLOW  OECD.ITF:DSD_TRENDS@DF_TRENDS(1.0)  Annual transport trends   \n","\n","  ACTION REF_AREA Reference area FREQ Frequency of observation    MEASURE  \\\n","0      I      AUS      Australia    A                   Annual  PASSENGER   \n","1      I      AUS      Australia    A                   Annual  PASSENGER   \n","2      I      AUS      Australia    A                   Annual  PASSENGER   \n","3      I      AUS      Australia    A                   Annual  PASSENGER   \n","4      I      AUS      Australia    A                   Annual  PASSENGER   \n","\n","               Measure  ... TIME_PERIOD Time period OBS_VALUE  \\\n","0  Passenger transport  ...        2022         NaN    252215   \n","1  Passenger transport  ...        2001         NaN    237162   \n","2  Passenger transport  ...        2000         NaN    239809   \n","3  Passenger transport  ...        1999         NaN    235270   \n","4  Passenger transport  ...        1998         NaN    229896   \n","\n","  Observation value OBS_STATUS Observation status UNIT_MULT Unit multiplier  \\\n","0               NaN          E    Estimated value         6        Millions   \n","1               NaN          A       Normal value         6        Millions   \n","2               NaN          A       Normal value         6        Millions   \n","3               NaN          A       Normal value         6        Millions   \n","4               NaN          A       Normal value         6        Millions   \n","\n","   DECIMALS  Decimals  \n","0         1       One  \n","1         1       One  \n","2         1       One  \n","3         1       One  \n","4         1       One  \n","\n","[5 rows x 28 columns]\n"]}],"source":["qog_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/qog_ei_ts_sept21.csv')\n","electoral_democracy_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/electoral-democracy-index.csv')\n","oecd_transport_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/OECD.ITF,DSD_TRENDS@DF_TRENDS,1.0+.A..PASKM.ROAD.CARS..csv')\n","\n","print(\"QoG Data:\")\n","print(qog_data.head())\n","print(\"\\nElectoral Democracy Data:\")\n","print(electoral_democracy_data.head())\n","print(\"\\nOECD Transport Data:\")\n","print(oecd_transport_data.head())"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jcr17r6TF5Pc","executionInfo":{"status":"ok","timestamp":1734195678301,"user_tz":-60,"elapsed":65,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"745a7440-c082-4c6b-b564-f72cdbedc0b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["QoG Selected Data:\n","  ccodealp  year  oecd_eps\n","0      AFG  1946       NaN\n","1      AFG  1947       NaN\n","2      AFG  1948       NaN\n","3      AFG  1949       NaN\n","4      AFG  1950       NaN\n","\n","OECD Selected Data:\n","  country_code  year  annual_transport_trends\n","0          AUS  2022                   252215\n","1          AUS  2001                   237162\n","2          AUS  2000                   239809\n","3          AUS  1999                   235270\n","4          AUS  1998                   229896\n","\n","Electoral Democracy Index Selected Data:\n","  country_code  year  electoral_democracy_index\n","0          AFG  1789                      0.016\n","1          AFG  1790                      0.016\n","2          AFG  1791                      0.016\n","3          AFG  1792                      0.016\n","4          AFG  1793                      0.016\n"]}],"source":["qog_selected = qog_data[['ccodealp', 'year', 'oecd_eps']]\n","oecd_selected = oecd_transport_data[['REF_AREA', 'TIME_PERIOD', 'OBS_VALUE']].rename(columns={'REF_AREA': 'country_code', 'TIME_PERIOD': 'year', 'OBS_VALUE': 'annual_transport_trends'})\n","edi_selected = electoral_democracy_data[['Code', 'Year', 'Electoral democracy index (best estimate, aggregate: average)']].rename(columns={'Code': 'country_code', 'Year': 'year', 'Electoral democracy index (best estimate, aggregate: average)': 'electoral_democracy_index'})\n","\n","print(\"QoG Selected Data:\")\n","print(qog_selected.head())\n","\n","print(\"\\nOECD Selected Data:\")\n","print(oecd_selected.head())\n","\n","print(\"\\nElectoral Democracy Index Selected Data:\")\n","print(edi_selected.head())"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7HE_uWCNGVzf","executionInfo":{"status":"ok","timestamp":1734195678303,"user_tz":-60,"elapsed":61,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"65bd2a60-e7ec-4cf1-a8db-916e485cc1ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["Merged Data (Country and Year):\n","  country_code  year  oecd_eps  annual_transport_trends  \\\n","0          ALB  1993       NaN                     4293   \n","1          ALB  1994       NaN                     4638   \n","2          ALB  1995       NaN                     4759   \n","3          ALB  1996       NaN                     5010   \n","4          ALB  1997       NaN                     3531   \n","\n","   electoral_democracy_index  \n","0                      0.424  \n","1                      0.423  \n","2                      0.432  \n","3                      0.387  \n","4                      0.372  \n"]}],"source":["# Rename country code columns for consistency\n","qog_selected = qog_data[['ccodealp', 'year', 'oecd_eps']].rename(columns={'ccodealp': 'country_code'})\n","oecd_selected = oecd_transport_data[['REF_AREA', 'TIME_PERIOD', 'OBS_VALUE']].rename(columns={'REF_AREA': 'country_code', 'TIME_PERIOD': 'year', 'OBS_VALUE': 'annual_transport_trends'})\n","edi_selected = electoral_democracy_data[['Code', 'Year', 'Electoral democracy index (best estimate, aggregate: average)']].rename(columns={'Code': 'country_code', 'Year': 'year', 'Electoral democracy index (best estimate, aggregate: average)': 'electoral_democracy_index'})\n","\n","# Merge QoG and OECD datasets on 'country_code' and 'year'\n","merged_data = pd.merge(qog_selected, oecd_selected, on=['country_code', 'year'], how='inner')\n","\n","# Merge the result with the Electoral Democracy Index dataset on 'country_code' and 'year'\n","merged_data = pd.merge(merged_data, edi_selected, on=['country_code', 'year'], how='inner')\n","\n","\n","# Display the merged dataset to check if the merge worked correctly\n","print(\"Merged Data (Country and Year):\")\n","print(merged_data.head())"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0YdjQTWQ1vTD","executionInfo":{"status":"ok","timestamp":1734195678304,"user_tz":-60,"elapsed":54,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"6a554033-df63-4bf5-9cba-4e5b6eb51a94"},"outputs":[{"output_type":"stream","name":"stdout","text":["['ALB' 'ARG' 'AUS' 'BEL' 'BGR' 'CAN' 'CHL' 'HRV' 'CZE' 'DNK' 'FIN' 'FRA'\n"," 'DEU' 'GRC' 'HUN' 'ISL' 'ITA' 'JPN' 'KAZ' 'KOR' 'LTU' 'MLT' 'NLD' 'NZL'\n"," 'NOR' 'POL' 'PRT' 'SVK' 'SVN' 'ESP' 'SWE' 'CHE' 'MKD' 'GBR' 'USA']\n"]}],"source":["# Remove Russia\n","merged_data = merged_data[merged_data['country_code'] != 'RUS']\n","# Verify that the rows with 'RUS' have been removed\n","print(merged_data['country_code'].unique())"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"EWMaM3YCVMpZ","executionInfo":{"status":"ok","timestamp":1734195678304,"user_tz":-60,"elapsed":45,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["#merged_data.to_csv('x.csv', index=False)\n","#from google.colab import files\n","#files.download('x.csv')\n","\n","#Decision: We drop all the rows with NA's. Our bottleneck is the environmental policy stringency variable."]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MalFt_oyGiHr","executionInfo":{"status":"ok","timestamp":1734195678306,"user_tz":-60,"elapsed":45,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"7488fb02-2be5-472c-89de-3a1d55d139f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cleaned Data (Country and Year):\n","   country_code  year  oecd_eps  annual_transport_trends  \\\n","45          AUS  1993  0.750000                   210810   \n","46          AUS  1994  0.500000                   216147   \n","47          AUS  1995  0.500000                   222866   \n","48          AUS  1996  0.458333                   226008   \n","49          AUS  1997  0.458333                   227677   \n","\n","    electoral_democracy_index  \n","45                      0.892  \n","46                      0.891  \n","47                      0.891  \n","48                      0.889  \n","49                      0.885  \n"]}],"source":["# Drop rows with any missing values\n","merged_data_without_missing_values = merged_data.dropna()\n","# Display the cleaned data\n","print(\"Cleaned Data (Country and Year):\")\n","print(merged_data_without_missing_values.head())"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B3lL3ghYYA-9","executionInfo":{"status":"ok","timestamp":1734195678306,"user_tz":-60,"elapsed":38,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"fb1a9199-63e4-4cc8-afd1-b44bd1bb0844"},"outputs":[{"output_type":"stream","name":"stdout","text":["Missing values per column:\n","country_code                 0\n","year                         0\n","oecd_eps                     0\n","annual_transport_trends      0\n","electoral_democracy_index    0\n","dtype: int64\n"]}],"source":["# Check if it worked\n","missing_values = merged_data_without_missing_values.isnull().sum()\n","print(\"Missing values per column:\")\n","print(missing_values)"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZWiK9Q9wH8Y8","executionInfo":{"status":"ok","timestamp":1734195678306,"user_tz":-60,"elapsed":30,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2a29d0be-f19b-411e-d0af-dbd4a82b2776"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cleaned Data (Country and Year):\n","   country_code  year  oecd_eps  annual_transport_trends  \\\n","45          AUS  1993  0.750000                   210810   \n","46          AUS  1994  0.500000                   216147   \n","47          AUS  1995  0.500000                   222866   \n","48          AUS  1996  0.458333                   226008   \n","49          AUS  1997  0.458333                   227677   \n","\n","    electoral_democracy_index  \n","45                      0.892  \n","46                      0.891  \n","47                      0.891  \n","48                      0.889  \n","49                      0.885  \n"]}],"source":["# Save the cleaned dataset to a CSV file\n","merged_data_without_missing_values.to_csv('cleaned_datasets_by_country_and_year.csv', index=False)\n","\n","# To verify that the file has been saved, you can display the first few rows of the cleaned data\n","print(\"Cleaned Data (Country and Year):\")\n","print(merged_data_without_missing_values.head())"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cwTBaWoybZCv","executionInfo":{"status":"ok","timestamp":1734195683867,"user_tz":-60,"elapsed":5584,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"e7aac12a-05d4-44b5-eeb7-667244ee1fef"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-18-146d28cf5edb>:1: DtypeWarning: Columns (0,2,3,4,7) have mixed types. Specify dtype option on import or set low_memory=False.\n","  population_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.csv')\n"]},{"output_type":"stream","name":"stdout","text":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","45          AUS  1993  0.750000                   210810   \n","46          AUS  1994  0.500000                   216147   \n","47          AUS  1995  0.500000                   222866   \n","48          AUS  1996  0.458333                   226008   \n","49          AUS  1997  0.458333                   227677   \n","\n","    electoral_democracy_index  \n","45                      0.892  \n","46                      0.891  \n","47                      0.891  \n","48                      0.889  \n","49                      0.885  \n","  SortOrder   LocID Notes ISO3_code ISO2_code  SDMX_code  LocTypeID  \\\n","0       NaN  5507.0   NaN       NaN       NaN        NaN        NaN   \n","1       NaN  5507.0   NaN       NaN       NaN        NaN        NaN   \n","2       NaN  5507.0   NaN       NaN       NaN        NaN        NaN   \n","3       NaN  5507.0   NaN       NaN       NaN        NaN        NaN   \n","4       NaN  5507.0   NaN       NaN       NaN        NaN        NaN   \n","\n","  LocTypeName  ParentID                           Location  ...  Q0060Male  \\\n","0         NaN       NaN  ADB region: Central and West Asia  ...   654.5798   \n","1         NaN       NaN  ADB region: Central and West Asia  ...   642.5944   \n","2         NaN       NaN  ADB region: Central and West Asia  ...   630.8166   \n","3         NaN       NaN  ADB region: Central and West Asia  ...   619.9937   \n","4         NaN       NaN  ADB region: Central and West Asia  ...   610.3878   \n","\n","  Q0060Female     Q1550  Q1550Male  Q1550Female     Q1560  Q1560Male  \\\n","0    631.8067  297.6529   298.4483     297.2079  443.3215   457.3384   \n","1    619.1788  292.4375   293.1236     292.0887  436.9979   451.4368   \n","2    607.6061  286.6916   287.3395     286.3341  429.8298   444.5151   \n","3    596.2667  281.4671   282.0251     281.1446  423.2008   438.1189   \n","4    586.3428  276.8312   277.5799     276.2557  417.3453   432.7454   \n","\n","   Q1560Female  NetMigrations   CNMR  \n","0     427.3167        201.196  2.907  \n","1     420.7398        195.070  2.760  \n","2     413.5565        182.671  2.529  \n","3     406.9265        164.189  2.222  \n","4     400.7629        163.064  2.157  \n","\n","[5 rows x 67 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['SortOrder', 'LocID', 'Notes', 'ISO3_code', 'ISO2_code', 'SDMX_code',\n","       'LocTypeID', 'LocTypeName', 'ParentID', 'Location', 'VarID', 'Variant',\n","       'Time', 'TPopulation1Jan', 'TPopulation1July', 'TPopulationMale1July',\n","       'TPopulationFemale1July', 'PopDensity', 'PopSexRatio', 'MedianAgePop',\n","       'NatChange', 'NatChangeRT', 'PopChange', 'PopGrowthRate',\n","       'DoublingTime', 'Births', 'Births1519', 'CBR', 'TFR', 'NRR', 'MAC',\n","       'SRB', 'Deaths', 'DeathsMale', 'DeathsFemale', 'CDR', 'LEx', 'LExMale',\n","       'LExFemale', 'LE15', 'LE15Male', 'LE15Female', 'LE65', 'LE65Male',\n","       'LE65Female', 'LE80', 'LE80Male', 'LE80Female', 'InfantDeaths', 'IMR',\n","       'LBsurvivingAge1', 'Under5Deaths', 'Q5', 'Q0040', 'Q0040Male',\n","       'Q0040Female', 'Q0060', 'Q0060Male', 'Q0060Female', 'Q1550',\n","       'Q1550Male', 'Q1550Female', 'Q1560', 'Q1560Male', 'Q1560Female',\n","       'NetMigrations', 'CNMR'],\n","      dtype='object')"]},"metadata":{},"execution_count":18}],"source":["population_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.csv')\n","print(merged_data_without_missing_values.head())\n","print(population_data.head())\n","population_data.columns"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0mXF3BCGfs8_","executionInfo":{"status":"ok","timestamp":1734195683870,"user_tz":-60,"elapsed":27,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"568231fd-fa15-469b-8744-accfe46e83e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Population duplicates:       country_code    year  total_population\n","0              NaN  1950.0         69213.424\n","1              NaN  1951.0         70682.760\n","2              NaN  1952.0         72238.716\n","3              NaN  1953.0         73876.364\n","4              NaN  1954.0         75600.454\n","...            ...     ...               ...\n","82986          NaN  2096.0           758.370\n","82987          NaN  2097.0           757.477\n","82988          NaN  2098.0           756.514\n","82989          NaN  2099.0           755.508\n","82990          NaN  2100.0           754.397\n","\n","[40619 rows x 3 columns]\n","Merged dataset duplicates: Empty DataFrame\n","Columns: [country_code, year, oecd_eps, annual_transport_trends, electoral_democracy_index, total_population]\n","Index: []\n"]}],"source":["population_data_clean = population_data[['ISO3_code', 'Time', 'TPopulation1July']].drop_duplicates()\n","\n","population_data_clean.columns = ['country_code', 'year', 'total_population']\n","\n","# Check if there are still duplicates\n","population_duplicates = population_data_clean[population_data_clean.duplicated(subset=['country_code', 'year'], keep=False)]\n","print(\"Population duplicates:\", population_duplicates)\n","\n","# Merge with the cleaned dataset (the transport data) based on country code and year\n","merged_data_with_population = pd.merge(merged_data_without_missing_values, population_data_clean, on=['country_code', 'year'], how='inner')\n","\n","# Ensure there is only one entry per country per year after the merge\n","merged_duplicates = merged_data_with_population[merged_data_with_population.duplicated(subset=['country_code', 'year'], keep=False)]\n","print(\"Merged dataset duplicates:\", merged_duplicates)\n","\n","merged_data_with_population['transport_trend_per_person'] = (merged_data_with_population['annual_transport_trends']) / (merged_data_with_population['total_population'])\n","\n","# Save the final dataset to a CSV file\n","merged_data_with_population['total_population'] = merged_data_with_population['total_population']*1000\n","merged_data_with_population['transport_trend_per_person'] = merged_data_with_population['transport_trend_per_person']/1000\n","merged_data_with_population['annual_transport_trends'] = merged_data_with_population['annual_transport_trends']*1000000\n","merged_data_with_population['transport_trend_per_person'] = merged_data_with_population['annual_transport_trends']/merged_data_with_population['total_population']\n","merged_data_with_population.to_csv('final_dataset_with_transport_trend_per_person.csv', index=False)\n","\n","\n","#Comment on our variables:\n","  #transport_trend is in km\n","  #total_population is the number of people"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"FZrsU4p93AR3","executionInfo":{"status":"ok","timestamp":1734195683871,"user_tz":-60,"elapsed":20,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["#merged_data_with_population.to_csv('final_dataset.csv', index=False)\n","#from google.colab import files\n","#files.download('final_dataset.csv')"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"u9QUIiskKY3V","executionInfo":{"status":"ok","timestamp":1734195683871,"user_tz":-60,"elapsed":18,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["final_data = merged_data_with_population\n","#End of cleaning the data\n","#Our final dataset is \"final_data\""]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":802},"id":"pr6Jki7KLV0c","executionInfo":{"status":"ok","timestamp":1734195684437,"user_tz":-60,"elapsed":583,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"057940fb-5ff9-44bc-faa6-d109f4e2e646"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      oecd_eps  annual_transport_trends  electoral_democracy_index  \\\n","year                                                                 \n","1993        21                       21                         21   \n","1994        21                       21                         21   \n","1995        22                       22                         22   \n","1996        22                       22                         22   \n","1997        22                       22                         22   \n","1998        22                       22                         22   \n","1999        22                       22                         22   \n","2000        22                       22                         22   \n","2001        23                       23                         23   \n","2002        23                       23                         23   \n","2003        23                       23                         23   \n","2004        23                       23                         23   \n","2005        23                       23                         23   \n","2006        23                       23                         23   \n","2007        23                       23                         23   \n","2008        24                       24                         24   \n","2009        21                       21                         21   \n","2010        21                       21                         21   \n","2011        20                       20                         20   \n","2012        20                       20                         20   \n","2013         8                        8                          8   \n","2014         8                        8                          8   \n","2015         8                        8                          8   \n","\n","      total_population  transport_trend_per_person  \n","year                                                \n","1993                21                          21  \n","1994                21                          21  \n","1995                22                          22  \n","1996                22                          22  \n","1997                22                          22  \n","1998                22                          22  \n","1999                22                          22  \n","2000                22                          22  \n","2001                23                          23  \n","2002                23                          23  \n","2003                23                          23  \n","2004                23                          23  \n","2005                23                          23  \n","2006                23                          23  \n","2007                23                          23  \n","2008                24                          24  \n","2009                21                          21  \n","2010                21                          21  \n","2011                20                          20  \n","2012                20                          20  \n","2013                 8                           8  \n","2014                 8                           8  \n","2015                 8                           8  "],"text/html":["\n","  <div id=\"df-bb23eb69-29b7-4484-82d3-354464e912b4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1993</th>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1994</th>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>2001</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2002</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2003</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2004</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2005</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2006</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2007</th>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2008</th>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>2009</th>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>2010</th>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>2011</th>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>2012</th>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>2013</th>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2014</th>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2015</th>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb23eb69-29b7-4484-82d3-354464e912b4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bb23eb69-29b7-4484-82d3-354464e912b4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bb23eb69-29b7-4484-82d3-354464e912b4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c22d2196-7255-4775-9064-54a3ac45e8d0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c22d2196-7255-4775-9064-54a3ac45e8d0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c22d2196-7255-4775-9064-54a3ac45e8d0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_6f7dc652-df35-46cd-9234-f757e3da8db5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfn_counts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6f7dc652-df35-46cd-9234-f757e3da8db5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dfn_counts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfn_counts","summary":"{\n  \"name\": \"dfn_counts\",\n  \"rows\": 23,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 1993,\n        \"max\": 2015,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2008,\n          2002,\n          1993\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}],"source":["dfn_counts = final_data.groupby('year').count().loc[:, ['oecd_eps', 'annual_transport_trends', 'electoral_democracy_index', 'total_population', 'transport_trend_per_person']]\n","dfn_counts = dfn_counts.loc[(dfn_counts != 0).any(axis=1)]\n","dfn_counts"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"FIcM2IofOCBW","executionInfo":{"status":"ok","timestamp":1734195684437,"user_tz":-60,"elapsed":62,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"9b30ce88-b091-408d-e6b0-2b91656cd835"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year  oecd_eps  annual_transport_trends  \\\n","2            AUS  1995  0.500000             222866000000   \n","3            AUS  1996  0.458333             226008000000   \n","4            AUS  1997  0.458333             227677000000   \n","5            AUS  1998  0.770833             229896000000   \n","6            AUS  1999  1.020833             235270000000   \n","..           ...   ...       ...                      ...   \n","457          USA  2008  2.475000            5148478000000   \n","458          USA  2009  2.933333            5494099000000   \n","459          USA  2010  2.683333            5520043000000   \n","460          USA  2011  2.475000            5575420000000   \n","461          USA  2012  3.166667            5617316000000   \n","\n","     electoral_democracy_index  total_population  transport_trend_per_person  \n","2                        0.891        18095344.0                12316.206865  \n","3                        0.889        18305307.0                12346.583425  \n","4                        0.885        18504912.0                12303.598093  \n","5                        0.886        18701717.0                12292.775043  \n","6                        0.886        18909981.0                12441.577810  \n","..                         ...               ...                         ...  \n","457                      0.902       304970333.0                16881.897821  \n","458                      0.907       308023454.0                17836.625519  \n","459                      0.905       311062790.0                17745.751589  \n","460                      0.901       314105078.0                17750.174672  \n","461                      0.901       317115355.0                17713.793771  \n","\n","[399 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-97a9044e-33e5-4442-ba76-ed8b9e3cd11d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>AUS</td>\n","      <td>1995</td>\n","      <td>0.500000</td>\n","      <td>222866000000</td>\n","      <td>0.891</td>\n","      <td>18095344.0</td>\n","      <td>12316.206865</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AUS</td>\n","      <td>1996</td>\n","      <td>0.458333</td>\n","      <td>226008000000</td>\n","      <td>0.889</td>\n","      <td>18305307.0</td>\n","      <td>12346.583425</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AUS</td>\n","      <td>1997</td>\n","      <td>0.458333</td>\n","      <td>227677000000</td>\n","      <td>0.885</td>\n","      <td>18504912.0</td>\n","      <td>12303.598093</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>AUS</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>229896000000</td>\n","      <td>0.886</td>\n","      <td>18701717.0</td>\n","      <td>12292.775043</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>AUS</td>\n","      <td>1999</td>\n","      <td>1.020833</td>\n","      <td>235270000000</td>\n","      <td>0.886</td>\n","      <td>18909981.0</td>\n","      <td>12441.577810</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>457</th>\n","      <td>USA</td>\n","      <td>2008</td>\n","      <td>2.475000</td>\n","      <td>5148478000000</td>\n","      <td>0.902</td>\n","      <td>304970333.0</td>\n","      <td>16881.897821</td>\n","    </tr>\n","    <tr>\n","      <th>458</th>\n","      <td>USA</td>\n","      <td>2009</td>\n","      <td>2.933333</td>\n","      <td>5494099000000</td>\n","      <td>0.907</td>\n","      <td>308023454.0</td>\n","      <td>17836.625519</td>\n","    </tr>\n","    <tr>\n","      <th>459</th>\n","      <td>USA</td>\n","      <td>2010</td>\n","      <td>2.683333</td>\n","      <td>5520043000000</td>\n","      <td>0.905</td>\n","      <td>311062790.0</td>\n","      <td>17745.751589</td>\n","    </tr>\n","    <tr>\n","      <th>460</th>\n","      <td>USA</td>\n","      <td>2011</td>\n","      <td>2.475000</td>\n","      <td>5575420000000</td>\n","      <td>0.901</td>\n","      <td>314105078.0</td>\n","      <td>17750.174672</td>\n","    </tr>\n","    <tr>\n","      <th>461</th>\n","      <td>USA</td>\n","      <td>2012</td>\n","      <td>3.166667</td>\n","      <td>5617316000000</td>\n","      <td>0.901</td>\n","      <td>317115355.0</td>\n","      <td>17713.793771</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>399 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97a9044e-33e5-4442-ba76-ed8b9e3cd11d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97a9044e-33e5-4442-ba76-ed8b9e3cd11d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97a9044e-33e5-4442-ba76-ed8b9e3cd11d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-67ecc8a6-12f1-4d1d-a4e3-c41292f86655\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67ecc8a6-12f1-4d1d-a4e3-c41292f86655')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-67ecc8a6-12f1-4d1d-a4e3-c41292f86655 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8eb1079d-d925-4b69-a9a3-2035de6c8c2e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8eb1079d-d925-4b69-a9a3-2035de6c8c2e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 399,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"GRC\",\n          \"PRT\",\n          \"AUS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8558576174233172,\n        \"min\": 0.45833331346512,\n        \"max\": 4.1333332061768,\n        \"num_unique_values\": 228,\n        \"samples\": [\n          3.6166667938232,\n          1.3541666269302,\n          2.0083332061768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 939258865137,\n        \"min\": 17977000000,\n        \"max\": 5617316000000,\n        \"num_unique_values\": 392,\n        \"samples\": [\n          59137000000,\n          85644000000,\n          56536000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03174406533604975,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 96,\n        \"samples\": [\n          0.854,\n          0.846,\n          0.863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62472622.77481205,\n        \"min\": 2025085.0,\n        \"max\": 317115355.0,\n        \"num_unique_values\": 399,\n        \"samples\": [\n          127484598.0,\n          7144121.0,\n          10936626.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3412.4293956572874,\n        \"min\": 2450.8438542198032,\n        \"max\": 17836.625518782734,\n        \"num_unique_values\": 399,\n        \"samples\": [\n          6848.074306199718,\n          10292.518841716146,\n          10001.987815986393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}],"source":["df_s = final_data[(final_data['year'] >= 1995) & (final_data['year'] <= 2012)]\n","final_data = df_s\n","final_data"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D8L2nDtpEb_S","executionInfo":{"status":"ok","timestamp":1734195684438,"user_tz":-60,"elapsed":55,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d492a576-63af-4729-e712-55e63b2b9e40"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code  AUS  BEL  CAN  CHE  CZE  DEU  DNK  ESP  FIN  FRA  ...  JPN  KOR  \\\n","year                                                            ...             \n","1995            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","1996            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","1997            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","1998            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","1999            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","2000            1    1    1    1    1    1    1    1    1    1  ...    1    0   \n","2001            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2002            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2003            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2004            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2005            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2006            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2007            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2008            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2009            1    1    1    1    1    1    1    1    1    1  ...    1    1   \n","2010            1    1    0    1    1    1    1    1    1    1  ...    1    1   \n","2011            1    1    0    1    1    1    1    1    1    1  ...    1    1   \n","2012            1    1    0    1    1    1    1    1    1    1  ...    1    1   \n","\n","country_code  NLD  NOR  POL  PRT  SVK  SVN  SWE  USA  \n","year                                                  \n","1995            1    1    1    1    1    0    1    1  \n","1996            1    1    1    1    1    0    1    1  \n","1997            1    1    1    1    1    0    1    1  \n","1998            1    1    1    1    1    0    1    1  \n","1999            1    1    1    1    1    0    1    1  \n","2000            1    1    1    1    1    0    1    1  \n","2001            1    1    1    1    1    0    1    1  \n","2002            1    1    1    1    1    0    1    1  \n","2003            1    1    1    1    1    0    1    1  \n","2004            1    1    1    1    1    0    1    1  \n","2005            1    1    1    1    1    0    1    1  \n","2006            1    1    1    1    1    0    1    1  \n","2007            1    1    1    1    1    0    1    1  \n","2008            1    1    1    1    1    1    1    1  \n","2009            0    1    1    0    1    1    1    1  \n","2010            1    1    1    0    1    1    1    1  \n","2011            1    1    1    0    1    0    1    1  \n","2012            1    1    1    0    1    0    1    1  \n","\n","[18 rows x 24 columns]\n"]}],"source":["# Create a pivot table to check country availability for each year\n","country_year_table = pd.crosstab(final_data['year'], final_data['country_code'])\n","\n","# Display the table to check if all countries are available for each year\n","print(country_year_table)"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkVy_FTTFmsQ","executionInfo":{"status":"ok","timestamp":1734195684441,"user_tz":-60,"elapsed":51,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"8a086877-138c-42b2-81f3-049e1ad282e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code  CAN  GRC  KOR  NLD  PRT  SVN\n","year                                      \n","1995            1    1    0    1    1    0\n","1996            1    1    0    1    1    0\n","1997            1    1    0    1    1    0\n","1998            1    1    0    1    1    0\n","1999            1    1    0    1    1    0\n","2000            1    1    0    1    1    0\n","2001            1    1    1    1    1    0\n","2002            1    1    1    1    1    0\n","2003            1    1    1    1    1    0\n","2004            1    1    1    1    1    0\n","2005            1    1    1    1    1    0\n","2006            1    1    1    1    1    0\n","2007            1    1    1    1    1    0\n","2008            1    1    1    1    1    1\n","2009            1    0    1    0    0    1\n","2010            0    0    1    1    0    1\n","2011            0    0    1    1    0    0\n","2012            0    0    1    1    0    0\n"]}],"source":["# Find missing countries for each year (those that have 0 occurrences)\n","missing_data = country_year_table.loc[:, (country_year_table == 0).any()]\n","\n","# Display missing countries per year\n","print(missing_data)"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nWAbFExsPE9v","executionInfo":{"status":"ok","timestamp":1734195684442,"user_tz":-60,"elapsed":44,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"c1e60fde-8c2a-413e-fd64-8d96a918687d"},"outputs":[{"output_type":"stream","name":"stdout","text":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","25          BEL  1995  0.770833              91158000000   \n","26          BEL  1996  0.770833              92416000000   \n","27          BEL  1997  0.770833              94033000000   \n","28          BEL  1998  0.770833              99280000000   \n","29          BEL  1999  0.770833             102830000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \n","25                      0.881        10137265.0                 8992.366284  \n","26                      0.882        10156970.0                 9098.776505  \n","27                      0.882        10181464.0                 9235.705199  \n","28                      0.882        10203182.0                 9730.297862  \n","29                      0.883        10226682.0                10055.069670  \n"]}],"source":["#Decision: We remove Sweden, Canada, Greece, Korea, Netherlands, Portugal and Slovenia as we need to have a data for every years\n","\n","final_data = final_data[~final_data['country_code'].isin(['SVN','CAN','GRC','KOR','NLD','PRT','SVN', 'AUS','ITA', 'JPN', 'USA'])]\n","\n","# Display the updated DataFrame to verify the countries are removed\n","print(final_data.head())"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aRjXmTOaHulm","executionInfo":{"status":"ok","timestamp":1734195684442,"user_tz":-60,"elapsed":38,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"be52be22-8fe2-498f-e8d4-04a35cd918c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of unique countries: 14\n","Number of unique years: 18\n"]}],"source":["# Count the number of unique countries\n","num_countries = final_data['country_code'].nunique()\n","print(f\"Number of unique countries: {num_countries}\")\n","\n","# Count the number of unique years\n","num_years = final_data['year'].nunique()\n","print(f\"Number of unique years: {num_years}\")"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f5mTnFFcegqa","executionInfo":{"status":"ok","timestamp":1734195685136,"user_tz":-60,"elapsed":54,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"244eaf27-0168-4407-85b2-eff204520722"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code\n","BEL    18\n","CHE    18\n","CZE    18\n","DEU    18\n","DNK    18\n","ESP    18\n","FIN    18\n","FRA    18\n","GBR    18\n","HUN    18\n","NOR    18\n","POL    18\n","SVK    18\n","SWE    18\n","Name: year, dtype: int64\n"]}],"source":["# Count the number of years available for each country\n","years_per_country = final_data.groupby('country_code')['year'].nunique()\n","\n","# Display the result\n","print(years_per_country)"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P0SAKrGEexGF","executionInfo":{"status":"ok","timestamp":1734195685137,"user_tz":-60,"elapsed":39,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2ffab285-6ee6-42f5-a4b6-56bd1f672d42"},"outputs":[{"output_type":"stream","name":"stdout","text":["['BEL' 'CZE' 'DNK' 'FIN' 'FRA' 'DEU' 'HUN' 'NOR' 'POL' 'SVK' 'ESP' 'SWE'\n"," 'CHE' 'GBR']\n"]}],"source":["final_data = final_data[final_data['country_code'] != 'SVN']\n","\n","# Verify if SVN is excluded by checking unique country codes\n","unique_countries = final_data['country_code'].unique()\n","print(unique_countries)\n","\n","#Decision:  #Kick out SVC because only available for 3 years\n","            #Keep KOR even though it has only data fore 12 years because it might be interesting regarding the democracy index"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lokl2B52P7y1","executionInfo":{"status":"ok","timestamp":1734195685138,"user_tz":-60,"elapsed":31,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"45c02f24-8877-41d4-c1e8-f616fcced7fe"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 252 entries, 25 to 438\n","Data columns (total 7 columns):\n"," #   Column                      Non-Null Count  Dtype  \n","---  ------                      --------------  -----  \n"," 0   country_code                252 non-null    object \n"," 1   year                        252 non-null    int64  \n"," 2   oecd_eps                    252 non-null    float64\n"," 3   annual_transport_trends     252 non-null    int64  \n"," 4   electoral_democracy_index   252 non-null    float64\n"," 5   total_population            252 non-null    float64\n"," 6   transport_trend_per_person  252 non-null    float64\n","dtypes: float64(4), int64(2), object(1)\n","memory usage: 15.8+ KB\n"]}],"source":["# Get general information about the dataset\n","final_data.info()"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"-J0cGqli2-4X","executionInfo":{"status":"ok","timestamp":1734195685139,"user_tz":-60,"elapsed":23,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"5798ad46-28fc-46b6-bb96-d7ba927e7aa4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              year    oecd_eps  annual_transport_trends  \\\n","count   252.000000  252.000000             2.520000e+02   \n","mean   2003.500000    2.057937             2.333741e+11   \n","std       5.198452    0.871474             2.759715e+11   \n","min    1995.000000    0.520833             1.797700e+10   \n","25%    1999.000000    1.229167             5.634450e+10   \n","50%    2003.500000    2.102083             8.965400e+10   \n","75%    2008.000000    2.721875             3.212658e+11   \n","max    2012.000000    4.075000             8.963000e+11   \n","\n","       electoral_democracy_index  total_population  transport_trend_per_person  \n","count                 252.000000      2.520000e+02                  252.000000  \n","mean                    0.880298      2.519245e+07                 8911.350290  \n","std                     0.031601      2.550984e+07                 2850.912264  \n","min                     0.706000      4.358992e+06                 2885.467506  \n","25%                     0.875000      5.411697e+06                 6108.542433  \n","50%                     0.887500      1.022324e+07                10444.522299  \n","75%                     0.897000      4.268855e+07                11030.518119  \n","max                     0.922000      8.238964e+07                12500.892544  "],"text/html":["\n","  <div id=\"df-580e92ee-122d-4948-abb6-67ff320ba46a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>252.000000</td>\n","      <td>252.000000</td>\n","      <td>2.520000e+02</td>\n","      <td>252.000000</td>\n","      <td>2.520000e+02</td>\n","      <td>252.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2003.500000</td>\n","      <td>2.057937</td>\n","      <td>2.333741e+11</td>\n","      <td>0.880298</td>\n","      <td>2.519245e+07</td>\n","      <td>8911.350290</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.198452</td>\n","      <td>0.871474</td>\n","      <td>2.759715e+11</td>\n","      <td>0.031601</td>\n","      <td>2.550984e+07</td>\n","      <td>2850.912264</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1995.000000</td>\n","      <td>0.520833</td>\n","      <td>1.797700e+10</td>\n","      <td>0.706000</td>\n","      <td>4.358992e+06</td>\n","      <td>2885.467506</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1999.000000</td>\n","      <td>1.229167</td>\n","      <td>5.634450e+10</td>\n","      <td>0.875000</td>\n","      <td>5.411697e+06</td>\n","      <td>6108.542433</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2003.500000</td>\n","      <td>2.102083</td>\n","      <td>8.965400e+10</td>\n","      <td>0.887500</td>\n","      <td>1.022324e+07</td>\n","      <td>10444.522299</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2008.000000</td>\n","      <td>2.721875</td>\n","      <td>3.212658e+11</td>\n","      <td>0.897000</td>\n","      <td>4.268855e+07</td>\n","      <td>11030.518119</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2012.000000</td>\n","      <td>4.075000</td>\n","      <td>8.963000e+11</td>\n","      <td>0.922000</td>\n","      <td>8.238964e+07</td>\n","      <td>12500.892544</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-580e92ee-122d-4948-abb6-67ff320ba46a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-580e92ee-122d-4948-abb6-67ff320ba46a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-580e92ee-122d-4948-abb6-67ff320ba46a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-23efb922-e790-4e89-b9f7-6ff1911862ff\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23efb922-e790-4e89-b9f7-6ff1911862ff')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-23efb922-e790-4e89-b9f7-6ff1911862ff button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 870.4284552709236,\n        \"min\": 5.198452114088397,\n        \"max\": 2012.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          252.0,\n          2003.5,\n          2008.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.41680992004116,\n        \"min\": 0.52083331346512,\n        \"max\": 252.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.057936508740696,\n          2.10208332538605,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 293207190262.85333,\n        \"min\": 252.0,\n        \"max\": 896300000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          233374123015.87302,\n          89654000000.0,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.83334395234645,\n        \"min\": 0.03160126822883904,\n        \"max\": 252.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.880297619047619,\n          0.8875,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27405978.17732815,\n        \"min\": 252.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25192445.82936508,\n          10223239.0,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4509.805449543235,\n        \"min\": 252.0,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8911.350290204044,\n          10444.522299184879,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}],"source":["# Check for basic statistics\n","final_data.describe()"]},{"cell_type":"markdown","metadata":{"id":"LLZudmpUAUzt"},"source":["# *Expansion of the Data base*\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qyOtuY7yAe8b"},"source":["### Include GDP per capita into data set"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"kDfimBVhAv5I","executionInfo":{"status":"ok","timestamp":1734195687427,"user_tz":-60,"elapsed":2307,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"0337e410-ea07-4c04-d26e-74728e718dfb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Series Name  Series Code    Country Name Country Code 1993 [YR1993]  \\\n","0  Population, total  SP.POP.TOTL     Afghanistan          AFG      14003760   \n","1  Population, total  SP.POP.TOTL         Albania          ALB       3227287   \n","2  Population, total  SP.POP.TOTL         Algeria          DZA      27354327   \n","3  Population, total  SP.POP.TOTL  American Samoa          ASM         51174   \n","4  Population, total  SP.POP.TOTL         Andorra          AND         59156   \n","\n","  1994 [YR1994] 1995 [YR1995] 1996 [YR1996] 1997 [YR1997] 1998 [YR1998]  ...  \\\n","0      15455555      16418912      17106595      17788819      18493132  ...   \n","1       3207536       3187784       3168033       3148281       3128530  ...   \n","2      27937006      28478022      28984634      29476031      29924668  ...   \n","3         52288         53401         54500         55578         56603  ...   \n","4         61037         62928         64147         64682         65186  ...   \n","\n","  2003 [YR2003] 2004 [YR2004] 2005 [YR2005] 2006 [YR2006] 2007 [YR2007]  \\\n","0      22645130      23553551      24411191      25442944      25903301   \n","1       3039616       3026939       3011487       2992547       2970017   \n","2      32055883      32510186      32956690      33435080      33983827   \n","3         57941         57626         57254         56837         56383   \n","4         73907         76933         79826         80221         78168   \n","\n","  2008 [YR2008] 2009 [YR2009] 2010 [YR2010] 2011 [YR2011] 2012 [YR2012]  \n","0      26427199      27385307      28189672      29249157      30466479  \n","1       2947314       2927519       2913021       2905195       2900401  \n","2      34569592      35196037      35856344      36543541      37260563  \n","3         55891         55366         54849         54310         53691  \n","4         76055         73852         71519         70567         71013  \n","\n","[5 rows x 24 columns]"],"text/html":["\n","  <div id=\"df-a9575d1c-b260-427d-996c-ac6b519f6fe3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Series Name</th>\n","      <th>Series Code</th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1993 [YR1993]</th>\n","      <th>1994 [YR1994]</th>\n","      <th>1995 [YR1995]</th>\n","      <th>1996 [YR1996]</th>\n","      <th>1997 [YR1997]</th>\n","      <th>1998 [YR1998]</th>\n","      <th>...</th>\n","      <th>2003 [YR2003]</th>\n","      <th>2004 [YR2004]</th>\n","      <th>2005 [YR2005]</th>\n","      <th>2006 [YR2006]</th>\n","      <th>2007 [YR2007]</th>\n","      <th>2008 [YR2008]</th>\n","      <th>2009 [YR2009]</th>\n","      <th>2010 [YR2010]</th>\n","      <th>2011 [YR2011]</th>\n","      <th>2012 [YR2012]</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Population, total</td>\n","      <td>SP.POP.TOTL</td>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>14003760</td>\n","      <td>15455555</td>\n","      <td>16418912</td>\n","      <td>17106595</td>\n","      <td>17788819</td>\n","      <td>18493132</td>\n","      <td>...</td>\n","      <td>22645130</td>\n","      <td>23553551</td>\n","      <td>24411191</td>\n","      <td>25442944</td>\n","      <td>25903301</td>\n","      <td>26427199</td>\n","      <td>27385307</td>\n","      <td>28189672</td>\n","      <td>29249157</td>\n","      <td>30466479</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Population, total</td>\n","      <td>SP.POP.TOTL</td>\n","      <td>Albania</td>\n","      <td>ALB</td>\n","      <td>3227287</td>\n","      <td>3207536</td>\n","      <td>3187784</td>\n","      <td>3168033</td>\n","      <td>3148281</td>\n","      <td>3128530</td>\n","      <td>...</td>\n","      <td>3039616</td>\n","      <td>3026939</td>\n","      <td>3011487</td>\n","      <td>2992547</td>\n","      <td>2970017</td>\n","      <td>2947314</td>\n","      <td>2927519</td>\n","      <td>2913021</td>\n","      <td>2905195</td>\n","      <td>2900401</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Population, total</td>\n","      <td>SP.POP.TOTL</td>\n","      <td>Algeria</td>\n","      <td>DZA</td>\n","      <td>27354327</td>\n","      <td>27937006</td>\n","      <td>28478022</td>\n","      <td>28984634</td>\n","      <td>29476031</td>\n","      <td>29924668</td>\n","      <td>...</td>\n","      <td>32055883</td>\n","      <td>32510186</td>\n","      <td>32956690</td>\n","      <td>33435080</td>\n","      <td>33983827</td>\n","      <td>34569592</td>\n","      <td>35196037</td>\n","      <td>35856344</td>\n","      <td>36543541</td>\n","      <td>37260563</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Population, total</td>\n","      <td>SP.POP.TOTL</td>\n","      <td>American Samoa</td>\n","      <td>ASM</td>\n","      <td>51174</td>\n","      <td>52288</td>\n","      <td>53401</td>\n","      <td>54500</td>\n","      <td>55578</td>\n","      <td>56603</td>\n","      <td>...</td>\n","      <td>57941</td>\n","      <td>57626</td>\n","      <td>57254</td>\n","      <td>56837</td>\n","      <td>56383</td>\n","      <td>55891</td>\n","      <td>55366</td>\n","      <td>54849</td>\n","      <td>54310</td>\n","      <td>53691</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Population, total</td>\n","      <td>SP.POP.TOTL</td>\n","      <td>Andorra</td>\n","      <td>AND</td>\n","      <td>59156</td>\n","      <td>61037</td>\n","      <td>62928</td>\n","      <td>64147</td>\n","      <td>64682</td>\n","      <td>65186</td>\n","      <td>...</td>\n","      <td>73907</td>\n","      <td>76933</td>\n","      <td>79826</td>\n","      <td>80221</td>\n","      <td>78168</td>\n","      <td>76055</td>\n","      <td>73852</td>\n","      <td>71519</td>\n","      <td>70567</td>\n","      <td>71013</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9575d1c-b260-427d-996c-ac6b519f6fe3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a9575d1c-b260-427d-996c-ac6b519f6fe3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a9575d1c-b260-427d-996c-ac6b519f6fe3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d389c533-fd50-4e4f-86da-8e80e40d96ba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d389c533-fd50-4e4f-86da-8e80e40d96ba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d389c533-fd50-4e4f-86da-8e80e40d96ba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"GDP_per_capita_full_data"}},"metadata":{},"execution_count":32}],"source":["GDP_per_capita_full_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/GDP_per_capita_World_Bank.csv')\n","GDP_per_capita_full_data.head()"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"4PqPxy4VWzQt","executionInfo":{"status":"ok","timestamp":1734195687428,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"92263d58-75d9-465a-cf44-1ad02d4ee38f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","25          BEL  1995  0.770833              91158000000   \n","26          BEL  1996  0.770833              92416000000   \n","27          BEL  1997  0.770833              94033000000   \n","28          BEL  1998  0.770833              99280000000   \n","29          BEL  1999  0.770833             102830000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \n","25                      0.881        10137265.0                 8992.366284  \n","26                      0.882        10156970.0                 9098.776505  \n","27                      0.882        10181464.0                 9235.705199  \n","28                      0.882        10203182.0                 9730.297862  \n","29                      0.883        10226682.0                10055.069670  "],"text/html":["\n","  <div id=\"df-348ce981-ce4d-4cc2-acb9-f71627c1e9b6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>25</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-348ce981-ce4d-4cc2-acb9-f71627c1e9b6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-348ce981-ce4d-4cc2-acb9-f71627c1e9b6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-348ce981-ce4d-4cc2-acb9-f71627c1e9b6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c913fb21-acb9-43ee-ba9f-847b03c4e58e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c913fb21-acb9-43ee-ba9f-847b03c4e58e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c913fb21-acb9-43ee-ba9f-847b03c4e58e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}],"source":["final_data.head()"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":657},"id":"ANothdZuAyl_","executionInfo":{"status":"ok","timestamp":1734195687428,"user_tz":-60,"elapsed":39,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2b8ab650-2bff-494d-921e-180be63648ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["['BEL', 'CZE', 'DNK', 'FIN', 'FRA', 'DEU', 'HUN', 'NOR', 'POL', 'SVK', 'ESP', 'SWE', 'CHE', 'GBR']\n","['Population, total', 'Population growth (annual %)', 'Surface area (sq. km)', 'Poverty headcount ratio at national poverty lines (% of population)', 'GNI, Atlas method (current US$)', 'GNI per capita, Atlas method (current US$)', 'GNI, PPP (current international $)', 'GNI per capita, PPP (current international $)', 'Income share held by lowest 20%', 'Life expectancy at birth, total (years)', 'Fertility rate, total (births per woman)', 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'Contraceptive prevalence, any method (% of married women ages 15-49)', 'Births attended by skilled health staff (% of total)', 'Mortality rate, under-5 (per 1,000 live births)', 'Prevalence of underweight, weight for age (% of children under 5)', 'Immunization, measles (% of children ages 12-23 months)', 'Primary completion rate, total (% of relevant age group)', 'School enrollment, secondary (% gross)', 'School enrollment, primary and secondary (gross), gender parity index (GPI)', 'Prevalence of HIV, total (% of population ages 15-49)', 'Forest area (sq. km)', 'Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)', 'Energy use (kg of oil equivalent per capita)', 'Electric power consumption (kWh per capita)', 'GDP (current US$)', 'GDP growth (annual %)', 'Inflation, GDP deflator (annual %)', 'Agriculture, forestry, and fishing, value added (% of GDP)', 'Industry (including construction), value added (% of GDP)', 'Exports of goods and services (% of GDP)', 'Imports of goods and services (% of GDP)', 'Gross capital formation (% of GDP)', 'Revenue, excluding grants (% of GDP)', 'Start-up procedures to register a business (number)', 'Market capitalization of listed domestic companies (% of GDP)', 'Military expenditure (% of GDP)', 'Mobile cellular subscriptions (per 100 people)', 'High-technology exports (% of manufactured exports)', 'Merchandise trade (% of GDP)', 'Net barter terms of trade index (2015 = 100)', 'External debt stocks, total (DOD, current US$)', 'Total debt service (% of GNI)', 'Net migration', 'Personal remittances, paid (current US$)', 'Foreign direct investment, net inflows (BoP, current US$)', 'Net ODA received per capita (current US$)', 'GDP per capita (current US$)', 'Foreign direct investment, net (BoP, current US$)', 'Inflation, consumer prices (annual %)']\n"]},{"output_type":"execute_result","data":{"text/plain":["                        Series Name Country Name Country Code  \\\n","10217  GDP per capita (current US$)      Belgium          BEL   \n","10251  GDP per capita (current US$)      Czechia          CZE   \n","10252  GDP per capita (current US$)      Denmark          DNK   \n","10265  GDP per capita (current US$)      Finland          FIN   \n","10266  GDP per capita (current US$)       France          FRA   \n","\n","          1993 [YR1993]     1994 [YR1994]     1995 [YR1995]     1996 [YR1996]  \\\n","10217  22283.9360213551  24208.5547931447  28413.8264387368  27489.5551770488   \n","10251   3956.1783495613  4630.55121674353  5824.12129119574  6532.83705470198   \n","10252  27597.9752286357  29995.5796235479  35351.3654606819  35650.7140860994   \n","10265  17608.8123902264   20301.333085866  26271.5998141691  25783.4504878611   \n","10266   22380.331904695   23496.367675721  26889.4250554833  26870.2852380937   \n","\n","          1997 [YR1997]     1998 [YR1998]     1999 [YR1999]  ...  \\\n","10217  24820.9380503896  25338.4432934904  25252.8019066564  ...   \n","10251  6034.48843731935   6489.7036188033  6337.41912037126  ...   \n","10252  32835.9399398833   33368.142415092  33440.7948054204  ...   \n","10265  24691.8728133698  26009.2694886182  26186.1900105755  ...   \n","10266  24226.8846867539  24971.5744885632  24678.3910613218  ...   \n","\n","          2003 [YR2003]     2004 [YR2004]     2005 [YR2005]     2006 [YR2006]  \\\n","10217  30655.2092679024  35429.4077933344  36809.7013403619  38705.1067959147   \n","10251  9818.56849307488  11749.8526643577  13430.6698955613  15261.7975911138   \n","10252  40458.7773986609  46511.5983324305  48799.8256011275  52026.9995142723   \n","10265  32927.6802919408  37772.1781110398  39054.8504423825  41222.6020004611   \n","10266    29627.92426353  33797.1624418436  34768.1759037525  36470.2128399313   \n","\n","          2007 [YR2007]     2008 [YR2008]     2009 [YR2009]     2010 [YR2010]  \\\n","10217   44319.165448813   48303.397956286  44760.2912443709   44184.946353964   \n","10251  18466.5479299216  22804.5776774507  19861.6974295256  19960.0684872157   \n","10252  58487.0549677696  64322.0635020842  58163.2768762815  58041.3984363385   \n","10265  48476.3927287052  53772.7942390019  47481.4845364339  46505.3031791811   \n","10266  41557.6235648179  45515.9617533473  41737.7635518137  40676.0647913181   \n","\n","          2011 [YR2011]     2012 [YR2012]  \n","10217  47410.5669277464  44670.5606845101  \n","10251  21871.2660754128  19870.8012123403  \n","10252   61753.647131977  58507.5080517852  \n","10265  51148.9316365833  47708.0612784469  \n","10266  43846.4660764798  40870.8523645734  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-0431f9c3-03a5-4d79-98f9-8a6e15095af1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Series Name</th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1993 [YR1993]</th>\n","      <th>1994 [YR1994]</th>\n","      <th>1995 [YR1995]</th>\n","      <th>1996 [YR1996]</th>\n","      <th>1997 [YR1997]</th>\n","      <th>1998 [YR1998]</th>\n","      <th>1999 [YR1999]</th>\n","      <th>...</th>\n","      <th>2003 [YR2003]</th>\n","      <th>2004 [YR2004]</th>\n","      <th>2005 [YR2005]</th>\n","      <th>2006 [YR2006]</th>\n","      <th>2007 [YR2007]</th>\n","      <th>2008 [YR2008]</th>\n","      <th>2009 [YR2009]</th>\n","      <th>2010 [YR2010]</th>\n","      <th>2011 [YR2011]</th>\n","      <th>2012 [YR2012]</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>10217</th>\n","      <td>GDP per capita (current US$)</td>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>22283.9360213551</td>\n","      <td>24208.5547931447</td>\n","      <td>28413.8264387368</td>\n","      <td>27489.5551770488</td>\n","      <td>24820.9380503896</td>\n","      <td>25338.4432934904</td>\n","      <td>25252.8019066564</td>\n","      <td>...</td>\n","      <td>30655.2092679024</td>\n","      <td>35429.4077933344</td>\n","      <td>36809.7013403619</td>\n","      <td>38705.1067959147</td>\n","      <td>44319.165448813</td>\n","      <td>48303.397956286</td>\n","      <td>44760.2912443709</td>\n","      <td>44184.946353964</td>\n","      <td>47410.5669277464</td>\n","      <td>44670.5606845101</td>\n","    </tr>\n","    <tr>\n","      <th>10251</th>\n","      <td>GDP per capita (current US$)</td>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>3956.1783495613</td>\n","      <td>4630.55121674353</td>\n","      <td>5824.12129119574</td>\n","      <td>6532.83705470198</td>\n","      <td>6034.48843731935</td>\n","      <td>6489.7036188033</td>\n","      <td>6337.41912037126</td>\n","      <td>...</td>\n","      <td>9818.56849307488</td>\n","      <td>11749.8526643577</td>\n","      <td>13430.6698955613</td>\n","      <td>15261.7975911138</td>\n","      <td>18466.5479299216</td>\n","      <td>22804.5776774507</td>\n","      <td>19861.6974295256</td>\n","      <td>19960.0684872157</td>\n","      <td>21871.2660754128</td>\n","      <td>19870.8012123403</td>\n","    </tr>\n","    <tr>\n","      <th>10252</th>\n","      <td>GDP per capita (current US$)</td>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>27597.9752286357</td>\n","      <td>29995.5796235479</td>\n","      <td>35351.3654606819</td>\n","      <td>35650.7140860994</td>\n","      <td>32835.9399398833</td>\n","      <td>33368.142415092</td>\n","      <td>33440.7948054204</td>\n","      <td>...</td>\n","      <td>40458.7773986609</td>\n","      <td>46511.5983324305</td>\n","      <td>48799.8256011275</td>\n","      <td>52026.9995142723</td>\n","      <td>58487.0549677696</td>\n","      <td>64322.0635020842</td>\n","      <td>58163.2768762815</td>\n","      <td>58041.3984363385</td>\n","      <td>61753.647131977</td>\n","      <td>58507.5080517852</td>\n","    </tr>\n","    <tr>\n","      <th>10265</th>\n","      <td>GDP per capita (current US$)</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>17608.8123902264</td>\n","      <td>20301.333085866</td>\n","      <td>26271.5998141691</td>\n","      <td>25783.4504878611</td>\n","      <td>24691.8728133698</td>\n","      <td>26009.2694886182</td>\n","      <td>26186.1900105755</td>\n","      <td>...</td>\n","      <td>32927.6802919408</td>\n","      <td>37772.1781110398</td>\n","      <td>39054.8504423825</td>\n","      <td>41222.6020004611</td>\n","      <td>48476.3927287052</td>\n","      <td>53772.7942390019</td>\n","      <td>47481.4845364339</td>\n","      <td>46505.3031791811</td>\n","      <td>51148.9316365833</td>\n","      <td>47708.0612784469</td>\n","    </tr>\n","    <tr>\n","      <th>10266</th>\n","      <td>GDP per capita (current US$)</td>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>22380.331904695</td>\n","      <td>23496.367675721</td>\n","      <td>26889.4250554833</td>\n","      <td>26870.2852380937</td>\n","      <td>24226.8846867539</td>\n","      <td>24971.5744885632</td>\n","      <td>24678.3910613218</td>\n","      <td>...</td>\n","      <td>29627.92426353</td>\n","      <td>33797.1624418436</td>\n","      <td>34768.1759037525</td>\n","      <td>36470.2128399313</td>\n","      <td>41557.6235648179</td>\n","      <td>45515.9617533473</td>\n","      <td>41737.7635518137</td>\n","      <td>40676.0647913181</td>\n","      <td>43846.4660764798</td>\n","      <td>40870.8523645734</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0431f9c3-03a5-4d79-98f9-8a6e15095af1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0431f9c3-03a5-4d79-98f9-8a6e15095af1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0431f9c3-03a5-4d79-98f9-8a6e15095af1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-13bf299e-392a-47e7-997b-1fc3f8f1e840\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13bf299e-392a-47e7-997b-1fc3f8f1e840')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-13bf299e-392a-47e7-997b-1fc3f8f1e840 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"GDP_only_GDP"}},"metadata":{},"execution_count":34}],"source":["unique_country_codes_final_data = final_data['country_code'].unique().tolist()\n","print(unique_country_codes_final_data)\n","\n","# Delete the countries which are not in the merged data set\n","GDP_delete_countries = GDP_per_capita_full_data[GDP_per_capita_full_data['Country Code'].isin(unique_country_codes_final_data)]\n","GDP_delete_countries.head(50)\n","\n","unique_Series_Name = GDP_delete_countries['Series Name'].unique().tolist()\n","print(unique_Series_Name)\n","\n","GDP_per_capita = ['GDP per capita (current US$)']\n","\n","GDP_only_GDP = GDP_delete_countries[GDP_delete_countries['Series Name'].isin(GDP_per_capita)]\n","GDP_only_GDP = GDP_only_GDP.drop(columns=['Series Code'])\n","GDP_only_GDP.head()"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":635},"id":"6gLuyUABA1WH","executionInfo":{"status":"ok","timestamp":1734195687429,"user_tz":-60,"elapsed":35,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d9963b15-2cc7-4ad7-b7f1-8dccb87b70a3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Country Name Country Code           Year  GDP per capita (current US$)\n","0          Belgium          BEL    Series Name  GDP per capita (current US$)\n","1          Czechia          CZE    Series Name  GDP per capita (current US$)\n","2          Denmark          DNK    Series Name  GDP per capita (current US$)\n","3          Finland          FIN    Series Name  GDP per capita (current US$)\n","4           France          FRA    Series Name  GDP per capita (current US$)\n","..             ...          ...            ...                           ...\n","95          Sweden          SWE  1998 [YR1998]              30596.5272048832\n","96     Switzerland          CHE  1998 [YR1998]              42680.5867322391\n","97  United Kingdom          GBR  1998 [YR1998]              28274.5045119699\n","98         Belgium          BEL  1999 [YR1999]              25252.8019066564\n","99         Czechia          CZE  1999 [YR1999]              6337.41912037126\n","\n","[100 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-4943a8ec-a674-4f63-bd8c-898762cf1ee8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>GDP per capita (current US$)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>Series Name</td>\n","      <td>GDP per capita (current US$)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>Series Name</td>\n","      <td>GDP per capita (current US$)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>Series Name</td>\n","      <td>GDP per capita (current US$)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>Series Name</td>\n","      <td>GDP per capita (current US$)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>Series Name</td>\n","      <td>GDP per capita (current US$)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>Sweden</td>\n","      <td>SWE</td>\n","      <td>1998 [YR1998]</td>\n","      <td>30596.5272048832</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>Switzerland</td>\n","      <td>CHE</td>\n","      <td>1998 [YR1998]</td>\n","      <td>42680.5867322391</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>United Kingdom</td>\n","      <td>GBR</td>\n","      <td>1998 [YR1998]</td>\n","      <td>28274.5045119699</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1999 [YR1999]</td>\n","      <td>25252.8019066564</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>1999 [YR1999]</td>\n","      <td>6337.41912037126</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4943a8ec-a674-4f63-bd8c-898762cf1ee8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4943a8ec-a674-4f63-bd8c-898762cf1ee8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4943a8ec-a674-4f63-bd8c-898762cf1ee8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-effce0e6-77f5-4920-8e74-18db4c9f09ff\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-effce0e6-77f5-4920-8e74-18db4c9f09ff')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-effce0e6-77f5-4920-8e74-18db4c9f09ff button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"melted_df","summary":"{\n  \"name\": \"melted_df\",\n  \"rows\": 294,\n  \"fields\": [\n    {\n      \"column\": \"Country Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Slovak Republic\",\n          \"Sweden\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Series Name\",\n          \"2009 [YR2009]\",\n          \"2007 [YR2007]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 281,\n        \"samples\": [\n          \"26889.4250554833\",\n          \"37772.1781110398\",\n          \"30532.4805081656\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}],"source":["# Melt the DataFrame to convert years to rows\n","melted_df = pd.melt(\n","    GDP_only_GDP,\n","    id_vars=['Country Name', 'Country Code'],\n","    var_name='Year',\n","    value_name='GDP per capita (current US$)'\n",")\n","melted_df.head(100)"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FIaznSHnA4p5","executionInfo":{"status":"ok","timestamp":1734195687429,"user_tz":-60,"elapsed":32,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"dbb52a74-4a84-4fa3-cdc0-e0c407eafbc5"},"outputs":[{"output_type":"stream","name":"stdout","text":["       Country Name Country Code  Year  GDP per capita (current US$)\n","0           Belgium          BEL  1993              22283.9360213551\n","1           Belgium          BEL  1994              24208.5547931447\n","2           Belgium          BEL  1995              28413.8264387368\n","3           Belgium          BEL  1996              27489.5551770488\n","4           Belgium          BEL  1997              24820.9380503896\n","..              ...          ...   ...                           ...\n","289  United Kingdom          GBR  2009               38744.131693043\n","290  United Kingdom          GBR  2010               39598.957119545\n","291  United Kingdom          GBR  2011              42109.6418795749\n","292  United Kingdom          GBR  2012              42497.3404974322\n","293  United Kingdom          GBR   NaN  GDP per capita (current US$)\n","\n","[294 rows x 4 columns]\n"]}],"source":["\n","\n","# Clean up the Year column to extract only the year numbers\n","melted_df['Year'] = melted_df['Year'].str.extract('(\\d{4})')\n","\n","# Sort values by Country Name and Year\n","final_df = melted_df.sort_values(['Country Name', 'Year'])\n","\n","# Reset the index\n","final_df = final_df.reset_index(drop=True)\n","\n","# Display the result\n","print(final_df)"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"dwJbyBUaA7Ba","executionInfo":{"status":"ok","timestamp":1734195687429,"user_tz":-60,"elapsed":28,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["# Rename 'GDP per capita (current US$)' to 'GDP_per_capita' for consistency\n","final_df = final_df.rename(columns={'GDP per capita (current US$)': 'GDP_per_capita'})\n","\n","# Convert 'Year' column in final_df to numeric (int)\n","final_df['Year'] = pd.to_numeric(final_df['Year'])\n","\n","# Convert 'year' column in merged_data to numeric (int) if it's not already\n","final_data['year'] = pd.to_numeric(final_data['year'])\n","\n","# Merge with your existing merged_data\n","final_data = pd.merge(\n","    final_data,\n","    final_df[['Country Code', 'Year', 'GDP_per_capita']], # Use the new value_name here\n","    left_on=['country_code', 'year'],\n","    right_on=['Country Code', 'Year'],\n","    how='left'\n",")\n","\n","# Drop the redundant Country Code and Year columns from the merge\n","final_data = final_data.drop(columns=['Country Code', 'Year'])\n","\n","# Rename the 'GDP_per_capita' column to 'GDP per capita (current US$)' if needed\n","final_data = final_data.rename(columns={'GDP_per_capita': 'GDP per capita (current US$)'})"]},{"cell_type":"markdown","metadata":{"id":"WMXoFngdBCM1"},"source":["### Include Urbanization rate in data set"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":533},"id":"RPYHSLIJA-WL","executionInfo":{"status":"ok","timestamp":1734195687429,"user_tz":-60,"elapsed":27,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"1f1c42c7-941c-4b9d-871f-2dc3b5308727"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Country Name Country Code  \\\n","0                       World          WLD   \n","1                       World          WLD   \n","2          Sub-Saharan Africa          SSF   \n","3          Sub-Saharan Africa          SSF   \n","4  Middle East & North Africa          MEA   \n","\n","                                Series Name        Series Code  \\\n","0  Urban population (% of total population)  SP.URB.TOTL.IN.ZS   \n","1        Urban population growth (annual %)        SP.URB.GROW   \n","2  Urban population (% of total population)  SP.URB.TOTL.IN.ZS   \n","3        Urban population growth (annual %)        SP.URB.GROW   \n","4  Urban population (% of total population)  SP.URB.TOTL.IN.ZS   \n","\n","      1966 [YR1966]     1967 [YR1967]     1968 [YR1968]     1969 [YR1969]  \\\n","0  35.6985896043541  35.9113333072466  36.1190981160218  36.3158290978333   \n","1  2.68382471423551  2.66452525804191  2.66034109999451  2.65786520904756   \n","2  16.6539109122475   17.024101217401  17.4032759643621  17.7929614796032   \n","3  4.86035277179384  4.87893307554445  4.92330013804437    4.958345351624   \n","4  39.6324773687672  40.3614056427522  41.0964284169211  41.8434147812207   \n","\n","      1970 [YR1970]     1971 [YR1971]  ...     2006 [YR2006]  \\\n","0  36.5057841067337  36.7071289470001  ...  49.5882609391725   \n","1  2.62648301826007   2.6692085893248  ...  2.28940614089677   \n","2  18.1720015086803   18.583036815669  ...  34.0731599930885   \n","3  4.87385375371518  5.02415648166408  ...  4.15352053246659   \n","4   42.600596333835  43.3342536766714  ...  60.7422517926746   \n","\n","      2007 [YR2007]     2008 [YR2008]     2009 [YR2009]     2010 [YR2010]  \\\n","0  50.0818289225899  50.5883270492273  51.0869331741482  51.5762120154319   \n","1  2.25033498486039  2.27244228146479  2.23601570944456  2.19394788524816   \n","2  34.4886062372549  34.9917097740509  35.4996286138736   36.015180198568   \n","3  4.03314840056257  4.29244917701669  4.28352875564788  4.28664494680891   \n","4  61.1753525749648  61.6094501857364  62.0404519876563  62.4177973177006   \n","\n","      2011 [YR2011]     2012 [YR2012]     2013 [YR2013]     2014 [YR2014]  \\\n","0  52.0218135501306   52.461280460224  52.9088674665259  53.3645718877624   \n","1  2.08114675594206  2.09507837937765  2.09649450830311  2.08727403306608   \n","2    36.53701418725  37.0485316902706  37.5618732342058  38.0890675873544   \n","3   4.2722506149194  4.20853831294016  4.19677057408616  4.20750021303004   \n","4  62.6718495677513  62.9313265030972  63.2755312030127  63.6534664834985   \n","\n","      2015 [YR2015]  \n","0  53.8272499686749  \n","1   2.0661926763708  \n","2  38.6313191921447  \n","3  4.23353892829496  \n","4  64.0573700796651  \n","\n","[5 rows x 54 columns]"],"text/html":["\n","  <div id=\"df-e6ac9bc8-ed48-4e58-86a4-cae07eadf4f5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Series Name</th>\n","      <th>Series Code</th>\n","      <th>1966 [YR1966]</th>\n","      <th>1967 [YR1967]</th>\n","      <th>1968 [YR1968]</th>\n","      <th>1969 [YR1969]</th>\n","      <th>1970 [YR1970]</th>\n","      <th>1971 [YR1971]</th>\n","      <th>...</th>\n","      <th>2006 [YR2006]</th>\n","      <th>2007 [YR2007]</th>\n","      <th>2008 [YR2008]</th>\n","      <th>2009 [YR2009]</th>\n","      <th>2010 [YR2010]</th>\n","      <th>2011 [YR2011]</th>\n","      <th>2012 [YR2012]</th>\n","      <th>2013 [YR2013]</th>\n","      <th>2014 [YR2014]</th>\n","      <th>2015 [YR2015]</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>World</td>\n","      <td>WLD</td>\n","      <td>Urban population (% of total population)</td>\n","      <td>SP.URB.TOTL.IN.ZS</td>\n","      <td>35.6985896043541</td>\n","      <td>35.9113333072466</td>\n","      <td>36.1190981160218</td>\n","      <td>36.3158290978333</td>\n","      <td>36.5057841067337</td>\n","      <td>36.7071289470001</td>\n","      <td>...</td>\n","      <td>49.5882609391725</td>\n","      <td>50.0818289225899</td>\n","      <td>50.5883270492273</td>\n","      <td>51.0869331741482</td>\n","      <td>51.5762120154319</td>\n","      <td>52.0218135501306</td>\n","      <td>52.461280460224</td>\n","      <td>52.9088674665259</td>\n","      <td>53.3645718877624</td>\n","      <td>53.8272499686749</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>World</td>\n","      <td>WLD</td>\n","      <td>Urban population growth (annual %)</td>\n","      <td>SP.URB.GROW</td>\n","      <td>2.68382471423551</td>\n","      <td>2.66452525804191</td>\n","      <td>2.66034109999451</td>\n","      <td>2.65786520904756</td>\n","      <td>2.62648301826007</td>\n","      <td>2.6692085893248</td>\n","      <td>...</td>\n","      <td>2.28940614089677</td>\n","      <td>2.25033498486039</td>\n","      <td>2.27244228146479</td>\n","      <td>2.23601570944456</td>\n","      <td>2.19394788524816</td>\n","      <td>2.08114675594206</td>\n","      <td>2.09507837937765</td>\n","      <td>2.09649450830311</td>\n","      <td>2.08727403306608</td>\n","      <td>2.0661926763708</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>SSF</td>\n","      <td>Urban population (% of total population)</td>\n","      <td>SP.URB.TOTL.IN.ZS</td>\n","      <td>16.6539109122475</td>\n","      <td>17.024101217401</td>\n","      <td>17.4032759643621</td>\n","      <td>17.7929614796032</td>\n","      <td>18.1720015086803</td>\n","      <td>18.583036815669</td>\n","      <td>...</td>\n","      <td>34.0731599930885</td>\n","      <td>34.4886062372549</td>\n","      <td>34.9917097740509</td>\n","      <td>35.4996286138736</td>\n","      <td>36.015180198568</td>\n","      <td>36.53701418725</td>\n","      <td>37.0485316902706</td>\n","      <td>37.5618732342058</td>\n","      <td>38.0890675873544</td>\n","      <td>38.6313191921447</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>SSF</td>\n","      <td>Urban population growth (annual %)</td>\n","      <td>SP.URB.GROW</td>\n","      <td>4.86035277179384</td>\n","      <td>4.87893307554445</td>\n","      <td>4.92330013804437</td>\n","      <td>4.958345351624</td>\n","      <td>4.87385375371518</td>\n","      <td>5.02415648166408</td>\n","      <td>...</td>\n","      <td>4.15352053246659</td>\n","      <td>4.03314840056257</td>\n","      <td>4.29244917701669</td>\n","      <td>4.28352875564788</td>\n","      <td>4.28664494680891</td>\n","      <td>4.2722506149194</td>\n","      <td>4.20853831294016</td>\n","      <td>4.19677057408616</td>\n","      <td>4.20750021303004</td>\n","      <td>4.23353892829496</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Middle East &amp; North Africa</td>\n","      <td>MEA</td>\n","      <td>Urban population (% of total population)</td>\n","      <td>SP.URB.TOTL.IN.ZS</td>\n","      <td>39.6324773687672</td>\n","      <td>40.3614056427522</td>\n","      <td>41.0964284169211</td>\n","      <td>41.8434147812207</td>\n","      <td>42.600596333835</td>\n","      <td>43.3342536766714</td>\n","      <td>...</td>\n","      <td>60.7422517926746</td>\n","      <td>61.1753525749648</td>\n","      <td>61.6094501857364</td>\n","      <td>62.0404519876563</td>\n","      <td>62.4177973177006</td>\n","      <td>62.6718495677513</td>\n","      <td>62.9313265030972</td>\n","      <td>63.2755312030127</td>\n","      <td>63.6534664834985</td>\n","      <td>64.0573700796651</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 54 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6ac9bc8-ed48-4e58-86a4-cae07eadf4f5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e6ac9bc8-ed48-4e58-86a4-cae07eadf4f5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e6ac9bc8-ed48-4e58-86a4-cae07eadf4f5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c70bf8db-caab-471e-ae40-b68d09686350\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c70bf8db-caab-471e-ae40-b68d09686350')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c70bf8db-caab-471e-ae40-b68d09686350 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"urban_population_full_data"}},"metadata":{},"execution_count":38}],"source":["# Specify the delimiter and handle potential quoting issues\n","urban_population_full_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/World_Bank_urban_population.csv')\n","\n","urban_population_full_data.head()"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"TNG41uyIE5ZU","executionInfo":{"status":"ok","timestamp":1734195687990,"user_tz":-60,"elapsed":586,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"3d556bd6-773e-4f9e-db04-c849c03e247a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              year    oecd_eps  annual_transport_trends  \\\n","count   252.000000  252.000000             2.520000e+02   \n","mean   2003.500000    2.057937             2.333741e+11   \n","std       5.198452    0.871474             2.759715e+11   \n","min    1995.000000    0.520833             1.797700e+10   \n","25%    1999.000000    1.229167             5.634450e+10   \n","50%    2003.500000    2.102083             8.965400e+10   \n","75%    2008.000000    2.721875             3.212658e+11   \n","max    2012.000000    4.075000             8.963000e+11   \n","\n","       electoral_democracy_index  total_population  transport_trend_per_person  \n","count                 252.000000      2.520000e+02                  252.000000  \n","mean                    0.880298      2.519245e+07                 8911.350290  \n","std                     0.031601      2.550984e+07                 2850.912264  \n","min                     0.706000      4.358992e+06                 2885.467506  \n","25%                     0.875000      5.411697e+06                 6108.542433  \n","50%                     0.887500      1.022324e+07                10444.522299  \n","75%                     0.897000      4.268855e+07                11030.518119  \n","max                     0.922000      8.238964e+07                12500.892544  "],"text/html":["\n","  <div id=\"df-862d4992-c043-4858-a19c-1a3944304bfb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>252.000000</td>\n","      <td>252.000000</td>\n","      <td>2.520000e+02</td>\n","      <td>252.000000</td>\n","      <td>2.520000e+02</td>\n","      <td>252.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2003.500000</td>\n","      <td>2.057937</td>\n","      <td>2.333741e+11</td>\n","      <td>0.880298</td>\n","      <td>2.519245e+07</td>\n","      <td>8911.350290</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.198452</td>\n","      <td>0.871474</td>\n","      <td>2.759715e+11</td>\n","      <td>0.031601</td>\n","      <td>2.550984e+07</td>\n","      <td>2850.912264</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1995.000000</td>\n","      <td>0.520833</td>\n","      <td>1.797700e+10</td>\n","      <td>0.706000</td>\n","      <td>4.358992e+06</td>\n","      <td>2885.467506</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1999.000000</td>\n","      <td>1.229167</td>\n","      <td>5.634450e+10</td>\n","      <td>0.875000</td>\n","      <td>5.411697e+06</td>\n","      <td>6108.542433</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2003.500000</td>\n","      <td>2.102083</td>\n","      <td>8.965400e+10</td>\n","      <td>0.887500</td>\n","      <td>1.022324e+07</td>\n","      <td>10444.522299</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2008.000000</td>\n","      <td>2.721875</td>\n","      <td>3.212658e+11</td>\n","      <td>0.897000</td>\n","      <td>4.268855e+07</td>\n","      <td>11030.518119</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2012.000000</td>\n","      <td>4.075000</td>\n","      <td>8.963000e+11</td>\n","      <td>0.922000</td>\n","      <td>8.238964e+07</td>\n","      <td>12500.892544</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-862d4992-c043-4858-a19c-1a3944304bfb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-862d4992-c043-4858-a19c-1a3944304bfb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-862d4992-c043-4858-a19c-1a3944304bfb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-75484a97-f5ba-428b-b87c-85461f2d407f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75484a97-f5ba-428b-b87c-85461f2d407f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-75484a97-f5ba-428b-b87c-85461f2d407f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 870.4284552709236,\n        \"min\": 5.198452114088397,\n        \"max\": 2012.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          252.0,\n          2003.5,\n          2008.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.41680992004116,\n        \"min\": 0.52083331346512,\n        \"max\": 252.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.057936508740696,\n          2.10208332538605,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 293207190262.85333,\n        \"min\": 252.0,\n        \"max\": 896300000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          233374123015.87302,\n          89654000000.0,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.83334395234645,\n        \"min\": 0.03160126822883904,\n        \"max\": 252.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.880297619047619,\n          0.8875,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27405978.17732815,\n        \"min\": 252.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25192445.82936508,\n          10223239.0,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4509.805449543235,\n        \"min\": 252.0,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8911.350290204044,\n          10444.522299184879,\n          252.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}],"source":["final_data.describe()"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"yaak9gE1BOUb","executionInfo":{"status":"ok","timestamp":1734195687991,"user_tz":-60,"elapsed":139,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"5abf546c-093f-4714-f6bd-2a962f6cea42"},"outputs":[{"output_type":"stream","name":"stdout","text":["['BEL', 'CZE', 'DNK', 'FIN', 'FRA', 'DEU', 'HUN', 'NOR', 'POL', 'SVK', 'ESP', 'SWE', 'CHE', 'GBR']\n"]},{"output_type":"execute_result","data":{"text/plain":["    Country Name Country Code                               Series Name  \\\n","52       Belgium          BEL  Urban population (% of total population)   \n","120      Czechia          CZE  Urban population (% of total population)   \n","\n","    1966 [YR1966] 1967 [YR1967] 1968 [YR1968] 1969 [YR1969] 1970 [YR1970]  \\\n","52         93.284        93.428        93.569        93.707        93.843   \n","120        62.498        62.978        63.456         63.93        64.402   \n","\n","    1971 [YR1971] 1972 [YR1972]  ... 2006 [YR2006] 2007 [YR2007]  \\\n","52         93.976        94.106  ...        97.454        97.505   \n","120        65.295        66.484  ...        73.533        73.463   \n","\n","    2008 [YR2008] 2009 [YR2009] 2010 [YR2010] 2011 [YR2011] 2012 [YR2012]  \\\n","52         97.555        97.603        97.651        97.698        97.744   \n","120        73.394        73.324        73.255        73.185        73.197   \n","\n","    2013 [YR2013] 2014 [YR2014] 2015 [YR2015]  \n","52         97.789        97.833        97.876  \n","120         73.29        73.384        73.477  \n","\n","[2 rows x 53 columns]"],"text/html":["\n","  <div id=\"df-079c3fb7-9f23-451c-91fe-7cc97e85adba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Series Name</th>\n","      <th>1966 [YR1966]</th>\n","      <th>1967 [YR1967]</th>\n","      <th>1968 [YR1968]</th>\n","      <th>1969 [YR1969]</th>\n","      <th>1970 [YR1970]</th>\n","      <th>1971 [YR1971]</th>\n","      <th>1972 [YR1972]</th>\n","      <th>...</th>\n","      <th>2006 [YR2006]</th>\n","      <th>2007 [YR2007]</th>\n","      <th>2008 [YR2008]</th>\n","      <th>2009 [YR2009]</th>\n","      <th>2010 [YR2010]</th>\n","      <th>2011 [YR2011]</th>\n","      <th>2012 [YR2012]</th>\n","      <th>2013 [YR2013]</th>\n","      <th>2014 [YR2014]</th>\n","      <th>2015 [YR2015]</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>52</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>Urban population (% of total population)</td>\n","      <td>93.284</td>\n","      <td>93.428</td>\n","      <td>93.569</td>\n","      <td>93.707</td>\n","      <td>93.843</td>\n","      <td>93.976</td>\n","      <td>94.106</td>\n","      <td>...</td>\n","      <td>97.454</td>\n","      <td>97.505</td>\n","      <td>97.555</td>\n","      <td>97.603</td>\n","      <td>97.651</td>\n","      <td>97.698</td>\n","      <td>97.744</td>\n","      <td>97.789</td>\n","      <td>97.833</td>\n","      <td>97.876</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>Urban population (% of total population)</td>\n","      <td>62.498</td>\n","      <td>62.978</td>\n","      <td>63.456</td>\n","      <td>63.93</td>\n","      <td>64.402</td>\n","      <td>65.295</td>\n","      <td>66.484</td>\n","      <td>...</td>\n","      <td>73.533</td>\n","      <td>73.463</td>\n","      <td>73.394</td>\n","      <td>73.324</td>\n","      <td>73.255</td>\n","      <td>73.185</td>\n","      <td>73.197</td>\n","      <td>73.29</td>\n","      <td>73.384</td>\n","      <td>73.477</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2 rows × 53 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-079c3fb7-9f23-451c-91fe-7cc97e85adba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-079c3fb7-9f23-451c-91fe-7cc97e85adba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-079c3fb7-9f23-451c-91fe-7cc97e85adba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24381d72-3be8-4c4d-888f-0379e7f295ca\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24381d72-3be8-4c4d-888f-0379e7f295ca')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24381d72-3be8-4c4d-888f-0379e7f295ca button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"urban_population"}},"metadata":{},"execution_count":40}],"source":["unique_country_codes_merged_data = final_data['country_code'].unique().tolist()\n","print(unique_country_codes_merged_data)\n","\n","# Delete the countries which are not in the merged data set\n","urban_population_delete_countries = urban_population_full_data[urban_population_full_data['Country Code'].isin(unique_country_codes_merged_data)]\n","urban_population_delete_countries.head(50)\n","\n","urban_p = ['Urban population (% of total population)']\n","\n","\n","urban_population = urban_population_delete_countries[urban_population_delete_countries['Series Name'].isin(urban_p)]\n","urban_population = urban_population.drop(columns=['Series Code'])\n","urban_population.head(2)"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"KkIO1bPjBQiq","executionInfo":{"status":"ok","timestamp":1734195687998,"user_tz":-60,"elapsed":135,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"0d87a97c-0bab-46b3-8872-881e07bcdbd2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Country Name Country Code  Year Urban population (% of total population)\n","0       Belgium          BEL  1966                                   93.284\n","1       Belgium          BEL  1967                                   93.428\n","2       Belgium          BEL  1968                                   93.569\n","3       Belgium          BEL  1969                                   93.707\n","4       Belgium          BEL  1970                                   93.843\n","..          ...          ...   ...                                      ...\n","95      Czechia          CZE  2010                                   73.255\n","96      Czechia          CZE  2011                                   73.185\n","97      Czechia          CZE  2012                                   73.197\n","98      Czechia          CZE  2013                                    73.29\n","99      Czechia          CZE  2014                                   73.384\n","\n","[100 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-63c9dde6-d97f-4956-bf9f-dbe01cffe31f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Urban population (% of total population)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1966</td>\n","      <td>93.284</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1967</td>\n","      <td>93.428</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1968</td>\n","      <td>93.569</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1969</td>\n","      <td>93.707</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1970</td>\n","      <td>93.843</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>2010</td>\n","      <td>73.255</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>2011</td>\n","      <td>73.185</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>2012</td>\n","      <td>73.197</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>2013</td>\n","      <td>73.29</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>2014</td>\n","      <td>73.384</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63c9dde6-d97f-4956-bf9f-dbe01cffe31f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-63c9dde6-d97f-4956-bf9f-dbe01cffe31f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-63c9dde6-d97f-4956-bf9f-dbe01cffe31f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8dffdbc0-7a88-4c2a-9c3e-49a439555e09\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8dffdbc0-7a88-4c2a-9c3e-49a439555e09')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8dffdbc0-7a88-4c2a-9c3e-49a439555e09 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_df_urban_population","summary":"{\n  \"name\": \"final_df_urban_population\",\n  \"rows\": 714,\n  \"fields\": [\n    {\n      \"column\": \"Country Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Slovak Republic\",\n          \"Sweden\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"1979\",\n          \"2005\",\n          \"1996\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 687,\n        \"samples\": [\n          \"75.374\",\n          \"78.539\",\n          \"72.389\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":41}],"source":["# Melt the DataFrame to convert years to rows\n","melted_df_urban_population = pd.melt(\n","    urban_population,\n","    id_vars=['Country Name', 'Country Code'],\n","    var_name='Year',\n","    value_name='Urban population (% of total population)'\n",")\n","\n","# Clean up the Year column to extract only the year numbers\n","melted_df_urban_population['Year'] = melted_df_urban_population['Year'].str.extract('(\\d{4})')\n","\n","# Sort values by Country Name and Year\n","final_df_urban_population = melted_df_urban_population.sort_values(['Country Name', 'Year'])\n","\n","# Reset the index\n","final_df_urban_population = final_df_urban_population.reset_index(drop=True)\n","\n","# Display the result\n","final_df_urban_population.head(100)"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":677},"id":"KywF7BgFGCwQ","executionInfo":{"status":"ok","timestamp":1734195688000,"user_tz":-60,"elapsed":130,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"91966d53-10b4-4a89-ed5d-6f06f9687a01"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Country Name Country Code    Year Urban population (% of total population)\n","27      Belgium          BEL  1993.0                                   96.622\n","28      Belgium          BEL  1994.0                                     96.7\n","29      Belgium          BEL  1995.0                                   96.777\n","30      Belgium          BEL  1996.0                                   96.851\n","31      Belgium          BEL  1997.0                                   96.924\n","32      Belgium          BEL  1998.0                                   96.996\n","33      Belgium          BEL  1999.0                                   97.065\n","34      Belgium          BEL  2000.0                                   97.129\n","35      Belgium          BEL  2001.0                                   97.186\n","36      Belgium          BEL  2002.0                                   97.241\n","37      Belgium          BEL  2003.0                                   97.296\n","38      Belgium          BEL  2004.0                                    97.35\n","39      Belgium          BEL  2005.0                                   97.403\n","40      Belgium          BEL  2006.0                                   97.454\n","41      Belgium          BEL  2007.0                                   97.505\n","42      Belgium          BEL  2008.0                                   97.555\n","43      Belgium          BEL  2009.0                                   97.603\n","44      Belgium          BEL  2010.0                                   97.651\n","45      Belgium          BEL  2011.0                                   97.698\n","46      Belgium          BEL  2012.0                                   97.744"],"text/html":["\n","  <div id=\"df-c06a913f-bf47-4ad9-bed5-ffc1f75f840f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Urban population (% of total population)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>27</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1993.0</td>\n","      <td>96.622</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1994.0</td>\n","      <td>96.7</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1995.0</td>\n","      <td>96.777</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1996.0</td>\n","      <td>96.851</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1997.0</td>\n","      <td>96.924</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1998.0</td>\n","      <td>96.996</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1999.0</td>\n","      <td>97.065</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2000.0</td>\n","      <td>97.129</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2001.0</td>\n","      <td>97.186</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2002.0</td>\n","      <td>97.241</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2003.0</td>\n","      <td>97.296</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2004.0</td>\n","      <td>97.35</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2005.0</td>\n","      <td>97.403</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2006.0</td>\n","      <td>97.454</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2007.0</td>\n","      <td>97.505</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2008.0</td>\n","      <td>97.555</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2009.0</td>\n","      <td>97.603</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2010.0</td>\n","      <td>97.651</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2011.0</td>\n","      <td>97.698</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>2012.0</td>\n","      <td>97.744</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c06a913f-bf47-4ad9-bed5-ffc1f75f840f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c06a913f-bf47-4ad9-bed5-ffc1f75f840f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c06a913f-bf47-4ad9-bed5-ffc1f75f840f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6d561422-5044-4d89-81c5-146ca3d61919\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d561422-5044-4d89-81c5-146ca3d61919')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6d561422-5044-4d89-81c5-146ca3d61919 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_df_urban_population","summary":"{\n  \"name\": \"final_df_urban_population\",\n  \"rows\": 280,\n  \"fields\": [\n    {\n      \"column\": \"Country Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Slovak Republic\",\n          \"Sweden\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.776605891632226,\n        \"min\": 1993.0,\n        \"max\": 2012.0,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1993.0,\n          2010.0,\n          2008.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 279,\n        \"samples\": [\n          \"73.74\",\n          \"64.702\",\n          \"75.692\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}],"source":["# Keep only the relevant years\n","final_df_urban_population['Year'] = pd.to_numeric(final_df_urban_population['Year'])  # Convert 'Year' column to numeric\n","final_df_urban_population = final_df_urban_population[(final_df_urban_population['Year'] >= 1993) & (final_df_urban_population['Year'] <= 2012)]\n","final_df_urban_population.head(20)"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"AazS5e3fHBh8","executionInfo":{"status":"ok","timestamp":1734195688000,"user_tz":-60,"elapsed":126,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d46e266c-4a69-4d06-b9a7-9c9a579fcf79"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year  oecd_eps  annual_transport_trends  \\\n","0            BEL  1995  0.770833              91158000000   \n","1            BEL  1996  0.770833              92416000000   \n","2            BEL  1997  0.770833              94033000000   \n","3            BEL  1998  0.770833              99280000000   \n","4            BEL  1999  0.770833             102830000000   \n","..           ...   ...       ...                      ...   \n","247          GBR  2008  2.404167             666601000000   \n","248          GBR  2009  2.575000             661967000000   \n","249          GBR  2010  3.616667             651061000000   \n","250          GBR  2011  3.466667             653682000000   \n","251          GBR  2012  3.291667             660971000000   \n","\n","     electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                        0.881        10137265.0                 8992.366284   \n","1                        0.882        10156970.0                 9098.776505   \n","2                        0.882        10181464.0                 9235.705199   \n","3                        0.882        10203182.0                 9730.297862   \n","4                        0.883        10226682.0                10055.069670   \n","..                         ...               ...                         ...   \n","247                      0.869        62027306.0                10746.895891   \n","248                      0.869        62506226.0                10590.417025   \n","249                      0.867        63006483.0                10333.238248   \n","250                      0.867        63509285.0                10292.699721   \n","251                      0.868        63960484.0                10334.052507   \n","\n","    GDP per capita (current US$)  \n","0               28413.8264387368  \n","1               27489.5551770488  \n","2               24820.9380503896  \n","3               25338.4432934904  \n","4               25252.8019066564  \n","..                           ...  \n","247             47396.1202078484  \n","248              38744.131693043  \n","249              39598.957119545  \n","250             42109.6418795749  \n","251             42497.3404974322  \n","\n","[252 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-b8be8f41-58a1-44ce-93f5-d5cb392a1777\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>GBR</td>\n","      <td>2008</td>\n","      <td>2.404167</td>\n","      <td>666601000000</td>\n","      <td>0.869</td>\n","      <td>62027306.0</td>\n","      <td>10746.895891</td>\n","      <td>47396.1202078484</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>GBR</td>\n","      <td>2009</td>\n","      <td>2.575000</td>\n","      <td>661967000000</td>\n","      <td>0.869</td>\n","      <td>62506226.0</td>\n","      <td>10590.417025</td>\n","      <td>38744.131693043</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>GBR</td>\n","      <td>2010</td>\n","      <td>3.616667</td>\n","      <td>651061000000</td>\n","      <td>0.867</td>\n","      <td>63006483.0</td>\n","      <td>10333.238248</td>\n","      <td>39598.957119545</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>GBR</td>\n","      <td>2011</td>\n","      <td>3.466667</td>\n","      <td>653682000000</td>\n","      <td>0.867</td>\n","      <td>63509285.0</td>\n","      <td>10292.699721</td>\n","      <td>42109.6418795749</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>GBR</td>\n","      <td>2012</td>\n","      <td>3.291667</td>\n","      <td>660971000000</td>\n","      <td>0.868</td>\n","      <td>63960484.0</td>\n","      <td>10334.052507</td>\n","      <td>42497.3404974322</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>252 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8be8f41-58a1-44ce-93f5-d5cb392a1777')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b8be8f41-58a1-44ce-93f5-d5cb392a1777 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b8be8f41-58a1-44ce-93f5-d5cb392a1777');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6dbccfbf-25d4-4bc1-9046-48e56f8e3bd1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6dbccfbf-25d4-4bc1-9046-48e56f8e3bd1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6dbccfbf-25d4-4bc1-9046-48e56f8e3bd1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b2261c16-512f-4a69-a9df-ec59da9e40e1\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b2261c16-512f-4a69-a9df-ec59da9e40e1 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}],"source":["final_data"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"tbVW5-TCBTAK","executionInfo":{"status":"ok","timestamp":1734195688000,"user_tz":-60,"elapsed":120,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"7d500e5d-c279-4c7b-c687-a4c3cbd45954"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","   GDP per capita (current US$) Urban population (% of total population)  \n","0              28413.8264387368                                   96.777  \n","1              27489.5551770488                                   96.851  \n","2              24820.9380503896                                   96.924  \n","3              25338.4432934904                                   96.996  \n","4              25252.8019066564                                   97.065  \n","..                          ...                                      ...  \n","95             23694.7604830673                                   74.965  \n","96             23628.3272122367                                    75.17  \n","97             25197.2656001848                                   75.374  \n","98             30310.3575963774                                   75.577  \n","99             34106.6581224001                                   75.779  \n","\n","[100 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-ba84019c-af31-4ada-91cc-ada0015cbb5c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba84019c-af31-4ada-91cc-ada0015cbb5c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ba84019c-af31-4ada-91cc-ada0015cbb5c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ba84019c-af31-4ada-91cc-ada0015cbb5c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e6b5a9af-411f-440d-8c7b-a48477d9307f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e6b5a9af-411f-440d-8c7b-a48477d9307f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e6b5a9af-411f-440d-8c7b-a48477d9307f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":44}],"source":["# Convert 'Year' column in final_df to numeric (int)\n","final_df_urban_population['Year'] = pd.to_numeric(final_df_urban_population['Year'])\n","\n","# Convert 'year' column in merged_data to numeric (int) if it's not already\n","final_data['year'] = pd.to_numeric(final_data['year'])\n","\n","# Merge with your existing merged_data\n","final_data = pd.merge(\n","    final_data,\n","    final_df_urban_population[['Country Code', 'Year', 'Urban population (% of total population)']], # Use the new value_name here\n","    left_on=['country_code', 'year'],\n","    right_on=['Country Code', 'Year'],\n","    how='left'\n",")\n","\n","# Drop the redundant Country Code and Year columns from the merge\n","final_data = final_data.drop(columns=['Country Code', 'Year'])\n","final_data.head(100)\n"]},{"cell_type":"markdown","metadata":{"id":"bjWylaFMBWvA"},"source":["### Include Environmental Awareness in Data set\n","\n"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"s1xdaC-bBV6I","executionInfo":{"status":"ok","timestamp":1734195688000,"user_tz":-60,"elapsed":116,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"40efbe69-e469-48d5-8b3c-096e9035877b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0        cname  ccode  year    cname_qog  ccode_qog ccodealp  \\\n","0           1  Afghanistan    4.0  1946  Afghanistan          4      AFG   \n","1           2  Afghanistan    4.0  1947  Afghanistan          4      AFG   \n","2           3  Afghanistan    4.0  1948  Afghanistan          4      AFG   \n","3           4  Afghanistan    4.0  1949  Afghanistan          4      AFG   \n","4           5  Afghanistan    4.0  1950  Afghanistan          4      AFG   \n","\n","  ccodealp_year  ccodecow  ccodevdem  ... wdi_precip wdi_tpa  wvs_ameop  \\\n","0         AFG46     700.0       36.0  ...        NaN     NaN        NaN   \n","1         AFG47     700.0       36.0  ...        NaN     NaN        NaN   \n","2         AFG48     700.0       36.0  ...        NaN     NaN        NaN   \n","3         AFG49     700.0       36.0  ...        NaN     NaN        NaN   \n","4         AFG50     700.0       36.0  ...        NaN     NaN        NaN   \n","\n","   wvs_ceom  wvs_deop  wvs_epmip  wvs_epmpp  wvs_imeop  wvs_pedp  wvs_ploem  \n","0       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","1       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","2       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","3       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","4       NaN       NaN        NaN        NaN        NaN       NaN        NaN  \n","\n","[5 rows x 415 columns]"],"text/html":["\n","  <div id=\"df-1ce33e4e-a535-4d8c-bd04-9f8743e4f3df\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>cname</th>\n","      <th>ccode</th>\n","      <th>year</th>\n","      <th>cname_qog</th>\n","      <th>ccode_qog</th>\n","      <th>ccodealp</th>\n","      <th>ccodealp_year</th>\n","      <th>ccodecow</th>\n","      <th>ccodevdem</th>\n","      <th>...</th>\n","      <th>wdi_precip</th>\n","      <th>wdi_tpa</th>\n","      <th>wvs_ameop</th>\n","      <th>wvs_ceom</th>\n","      <th>wvs_deop</th>\n","      <th>wvs_epmip</th>\n","      <th>wvs_epmpp</th>\n","      <th>wvs_imeop</th>\n","      <th>wvs_pedp</th>\n","      <th>wvs_ploem</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Afghanistan</td>\n","      <td>4.0</td>\n","      <td>1946</td>\n","      <td>Afghanistan</td>\n","      <td>4</td>\n","      <td>AFG</td>\n","      <td>AFG46</td>\n","      <td>700.0</td>\n","      <td>36.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Afghanistan</td>\n","      <td>4.0</td>\n","      <td>1947</td>\n","      <td>Afghanistan</td>\n","      <td>4</td>\n","      <td>AFG</td>\n","      <td>AFG47</td>\n","      <td>700.0</td>\n","      <td>36.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Afghanistan</td>\n","      <td>4.0</td>\n","      <td>1948</td>\n","      <td>Afghanistan</td>\n","      <td>4</td>\n","      <td>AFG</td>\n","      <td>AFG48</td>\n","      <td>700.0</td>\n","      <td>36.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Afghanistan</td>\n","      <td>4.0</td>\n","      <td>1949</td>\n","      <td>Afghanistan</td>\n","      <td>4</td>\n","      <td>AFG</td>\n","      <td>AFG49</td>\n","      <td>700.0</td>\n","      <td>36.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Afghanistan</td>\n","      <td>4.0</td>\n","      <td>1950</td>\n","      <td>Afghanistan</td>\n","      <td>4</td>\n","      <td>AFG</td>\n","      <td>AFG50</td>\n","      <td>700.0</td>\n","      <td>36.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 415 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ce33e4e-a535-4d8c-bd04-9f8743e4f3df')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ce33e4e-a535-4d8c-bd04-9f8743e4f3df button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ce33e4e-a535-4d8c-bd04-9f8743e4f3df');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d5f0b066-4402-4980-9790-16c5c370daf6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5f0b066-4402-4980-9790-16c5c370daf6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d5f0b066-4402-4980-9790-16c5c370daf6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"qog_data"}},"metadata":{},"execution_count":45}],"source":["qog_data.head()"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":278},"id":"yTB9XllLDsgB","executionInfo":{"status":"ok","timestamp":1734195688001,"user_tz":-60,"elapsed":114,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"596fbb68-3df1-4b75-ade9-d8e685371c72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  country_code  year  oecd_eps  annual_transport_trends  \\\n","0          BEL  1995  0.770833              91158000000   \n","1          BEL  1996  0.770833              92416000000   \n","2          BEL  1997  0.770833              94033000000   \n","3          BEL  1998  0.770833              99280000000   \n","4          BEL  1999  0.770833             102830000000   \n","\n","   electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                      0.881        10137265.0                 8992.366284   \n","1                      0.882        10156970.0                 9098.776505   \n","2                      0.882        10181464.0                 9235.705199   \n","3                      0.882        10203182.0                 9730.297862   \n","4                      0.883        10226682.0                10055.069670   \n","\n","  GDP per capita (current US$) Urban population (% of total population)  \n","0             28413.8264387368                                   96.777  \n","1             27489.5551770488                                   96.851  \n","2             24820.9380503896                                   96.924  \n","3             25338.4432934904                                   96.996  \n","4             25252.8019066564                                   97.065  "],"text/html":["\n","  <div id=\"df-f0c02b70-55a5-46d5-bbed-c50b7a0da840\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0c02b70-55a5-46d5-bbed-c50b7a0da840')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f0c02b70-55a5-46d5-bbed-c50b7a0da840 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f0c02b70-55a5-46d5-bbed-c50b7a0da840');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81b0374d-f6cc-46f8-a5bc-36fa649b7d82\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81b0374d-f6cc-46f8-a5bc-36fa649b7d82')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81b0374d-f6cc-46f8-a5bc-36fa649b7d82 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":46}],"source":["final_data.head(5)"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Hg47Z8sHBdAD","executionInfo":{"status":"ok","timestamp":1734195688003,"user_tz":-60,"elapsed":115,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"144b9dda-6919-4229-d386-f97ff76c4b9b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      country_code  year  environmental_awareness\n","877            BEL  1946                      NaN\n","878            BEL  1947                      NaN\n","879            BEL  1948                      NaN\n","880            BEL  1949                      NaN\n","881            BEL  1950                      NaN\n","...            ...   ...                      ...\n","11548          FRA  1958                      NaN\n","11549          FRA  1959                      NaN\n","11550          FRA  1960                      NaN\n","11551          FRA  1961                      NaN\n","11552          FRA  1962                      NaN\n","\n","[953 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-9d82840b-405e-49b3-ae71-3dafb65583a7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>environmental_awareness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>877</th>\n","      <td>BEL</td>\n","      <td>1946</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>878</th>\n","      <td>BEL</td>\n","      <td>1947</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>879</th>\n","      <td>BEL</td>\n","      <td>1948</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>880</th>\n","      <td>BEL</td>\n","      <td>1949</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>881</th>\n","      <td>BEL</td>\n","      <td>1950</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11548</th>\n","      <td>FRA</td>\n","      <td>1958</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11549</th>\n","      <td>FRA</td>\n","      <td>1959</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11550</th>\n","      <td>FRA</td>\n","      <td>1960</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11551</th>\n","      <td>FRA</td>\n","      <td>1961</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11552</th>\n","      <td>FRA</td>\n","      <td>1962</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>953 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d82840b-405e-49b3-ae71-3dafb65583a7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9d82840b-405e-49b3-ae71-3dafb65583a7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9d82840b-405e-49b3-ae71-3dafb65583a7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3b36fed3-c749-495a-9963-f0da26a519c3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b36fed3-c749-495a-9963-f0da26a519c3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3b36fed3-c749-495a-9963-f0da26a519c3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_342e07f3-bbed-421d-b0a9-47a340760554\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('qog_delete_countries')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_342e07f3-bbed-421d-b0a9-47a340760554 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('qog_delete_countries');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"qog_delete_countries","summary":"{\n  \"name\": \"qog_delete_countries\",\n  \"rows\": 953,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 1946,\n        \"max\": 2020,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          1950,\n          2009,\n          1956\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20162469087446613,\n        \"min\": 1.65532199681484,\n        \"max\": 2.58920604389434,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          2.25805218338848,\n          2.06915607062245,\n          2.14873603762493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}],"source":["# Delete the countries which are not in the merged data set\n","qog_delete_countries = qog_data[qog_data['ccodealp'].isin(unique_country_codes_merged_data)]\n","qog_delete_countries.head(50)\n","\n","qog_delete_countries = qog_delete_countries[['ccodealp','year','ess_impenv_m']]\n","\n","new_column_names = {\n","    'ccodealp': 'country_code',\n","    'ess_impenv_m': 'environmental_awareness'\n","}\n","\n","qog_delete_countries = qog_delete_countries.rename(columns=new_column_names)\n","\n","qog_delete_countries"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ZAlxY400Ks9I","executionInfo":{"status":"ok","timestamp":1734195689738,"user_tz":-60,"elapsed":1846,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"f641f2c4-b2f4-48ef-9aa0-d16b1bd30ec6"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Create the plot\n","plt.figure(figsize=(10, 6))\n","\n","# Group by country_code and plot each group\n","for country in qog_delete_countries['country_code'].unique():\n","    country_data = qog_delete_countries[qog_delete_countries['country_code'] == country]\n","    plt.plot(country_data['year'],\n","             country_data['environmental_awareness'],\n","             marker='o',\n","             linestyle='-',\n","             label=country)\n","\n","# Customize the plot\n","plt.xlabel('Year')\n","plt.ylabel('Environmental Awareness')\n","plt.title('Environmental Awareness Over Time by Country')\n","plt.legend()\n","plt.grid(True)\n","\n","# Display the plot\n","plt.show()"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"m-CHbOSDMvYE","executionInfo":{"status":"ok","timestamp":1734195690818,"user_tz":-60,"elapsed":1087,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"84b5b088-ac3c-4b55-f24c-0ece5697222d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Create the plot\n","plt.figure(figsize=(10, 6))\n","\n","# Create line plot using seaborn\n","sns.lineplot(data=qog_delete_countries,\n","             x='year',\n","             y='environmental_awareness',\n","             hue='country_code',\n","             marker='o')\n","\n","# Customize the plot\n","plt.xlabel('Year')\n","plt.ylabel('Environmental Awareness')\n","plt.title('Environmental Awareness Over Time by Country')\n","plt.grid(True)\n","\n","# Display the plot\n","plt.show()"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":971},"id":"vm3Fs20qnlzt","executionInfo":{"status":"ok","timestamp":1734195692523,"user_tz":-60,"elapsed":1715,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"a4320876-d99d-425d-89d8-8a84f2529ac3"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["    year country_code  environmental_awareness\n","0   2002          BEL                 2.075188\n","1   2003          BEL                 2.073389\n","2   2004          BEL                 2.071590\n","3   2005          BEL                 2.046368\n","4   2006          BEL                 2.021146\n","..   ...          ...                      ...\n","95  2009          POL                 2.105149\n","96  2010          POL                 2.080817\n","97  2011          POL                 1.998770\n","98  2012          POL                 1.916724\n","99  2002          SVK                      NaN\n","\n","[100 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-22c7e57b-b1c6-4775-9df7-49324ca9f1dc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>country_code</th>\n","      <th>environmental_awareness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2002</td>\n","      <td>BEL</td>\n","      <td>2.075188</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2003</td>\n","      <td>BEL</td>\n","      <td>2.073389</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2004</td>\n","      <td>BEL</td>\n","      <td>2.071590</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2005</td>\n","      <td>BEL</td>\n","      <td>2.046368</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2006</td>\n","      <td>BEL</td>\n","      <td>2.021146</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>2009</td>\n","      <td>POL</td>\n","      <td>2.105149</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>2010</td>\n","      <td>POL</td>\n","      <td>2.080817</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>2011</td>\n","      <td>POL</td>\n","      <td>1.998770</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>2012</td>\n","      <td>POL</td>\n","      <td>1.916724</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>2002</td>\n","      <td>SVK</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22c7e57b-b1c6-4775-9df7-49324ca9f1dc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-22c7e57b-b1c6-4775-9df7-49324ca9f1dc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-22c7e57b-b1c6-4775-9df7-49324ca9f1dc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0e0e08af-84fe-4f34-b064-c66a56599608\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e0e08af-84fe-4f34-b064-c66a56599608')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0e0e08af-84fe-4f34-b064-c66a56599608 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_df","summary":"{\n  \"name\": \"final_df\",\n  \"rows\": 154,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2002,\n        \"max\": 2012,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          2007,\n          2002,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":50}],"source":["# Filter for years 2002-2018 where we have data (even years)\n","df = qog_delete_countries[\n","    (qog_delete_countries['year'] >= 2002) &\n","    (qog_delete_countries['year'] <= 2012) &\n","    (qog_delete_countries['year'] % 2 == 0)\n","].copy()\n","\n","def interpolate_country_data(country_data):\n","    # Sort by year\n","    country_data = country_data.sort_values('year')\n","\n","    # Create a complete range of years\n","    all_years = pd.DataFrame({'year': range(2002, 2013)})\n","\n","    # Merge with existing data\n","    final_data = pd.merge(\n","        all_years,\n","        country_data,\n","        on='year',\n","        how='left'\n","    )\n","\n","    # Fill in country code for all rows\n","    final_data['country_code'] = country_data['country_code'].iloc[0]\n","\n","    # Interpolate environmental awareness\n","    final_data['environmental_awareness'] = final_data['environmental_awareness'].interpolate(method='linear')\n","\n","    return final_data\n","\n","# Process each country\n","results = []\n","for country in df['country_code'].unique():\n","    country_data = df[df['country_code'] == country].copy()\n","    interpolated_data = interpolate_country_data(country_data)\n","    results.append(interpolated_data)\n","\n","# Combine all results\n","final_df = pd.concat(results, ignore_index=True)\n","\n","# Verify the results with a plot\n","plt.figure(figsize=(10, 6))\n","sns.lineplot(data=final_df,\n","             x='year',\n","             y='environmental_awareness',\n","             hue='country_code',\n","             marker='o')\n","plt.title('Environmental Awareness Over Time by Country (Interpolated)')\n","plt.xlabel('Year')\n","plt.ylabel('Environmental Awareness')\n","plt.grid(True)\n","plt.show()\n","\n","final_df.head(100)"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AcrG5djR7cpJ","executionInfo":{"status":"ok","timestamp":1734195692524,"user_tz":-60,"elapsed":51,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"95ead3b1-9bdc-46a2-f4d0-f4a60d9f2fb7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['BEL',\n"," 'CZE',\n"," 'DNK',\n"," 'FIN',\n"," 'FRA',\n"," 'DEU',\n"," 'HUN',\n"," 'NOR',\n"," 'POL',\n"," 'SVK',\n"," 'ESP',\n"," 'SWE',\n"," 'CHE',\n"," 'GBR']"]},"metadata":{},"execution_count":51}],"source":["unique_country_codes_final_data"]},{"cell_type":"code","execution_count":52,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NdywQpQjsk21","executionInfo":{"status":"ok","timestamp":1734195692529,"user_tz":-60,"elapsed":54,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"bc2d1e28-fcd6-4451-9637-2cda1673078d"},"outputs":[{"output_type":"stream","name":"stdout","text":["     year country_code  environmental_awareness\n","99   2002          SVK                      NaN\n","100  2003          SVK                      NaN\n"]}],"source":["nan_rows = final_df[final_df['environmental_awareness'].isna()]\n","print(nan_rows)"]},{"cell_type":"code","execution_count":53,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tG6e6H9epxPc","executionInfo":{"status":"ok","timestamp":1734195692530,"user_tz":-60,"elapsed":45,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"3aba538e-ba34-4e4f-d3be-ab09b94fa4d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Country codes in 2012: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA' 'DEU' 'HUN' 'NOR' 'POL' 'SVK' 'ESP' 'SWE'\n"," 'CHE' 'GBR']\n","Country codes in 2010: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA' 'DEU' 'HUN' 'NOR' 'POL' 'SVK' 'ESP' 'SWE'\n"," 'CHE' 'GBR']\n"]}],"source":["# Display country codes for 2012\n","codes_2012 = final_df[final_df['year'] == 2012]['country_code'].unique()\n","print(\"Country codes in 2012:\", codes_2012)\n","\n","# Display country codes for 2010\n","codes_2010 = final_df[final_df['year'] == 2010]['country_code'].unique()\n","print(\"Country codes in 2010:\", codes_2010)\n"]},{"cell_type":"code","execution_count":54,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"ztYLDw1jZKC7","executionInfo":{"status":"ok","timestamp":1734195692530,"user_tz":-60,"elapsed":37,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"a152dbc6-2e6e-4ae9-ac4c-0886288aab2d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","   GDP per capita (current US$) Urban population (% of total population)  \\\n","0              28413.8264387368                                   96.777   \n","1              27489.5551770488                                   96.851   \n","2              24820.9380503896                                   96.924   \n","3              25338.4432934904                                   96.996   \n","4              25252.8019066564                                   97.065   \n","..                          ...                                      ...   \n","95             23694.7604830673                                   74.965   \n","96             23628.3272122367                                    75.17   \n","97             25197.2656001848                                   75.374   \n","98             30310.3575963774                                   75.577   \n","99             34106.6581224001                                   75.779   \n","\n","    environmental_awareness  \n","0                       NaN  \n","1                       NaN  \n","2                       NaN  \n","3                       NaN  \n","4                       NaN  \n","..                      ...  \n","95                      NaN  \n","96                      NaN  \n","97                 2.186026  \n","98                 2.222039  \n","99                 2.258052  \n","\n","[100 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-eb713960-2652-442f-80f0-47ec1862c019\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","      <th>environmental_awareness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 10 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb713960-2652-442f-80f0-47ec1862c019')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eb713960-2652-442f-80f0-47ec1862c019 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eb713960-2652-442f-80f0-47ec1862c019');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-376b7b5c-f22b-407c-a8c1-1caa57acfbcd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-376b7b5c-f22b-407c-a8c1-1caa57acfbcd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-376b7b5c-f22b-407c-a8c1-1caa57acfbcd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}],"source":["# Convert 'Year' column in final_df to numeric (int)\n","final_df['year'] = pd.to_numeric(final_df['year'])\n","\n","# Convert 'year' column in merged_data to numeric (int) if it's not already\n","final_data['year'] = pd.to_numeric(final_data['year'])\n","\n","# Merge with your existing merged_data\n","final_data = pd.merge(\n","    final_data,\n","    final_df[['country_code', 'year', 'environmental_awareness']], # Use the new value_name here\n","    left_on=['country_code', 'year'],\n","    right_on=['country_code', 'year'],\n","    how='left'\n",")\n","\n","\n","final_data.head(100)"]},{"cell_type":"code","execution_count":55,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"cSfjQSxJc966","executionInfo":{"status":"ok","timestamp":1734195693492,"user_tz":-60,"elapsed":996,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"69ea938a-11c6-406c-a1b6-bf33b5579b52"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# First, let's ensure we're working with the correct data range\n","df = qog_delete_countries[qog_delete_countries['year'].between(2002, 2018)]\n","\n","def process_country_data(country_data):\n","    # Sort by year\n","    country_data = country_data.sort_values('year')\n","\n","    # Create interpolation function using the existing data\n","    f = interpolate.interp1d(country_data['year'],\n","                           country_data['environmental_awareness'],\n","                           kind='linear',\n","                           fill_value='extrapolate')\n","\n","    # Generate years from 1993 to 2012\n","    all_years = np.arange(1993, 2013)\n","\n","    # Calculate values using interpolation/extrapolation\n","    extrapolated_values = f(all_years)\n","\n","    # Create new dataframe with results\n","    return pd.DataFrame({\n","        'year': all_years,\n","        'environmental_awareness': extrapolated_values,\n","        'country_code': country_data['country_code'].iloc[0]\n","    })\n","\n","# Process each country\n","results = []\n","for country in df['country_code'].unique():\n","    country_data = df[df['country_code'] == country].copy()\n","    if len(country_data) > 1:  # Ensure we have at least 2 points for interpolation\n","        result = process_country_data(country_data)\n","        results.append(result)\n","\n","# Combine all results\n","final_df = pd.concat(results, ignore_index=True)\n","\n","# Plot to verify results\n","plt.figure(figsize=(10, 6))\n","for country in final_df['country_code'].unique():\n","    country_data = final_df[final_df['country_code'] == country]\n","    plt.plot(country_data['year'],\n","             country_data['environmental_awareness'],\n","             label=country)\n","\n","plt.xlabel('Year')\n","plt.ylabel('Environmental Awareness')\n","plt.title('Extrapolated Environmental Awareness (1993-2012)')\n","plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"nd6MuCdYuAdh"},"source":["### Integration of Corruption index"]},{"cell_type":"code","execution_count":56,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"KC_zcmQ3uE9c","executionInfo":{"status":"ok","timestamp":1734195693904,"user_tz":-60,"elapsed":417,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"ce65a3d3-ea2b-472c-adac-deec40a367f4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          country country_code  2012  2011  2010  2009  2008  2007  2006  \\\n","0       Australia          AUS   8.5   8.8   8.7   8.7   8.7   8.6   8.7   \n","1         Belgium          BEL   7.5   7.5   7.1   7.1   7.3   7.1   7.3   \n","2  Czech Republic          CZE   4.9   4.4   4.6   4.9   5.2   5.2   4.8   \n","3         Denmark          DNK   9.0   9.4   9.3   9.3   9.3   9.4   9.5   \n","4         Finland          FIN   9.0   9.4   9.2   8.9   9.0   9.4   9.6   \n","5          France          FRA   7.1   7.0   6.8   6.9   6.9   7.3   7.4   \n","6         Germany          DEU   7.9   8.0   7.9   8.0   7.9   7.8   8.0   \n","7         Hungary          HUN   5.5   4.6   4.7   5.1   5.1   5.3   5.2   \n","8           Italy          ITA   4.2   3.9   3.9   4.3   4.8   5.2   4.9   \n","9           Japan          JPN   7.4   8.0   7.8   7.7   7.3   7.5   7.6   \n","\n","   2005  2004  2003  2002  2001  2000  1999  1998  1997  1996  1995  \n","0   8.8   8.8   8.8   8.6   8.5   8.3   8.7   8.7  8.86  8.80  8.80  \n","1   7.4   7.5   7.6   7.1   6.6   6.1   5.3   5.4  5.25  5.25  5.25  \n","2   4.3   4.2   9.5   3.7   3.9   4.3   4.6   4.8  5.20  5.20  5.20  \n","3   9.5   9.5   3.3   9.5   9.5   9.8  10.0  10.0  9.94  9.32  9.32  \n","4   9.6   9.7   9.7   9.7   9.9  10.0   9.8   9.6  9.48  9.12  9.12  \n","5   7.5   7.1   6.9   6.3   6.7   6.7   6.6   6.7  6.66  7.00  7.00  \n","6   8.2   8.2   7.7   7.3   7.4   7.6   8.0   7.9  8.23  8.14  8.14  \n","7   5.0   4.8   4.8   4.9   5.3   5.2   5.2   5.0  5.18  4.12  4.12  \n","8   5.0   4.8   5.3   5.2   5.5   4.6   4.7   4.6  5.03  2.99  2.99  \n","9   7.3   6.9   7.0   7.1   7.1   6.4   6.0   5.8  6.57  6.72  6.72  "],"text/html":["\n","  <div id=\"df-c854ec24-14e7-452f-97b6-9929d61affb0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>country_code</th>\n","      <th>2012</th>\n","      <th>2011</th>\n","      <th>2010</th>\n","      <th>2009</th>\n","      <th>2008</th>\n","      <th>2007</th>\n","      <th>2006</th>\n","      <th>2005</th>\n","      <th>2004</th>\n","      <th>2003</th>\n","      <th>2002</th>\n","      <th>2001</th>\n","      <th>2000</th>\n","      <th>1999</th>\n","      <th>1998</th>\n","      <th>1997</th>\n","      <th>1996</th>\n","      <th>1995</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>8.5</td>\n","      <td>8.8</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.7</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.6</td>\n","      <td>8.5</td>\n","      <td>8.3</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.86</td>\n","      <td>8.80</td>\n","      <td>8.80</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.3</td>\n","      <td>7.4</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>7.1</td>\n","      <td>6.6</td>\n","      <td>6.1</td>\n","      <td>5.3</td>\n","      <td>5.4</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Czech Republic</td>\n","      <td>CZE</td>\n","      <td>4.9</td>\n","      <td>4.4</td>\n","      <td>4.6</td>\n","      <td>4.9</td>\n","      <td>5.2</td>\n","      <td>5.2</td>\n","      <td>4.8</td>\n","      <td>4.3</td>\n","      <td>4.2</td>\n","      <td>9.5</td>\n","      <td>3.7</td>\n","      <td>3.9</td>\n","      <td>4.3</td>\n","      <td>4.6</td>\n","      <td>4.8</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.4</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>3.3</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.8</td>\n","      <td>10.0</td>\n","      <td>10.0</td>\n","      <td>9.94</td>\n","      <td>9.32</td>\n","      <td>9.32</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>9.2</td>\n","      <td>8.9</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>9.6</td>\n","      <td>9.6</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.9</td>\n","      <td>10.0</td>\n","      <td>9.8</td>\n","      <td>9.6</td>\n","      <td>9.48</td>\n","      <td>9.12</td>\n","      <td>9.12</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>7.1</td>\n","      <td>7.0</td>\n","      <td>6.8</td>\n","      <td>6.9</td>\n","      <td>6.9</td>\n","      <td>7.3</td>\n","      <td>7.4</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>6.9</td>\n","      <td>6.3</td>\n","      <td>6.7</td>\n","      <td>6.7</td>\n","      <td>6.6</td>\n","      <td>6.7</td>\n","      <td>6.66</td>\n","      <td>7.00</td>\n","      <td>7.00</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Germany</td>\n","      <td>DEU</td>\n","      <td>7.9</td>\n","      <td>8.0</td>\n","      <td>7.9</td>\n","      <td>8.0</td>\n","      <td>7.9</td>\n","      <td>7.8</td>\n","      <td>8.0</td>\n","      <td>8.2</td>\n","      <td>8.2</td>\n","      <td>7.7</td>\n","      <td>7.3</td>\n","      <td>7.4</td>\n","      <td>7.6</td>\n","      <td>8.0</td>\n","      <td>7.9</td>\n","      <td>8.23</td>\n","      <td>8.14</td>\n","      <td>8.14</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Hungary</td>\n","      <td>HUN</td>\n","      <td>5.5</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>5.1</td>\n","      <td>5.1</td>\n","      <td>5.3</td>\n","      <td>5.2</td>\n","      <td>5.0</td>\n","      <td>4.8</td>\n","      <td>4.8</td>\n","      <td>4.9</td>\n","      <td>5.3</td>\n","      <td>5.2</td>\n","      <td>5.2</td>\n","      <td>5.0</td>\n","      <td>5.18</td>\n","      <td>4.12</td>\n","      <td>4.12</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Italy</td>\n","      <td>ITA</td>\n","      <td>4.2</td>\n","      <td>3.9</td>\n","      <td>3.9</td>\n","      <td>4.3</td>\n","      <td>4.8</td>\n","      <td>5.2</td>\n","      <td>4.9</td>\n","      <td>5.0</td>\n","      <td>4.8</td>\n","      <td>5.3</td>\n","      <td>5.2</td>\n","      <td>5.5</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>4.6</td>\n","      <td>5.03</td>\n","      <td>2.99</td>\n","      <td>2.99</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Japan</td>\n","      <td>JPN</td>\n","      <td>7.4</td>\n","      <td>8.0</td>\n","      <td>7.8</td>\n","      <td>7.7</td>\n","      <td>7.3</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>7.3</td>\n","      <td>6.9</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>6.4</td>\n","      <td>6.0</td>\n","      <td>5.8</td>\n","      <td>6.57</td>\n","      <td>6.72</td>\n","      <td>6.72</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c854ec24-14e7-452f-97b6-9929d61affb0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c854ec24-14e7-452f-97b6-9929d61affb0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c854ec24-14e7-452f-97b6-9929d61affb0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ce054d9a-586e-4de6-8793-fa1a3729744c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce054d9a-586e-4de6-8793-fa1a3729744c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ce054d9a-586e-4de6-8793-fa1a3729744c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"corruption_data","summary":"{\n  \"name\": \"corruption_data\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Australia\",\n          \"Belgium\",\n          \"Italy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"AUS\",\n          \"BEL\",\n          \"ITA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2012\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5602182686251416,\n        \"min\": 4.2,\n        \"max\": 9.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.8,\n          6.5,\n          8.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2011\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9373268423571812,\n        \"min\": 3.9,\n        \"max\": 9.4,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.5,\n          6.2,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8276471534864323,\n        \"min\": 3.9,\n        \"max\": 9.3,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.8,\n          5.3,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7398914397807186,\n        \"min\": 4.3,\n        \"max\": 9.3,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.1,\n          6.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6292265296659394,\n        \"min\": 4.6,\n        \"max\": 9.3,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          6.5,\n          4.6,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7056614686835232,\n        \"min\": 4.2,\n        \"max\": 9.4,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.6,\n          7.1,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.876444976980137,\n        \"min\": 3.7,\n        \"max\": 9.6,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.3,\n          7.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.004154182424123,\n        \"min\": 3.4,\n        \"max\": 9.6,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.8,\n          7.4,\n          7.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0622343362276605,\n        \"min\": 3.5,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          8.9,\n          4.0,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.117565811803794,\n        \"min\": 3.3,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.0,\n          3.7,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0038932694368023,\n        \"min\": 3.7,\n        \"max\": 9.7,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          8.5,\n          9.3,\n          8.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9079212244463373,\n        \"min\": 3.7,\n        \"max\": 9.9,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.5,\n          6.6,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2000\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0761956158546617,\n        \"min\": 3.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.3,\n          6.1,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1999\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.083894042192397,\n        \"min\": 3.7,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.3,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1998\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0479943959277906,\n        \"min\": 3.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.4,\n          6.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1997\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9021766857447417,\n        \"min\": 3.9,\n        \"max\": 9.94,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.86,\n          5.25,\n          5.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1996\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1995\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":56}],"source":["corruption_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/corruption_index.csv')\n","corruption_data.head(10)"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"61o7rU-dvQ_2","executionInfo":{"status":"ok","timestamp":1734195694301,"user_tz":-60,"elapsed":411,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"7d894026-9bc2-46cc-fb21-7aadd48e2b13"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          country country_code  1995  1996  1997  1998  1999  2000  2001  \\\n","0       Australia          AUS  8.80  8.80  8.86   8.7   8.7   8.3   8.5   \n","1         Belgium          BEL  5.25  5.25  5.25   5.4   5.3   6.1   6.6   \n","2  Czech Republic          CZE  5.20  5.20  5.20   4.8   4.6   4.3   3.9   \n","3         Denmark          DNK  9.32  9.32  9.94  10.0  10.0   9.8   9.5   \n","4         Finland          FIN  9.12  9.12  9.48   9.6   9.8  10.0   9.9   \n","\n","   2002  2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  \n","0   8.6   8.8   8.8   8.8   8.7   8.6   8.7   8.7   8.7   8.8   8.5  \n","1   7.1   7.6   7.5   7.4   7.3   7.1   7.3   7.1   7.1   7.5   7.5  \n","2   3.7   9.5   4.2   4.3   4.8   5.2   5.2   4.9   4.6   4.4   4.9  \n","3   9.5   3.3   9.5   9.5   9.5   9.4   9.3   9.3   9.3   9.4   9.0  \n","4   9.7   9.7   9.7   9.6   9.6   9.4   9.0   8.9   9.2   9.4   9.0  "],"text/html":["\n","  <div id=\"df-95c02cbd-f45a-401a-ac0b-cdb421c092f7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>country_code</th>\n","      <th>1995</th>\n","      <th>1996</th>\n","      <th>1997</th>\n","      <th>1998</th>\n","      <th>1999</th>\n","      <th>2000</th>\n","      <th>2001</th>\n","      <th>2002</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>8.80</td>\n","      <td>8.80</td>\n","      <td>8.86</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.3</td>\n","      <td>8.5</td>\n","      <td>8.6</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.8</td>\n","      <td>8.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","      <td>5.4</td>\n","      <td>5.3</td>\n","      <td>6.1</td>\n","      <td>6.6</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>7.5</td>\n","      <td>7.4</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Czech Republic</td>\n","      <td>CZE</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","      <td>4.8</td>\n","      <td>4.6</td>\n","      <td>4.3</td>\n","      <td>3.9</td>\n","      <td>3.7</td>\n","      <td>9.5</td>\n","      <td>4.2</td>\n","      <td>4.3</td>\n","      <td>4.8</td>\n","      <td>5.2</td>\n","      <td>5.2</td>\n","      <td>4.9</td>\n","      <td>4.6</td>\n","      <td>4.4</td>\n","      <td>4.9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>9.32</td>\n","      <td>9.32</td>\n","      <td>9.94</td>\n","      <td>10.0</td>\n","      <td>10.0</td>\n","      <td>9.8</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>3.3</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.4</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>9.12</td>\n","      <td>9.12</td>\n","      <td>9.48</td>\n","      <td>9.6</td>\n","      <td>9.8</td>\n","      <td>10.0</td>\n","      <td>9.9</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.6</td>\n","      <td>9.6</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95c02cbd-f45a-401a-ac0b-cdb421c092f7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-95c02cbd-f45a-401a-ac0b-cdb421c092f7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-95c02cbd-f45a-401a-ac0b-cdb421c092f7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a0ef8c5e-ae36-49db-ad16-7f6a119f37df\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0ef8c5e-ae36-49db-ad16-7f6a119f37df')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a0ef8c5e-ae36-49db-ad16-7f6a119f37df button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"corruption_reordered","summary":"{\n  \"name\": \"corruption_reordered\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Australia\",\n          \"Belgium\",\n          \"Italy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"AUS\",\n          \"BEL\",\n          \"ITA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1995\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1996\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1997\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9021766857447417,\n        \"min\": 3.9,\n        \"max\": 9.94,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.86,\n          5.25,\n          5.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1998\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0479943959277906,\n        \"min\": 3.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.4,\n          6.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1999\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.083894042192397,\n        \"min\": 3.7,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.3,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2000\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0761956158546617,\n        \"min\": 3.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.3,\n          6.1,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9079212244463373,\n        \"min\": 3.7,\n        \"max\": 9.9,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.5,\n          6.6,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0038932694368023,\n        \"min\": 3.7,\n        \"max\": 9.7,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          8.5,\n          9.3,\n          8.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.117565811803794,\n        \"min\": 3.3,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.0,\n          3.7,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0622343362276605,\n        \"min\": 3.5,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          8.9,\n          4.0,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.004154182424123,\n        \"min\": 3.4,\n        \"max\": 9.6,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.8,\n          7.4,\n          7.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.876444976980137,\n        \"min\": 3.7,\n        \"max\": 9.6,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.3,\n          7.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7056614686835232,\n        \"min\": 4.2,\n        \"max\": 9.4,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.6,\n          7.1,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6292265296659394,\n        \"min\": 4.6,\n        \"max\": 9.3,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          6.5,\n          4.6,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7398914397807186,\n        \"min\": 4.3,\n        \"max\": 9.3,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.1,\n          6.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8276471534864323,\n        \"min\": 3.9,\n        \"max\": 9.3,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.8,\n          5.3,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2011\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9373268423571812,\n        \"min\": 3.9,\n        \"max\": 9.4,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.5,\n          6.2,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2012\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5602182686251416,\n        \"min\": 4.2,\n        \"max\": 9.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.8,\n          6.5,\n          8.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":57}],"source":["# Get list of years from 1995 to 2012\n","years = list(range(1995, 2013))\n","years.sort()  # Sort in ascending order\n","\n","# Create new column order, keeping 'country' and 'country_code' first\n","new_order = ['country', 'country_code']\n","# Add years in ascending order\n","new_order.extend([str(year) for year in years])\n","\n","# Reorder the DataFrame columns\n","corruption_reordered = corruption_data[new_order]\n","\n","# Display the first few rows to verify\n","corruption_reordered.head()"]},{"cell_type":"code","execution_count":58,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"9dJ2QNH8tHIp","executionInfo":{"status":"ok","timestamp":1734195694766,"user_tz":-60,"elapsed":476,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"64e732b6-5de5-4307-f071-1f62ac0f0e2b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["           country country_code  1995  1996  1997  1998  1999  2000  2001  \\\n","0        Australia          AUS  8.80  8.80  8.86   8.7   8.7   8.3   8.5   \n","1          Belgium          BEL  5.25  5.25  5.25   5.4   5.3   6.1   6.6   \n","2   Czech Republic          CZE  5.20  5.20  5.20   4.8   4.6   4.3   3.9   \n","3          Denmark          DNK  9.32  9.32  9.94  10.0  10.0   9.8   9.5   \n","4          Finland          FIN  9.12  9.12  9.48   9.6   9.8  10.0   9.9   \n","5           France          FRA  7.00  7.00  6.66   6.7   6.6   6.7   6.7   \n","6          Germany          DEU  8.14  8.14  8.23   7.9   8.0   7.6   7.4   \n","7          Hungary          HUN  4.12  4.12  5.18   5.0   5.2   5.2   5.3   \n","8            Italy          ITA  2.99  2.99  5.03   4.6   4.7   4.6   5.5   \n","9            Japan          JPN  6.72  6.72  6.57   5.8   6.0   6.4   7.1   \n","10          Norway          NOR  8.61  8.61  8.92   9.0   8.9   9.1   8.6   \n","11          Poland          POL  5.08  5.08  5.08   4.6   4.2   4.1   4.1   \n","12        Slovakia          SVK  3.90  3.90  3.90   3.9   3.7   3.5   3.7   \n","13           Spain          ESP  4.35  4.35  5.90   6.1   6.6   7.0   7.0   \n","14          Sweden          SWE  8.87  8.87  9.35   9.5   9.4   9.4   9.0   \n","15     Switzerland          CHE  8.76  8.76  8.61   8.9   8.9   8.6   8.4   \n","16  United Kingdom          GBR  8.57  8.57  8.22   8.7   8.6   8.7   8.3   \n","17   United States          USA  7.79  7.79  7.61   7.5   7.6   7.8   7.6   \n","\n","    2002  2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  \n","0    8.6   8.8   8.8   8.8   8.7   8.6   8.7   8.7   8.7   8.8   8.5  \n","1    7.1   7.6   7.5   7.4   7.3   7.1   7.3   7.1   7.1   7.5   7.5  \n","2    3.7   9.5   4.2   4.3   4.8   5.2   5.2   4.9   4.6   4.4   4.9  \n","3    9.5   3.3   9.5   9.5   9.5   9.4   9.3   9.3   9.3   9.4   9.0  \n","4    9.7   9.7   9.7   9.6   9.6   9.4   9.0   8.9   9.2   9.4   9.0  \n","5    6.3   6.9   7.1   7.5   7.4   7.3   6.9   6.9   6.8   7.0   7.1  \n","6    7.3   7.7   8.2   8.2   8.0   7.8   7.9   8.0   7.9   8.0   7.9  \n","7    4.9   4.8   4.8   5.0   5.2   5.3   5.1   5.1   4.7   4.6   5.5  \n","8    5.2   5.3   4.8   5.0   4.9   5.2   4.8   4.3   3.9   3.9   4.2  \n","9    7.1   7.0   6.9   7.3   7.6   7.5   7.3   7.7   7.8   8.0   7.4  \n","10   8.5   8.8   8.9   8.9   8.8   8.7   7.9   8.6   8.6   9.0   8.5  \n","11   4.0   3.6   3.5   3.4   3.7   4.2   4.6   5.0   5.3   5.5   5.8  \n","12   3.7   3.7   4.0   4.3   4.7   4.9   5.0   4.5   4.3   4.0   4.6  \n","13   7.1   6.9   7.1   7.0   6.8   6.7   6.5   6.1   6.1   6.2   6.5  \n","14   9.3   9.3   9.2   9.2   9.2   9.3   9.3   9.2   9.2   9.3   8.8  \n","15   8.5   8.8   9.1   9.1   9.1   9.0   9.0   9.0   8.7   8.8   8.6  \n","16   8.7   8.7   8.6   8.6   8.6   8.4   7.7   7.7   7.6   7.8   7.4  \n","17   7.7   7.5   7.5   7.6   7.3   7.2   7.3   7.5   7.1   7.1   7.3  "],"text/html":["\n","  <div id=\"df-bcbe1ba3-df51-4715-9b4a-013260449ff9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>country_code</th>\n","      <th>1995</th>\n","      <th>1996</th>\n","      <th>1997</th>\n","      <th>1998</th>\n","      <th>1999</th>\n","      <th>2000</th>\n","      <th>2001</th>\n","      <th>2002</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>8.80</td>\n","      <td>8.80</td>\n","      <td>8.86</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.3</td>\n","      <td>8.5</td>\n","      <td>8.6</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.8</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.8</td>\n","      <td>8.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","      <td>5.25</td>\n","      <td>5.4</td>\n","      <td>5.3</td>\n","      <td>6.1</td>\n","      <td>6.6</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>7.5</td>\n","      <td>7.4</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Czech Republic</td>\n","      <td>CZE</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","      <td>5.20</td>\n","      <td>4.8</td>\n","      <td>4.6</td>\n","      <td>4.3</td>\n","      <td>3.9</td>\n","      <td>3.7</td>\n","      <td>9.5</td>\n","      <td>4.2</td>\n","      <td>4.3</td>\n","      <td>4.8</td>\n","      <td>5.2</td>\n","      <td>5.2</td>\n","      <td>4.9</td>\n","      <td>4.6</td>\n","      <td>4.4</td>\n","      <td>4.9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>9.32</td>\n","      <td>9.32</td>\n","      <td>9.94</td>\n","      <td>10.0</td>\n","      <td>10.0</td>\n","      <td>9.8</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>3.3</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.5</td>\n","      <td>9.4</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>9.12</td>\n","      <td>9.12</td>\n","      <td>9.48</td>\n","      <td>9.6</td>\n","      <td>9.8</td>\n","      <td>10.0</td>\n","      <td>9.9</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.6</td>\n","      <td>9.6</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>7.00</td>\n","      <td>7.00</td>\n","      <td>6.66</td>\n","      <td>6.7</td>\n","      <td>6.6</td>\n","      <td>6.7</td>\n","      <td>6.7</td>\n","      <td>6.3</td>\n","      <td>6.9</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>7.4</td>\n","      <td>7.3</td>\n","      <td>6.9</td>\n","      <td>6.9</td>\n","      <td>6.8</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Germany</td>\n","      <td>DEU</td>\n","      <td>8.14</td>\n","      <td>8.14</td>\n","      <td>8.23</td>\n","      <td>7.9</td>\n","      <td>8.0</td>\n","      <td>7.6</td>\n","      <td>7.4</td>\n","      <td>7.3</td>\n","      <td>7.7</td>\n","      <td>8.2</td>\n","      <td>8.2</td>\n","      <td>8.0</td>\n","      <td>7.8</td>\n","      <td>7.9</td>\n","      <td>8.0</td>\n","      <td>7.9</td>\n","      <td>8.0</td>\n","      <td>7.9</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Hungary</td>\n","      <td>HUN</td>\n","      <td>4.12</td>\n","      <td>4.12</td>\n","      <td>5.18</td>\n","      <td>5.0</td>\n","      <td>5.2</td>\n","      <td>5.2</td>\n","      <td>5.3</td>\n","      <td>4.9</td>\n","      <td>4.8</td>\n","      <td>4.8</td>\n","      <td>5.0</td>\n","      <td>5.2</td>\n","      <td>5.3</td>\n","      <td>5.1</td>\n","      <td>5.1</td>\n","      <td>4.7</td>\n","      <td>4.6</td>\n","      <td>5.5</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Italy</td>\n","      <td>ITA</td>\n","      <td>2.99</td>\n","      <td>2.99</td>\n","      <td>5.03</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>4.6</td>\n","      <td>5.5</td>\n","      <td>5.2</td>\n","      <td>5.3</td>\n","      <td>4.8</td>\n","      <td>5.0</td>\n","      <td>4.9</td>\n","      <td>5.2</td>\n","      <td>4.8</td>\n","      <td>4.3</td>\n","      <td>3.9</td>\n","      <td>3.9</td>\n","      <td>4.2</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Japan</td>\n","      <td>JPN</td>\n","      <td>6.72</td>\n","      <td>6.72</td>\n","      <td>6.57</td>\n","      <td>5.8</td>\n","      <td>6.0</td>\n","      <td>6.4</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>7.0</td>\n","      <td>6.9</td>\n","      <td>7.3</td>\n","      <td>7.6</td>\n","      <td>7.5</td>\n","      <td>7.3</td>\n","      <td>7.7</td>\n","      <td>7.8</td>\n","      <td>8.0</td>\n","      <td>7.4</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Norway</td>\n","      <td>NOR</td>\n","      <td>8.61</td>\n","      <td>8.61</td>\n","      <td>8.92</td>\n","      <td>9.0</td>\n","      <td>8.9</td>\n","      <td>9.1</td>\n","      <td>8.6</td>\n","      <td>8.5</td>\n","      <td>8.8</td>\n","      <td>8.9</td>\n","      <td>8.9</td>\n","      <td>8.8</td>\n","      <td>8.7</td>\n","      <td>7.9</td>\n","      <td>8.6</td>\n","      <td>8.6</td>\n","      <td>9.0</td>\n","      <td>8.5</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>Poland</td>\n","      <td>POL</td>\n","      <td>5.08</td>\n","      <td>5.08</td>\n","      <td>5.08</td>\n","      <td>4.6</td>\n","      <td>4.2</td>\n","      <td>4.1</td>\n","      <td>4.1</td>\n","      <td>4.0</td>\n","      <td>3.6</td>\n","      <td>3.5</td>\n","      <td>3.4</td>\n","      <td>3.7</td>\n","      <td>4.2</td>\n","      <td>4.6</td>\n","      <td>5.0</td>\n","      <td>5.3</td>\n","      <td>5.5</td>\n","      <td>5.8</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Slovakia</td>\n","      <td>SVK</td>\n","      <td>3.90</td>\n","      <td>3.90</td>\n","      <td>3.90</td>\n","      <td>3.9</td>\n","      <td>3.7</td>\n","      <td>3.5</td>\n","      <td>3.7</td>\n","      <td>3.7</td>\n","      <td>3.7</td>\n","      <td>4.0</td>\n","      <td>4.3</td>\n","      <td>4.7</td>\n","      <td>4.9</td>\n","      <td>5.0</td>\n","      <td>4.5</td>\n","      <td>4.3</td>\n","      <td>4.0</td>\n","      <td>4.6</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>Spain</td>\n","      <td>ESP</td>\n","      <td>4.35</td>\n","      <td>4.35</td>\n","      <td>5.90</td>\n","      <td>6.1</td>\n","      <td>6.6</td>\n","      <td>7.0</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","      <td>6.9</td>\n","      <td>7.1</td>\n","      <td>7.0</td>\n","      <td>6.8</td>\n","      <td>6.7</td>\n","      <td>6.5</td>\n","      <td>6.1</td>\n","      <td>6.1</td>\n","      <td>6.2</td>\n","      <td>6.5</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>Sweden</td>\n","      <td>SWE</td>\n","      <td>8.87</td>\n","      <td>8.87</td>\n","      <td>9.35</td>\n","      <td>9.5</td>\n","      <td>9.4</td>\n","      <td>9.4</td>\n","      <td>9.0</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>9.3</td>\n","      <td>9.3</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>9.3</td>\n","      <td>8.8</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Switzerland</td>\n","      <td>CHE</td>\n","      <td>8.76</td>\n","      <td>8.76</td>\n","      <td>8.61</td>\n","      <td>8.9</td>\n","      <td>8.9</td>\n","      <td>8.6</td>\n","      <td>8.4</td>\n","      <td>8.5</td>\n","      <td>8.8</td>\n","      <td>9.1</td>\n","      <td>9.1</td>\n","      <td>9.1</td>\n","      <td>9.0</td>\n","      <td>9.0</td>\n","      <td>9.0</td>\n","      <td>8.7</td>\n","      <td>8.8</td>\n","      <td>8.6</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>United Kingdom</td>\n","      <td>GBR</td>\n","      <td>8.57</td>\n","      <td>8.57</td>\n","      <td>8.22</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.7</td>\n","      <td>8.3</td>\n","      <td>8.7</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.6</td>\n","      <td>8.6</td>\n","      <td>8.4</td>\n","      <td>7.7</td>\n","      <td>7.7</td>\n","      <td>7.6</td>\n","      <td>7.8</td>\n","      <td>7.4</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>United States</td>\n","      <td>USA</td>\n","      <td>7.79</td>\n","      <td>7.79</td>\n","      <td>7.61</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>7.8</td>\n","      <td>7.6</td>\n","      <td>7.7</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>7.3</td>\n","      <td>7.2</td>\n","      <td>7.3</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>7.1</td>\n","      <td>7.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcbe1ba3-df51-4715-9b4a-013260449ff9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bcbe1ba3-df51-4715-9b4a-013260449ff9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bcbe1ba3-df51-4715-9b4a-013260449ff9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-84d5c504-6e3f-4431-945d-01426cb54eb1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-84d5c504-6e3f-4431-945d-01426cb54eb1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-84d5c504-6e3f-4431-945d-01426cb54eb1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"corruption_reordered","summary":"{\n  \"name\": \"corruption_reordered\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Australia\",\n          \"Belgium\",\n          \"Italy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"AUS\",\n          \"BEL\",\n          \"ITA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1995\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1996\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.129903262708598,\n        \"min\": 2.99,\n        \"max\": 9.32,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.8,\n          5.25,\n          2.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1997\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9021766857447417,\n        \"min\": 3.9,\n        \"max\": 9.94,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.86,\n          5.25,\n          5.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1998\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0479943959277906,\n        \"min\": 3.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.4,\n          6.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"1999\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.083894042192397,\n        \"min\": 3.7,\n        \"max\": 10.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.7,\n          5.3,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2000\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0761956158546617,\n        \"min\": 3.5,\n        \"max\": 10.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.3,\n          6.1,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9079212244463373,\n        \"min\": 3.7,\n        \"max\": 9.9,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.5,\n          6.6,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0038932694368023,\n        \"min\": 3.7,\n        \"max\": 9.7,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          8.5,\n          9.3,\n          8.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.117565811803794,\n        \"min\": 3.3,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.0,\n          3.7,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0622343362276605,\n        \"min\": 3.5,\n        \"max\": 9.7,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          8.9,\n          4.0,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.004154182424123,\n        \"min\": 3.4,\n        \"max\": 9.6,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.8,\n          7.4,\n          7.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.876444976980137,\n        \"min\": 3.7,\n        \"max\": 9.6,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.3,\n          7.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7056614686835232,\n        \"min\": 4.2,\n        \"max\": 9.4,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          8.6,\n          7.1,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6292265296659394,\n        \"min\": 4.6,\n        \"max\": 9.3,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          6.5,\n          4.6,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7398914397807186,\n        \"min\": 4.3,\n        \"max\": 9.3,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8.7,\n          7.1,\n          6.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8276471534864323,\n        \"min\": 3.9,\n        \"max\": 9.3,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7.8,\n          5.3,\n          8.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2011\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9373268423571812,\n        \"min\": 3.9,\n        \"max\": 9.4,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.5,\n          6.2,\n          8.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2012\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5602182686251416,\n        \"min\": 4.2,\n        \"max\": 9.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.8,\n          6.5,\n          8.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}],"source":["# Drop rows 18 and 19 (index starts at 0)\n","corruption_reordered = corruption_reordered.dropna()\n","corruption_reordered.head(20)\n"]},{"cell_type":"code","execution_count":59,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"an_Q5cR40zx7","executionInfo":{"status":"ok","timestamp":1734195694766,"user_tz":-60,"elapsed":60,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"fc6d5c03-61b4-49c0-899a-e44e7b33227c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      country country_code  Year  corruption_perception_index\n","0   Australia          AUS  1995                         8.80\n","1   Australia          AUS  1996                         8.80\n","2   Australia          AUS  1997                         8.86\n","3   Australia          AUS  1998                         8.70\n","4   Australia          AUS  1999                         8.70\n","..        ...          ...   ...                          ...\n","95     France          FRA  2000                         6.70\n","96     France          FRA  2001                         6.70\n","97     France          FRA  2002                         6.30\n","98     France          FRA  2003                         6.90\n","99     France          FRA  2004                         7.10\n","\n","[100 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-13574d72-0ce8-469d-892d-a7102ab484fb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>country_code</th>\n","      <th>Year</th>\n","      <th>corruption_perception_index</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>1995</td>\n","      <td>8.80</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>1996</td>\n","      <td>8.80</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>1997</td>\n","      <td>8.86</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>1998</td>\n","      <td>8.70</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Australia</td>\n","      <td>AUS</td>\n","      <td>1999</td>\n","      <td>8.70</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2000</td>\n","      <td>6.70</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2001</td>\n","      <td>6.70</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2002</td>\n","      <td>6.30</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2003</td>\n","      <td>6.90</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2004</td>\n","      <td>7.10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13574d72-0ce8-469d-892d-a7102ab484fb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-13574d72-0ce8-469d-892d-a7102ab484fb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-13574d72-0ce8-469d-892d-a7102ab484fb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-897b712e-1fbd-42b8-ae90-28d397418754\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-897b712e-1fbd-42b8-ae90-28d397418754')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-897b712e-1fbd-42b8-ae90-28d397418754 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_corruption","summary":"{\n  \"name\": \"final_corruption\",\n  \"rows\": 324,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Australia\",\n          \"Belgium\",\n          \"Italy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"AUS\",\n          \"BEL\",\n          \"ITA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"1995\",\n          \"1996\",\n          \"2003\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8904335139680204,\n        \"min\": 2.99,\n        \"max\": 10.0,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          9.2,\n          9.5,\n          5.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}],"source":["# Melt the DataFrame to convert years to rows\n","melted_corruption = pd.melt(\n","    corruption_reordered,\n","    id_vars=['country', 'country_code'],\n","    var_name='Year',\n","    value_name='corruption_perception_index'\n",")\n","\n","# Sort values by Country Name and Year\n","final_corruption = melted_corruption.sort_values(['country', 'Year'])\n","\n","# Reset the index\n","final_corruption = final_corruption.reset_index(drop=True)\n","\n","# Display the result\n","final_corruption.head(100)"]},{"cell_type":"code","execution_count":60,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"7aKuVSEbz2GP","executionInfo":{"status":"ok","timestamp":1734195694767,"user_tz":-60,"elapsed":59,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"df008540-5f07-4dde-a143-142c6617b623"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year  oecd_eps  annual_transport_trends  \\\n","0            BEL  1995  0.770833              91158000000   \n","1            BEL  1996  0.770833              92416000000   \n","2            BEL  1997  0.770833              94033000000   \n","3            BEL  1998  0.770833              99280000000   \n","4            BEL  1999  0.770833             102830000000   \n","..           ...   ...       ...                      ...   \n","247          GBR  2008  2.404167             666601000000   \n","248          GBR  2009  2.575000             661967000000   \n","249          GBR  2010  3.616667             651061000000   \n","250          GBR  2011  3.466667             653682000000   \n","251          GBR  2012  3.291667             660971000000   \n","\n","     electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                        0.881        10137265.0                 8992.366284   \n","1                        0.882        10156970.0                 9098.776505   \n","2                        0.882        10181464.0                 9235.705199   \n","3                        0.882        10203182.0                 9730.297862   \n","4                        0.883        10226682.0                10055.069670   \n","..                         ...               ...                         ...   \n","247                      0.869        62027306.0                10746.895891   \n","248                      0.869        62506226.0                10590.417025   \n","249                      0.867        63006483.0                10333.238248   \n","250                      0.867        63509285.0                10292.699721   \n","251                      0.868        63960484.0                10334.052507   \n","\n","    GDP per capita (current US$) Urban population (% of total population)  \\\n","0               28413.8264387368                                   96.777   \n","1               27489.5551770488                                   96.851   \n","2               24820.9380503896                                   96.924   \n","3               25338.4432934904                                   96.996   \n","4               25252.8019066564                                   97.065   \n","..                           ...                                      ...   \n","247             47396.1202078484                                   80.757   \n","248              38744.131693043                                   81.031   \n","249              39598.957119545                                   81.302   \n","250             42109.6418795749                                    81.57   \n","251             42497.3404974322                                   81.837   \n","\n","     environmental_awareness  \n","0                        NaN  \n","1                        NaN  \n","2                        NaN  \n","3                        NaN  \n","4                        NaN  \n","..                       ...  \n","247                 2.311862  \n","248                 2.307042  \n","249                 2.302222  \n","250                 2.234323  \n","251                 2.166423  \n","\n","[252 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-eb51b3b2-322e-41be-9a51-4732d8551da1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","      <th>environmental_awareness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>GBR</td>\n","      <td>2008</td>\n","      <td>2.404167</td>\n","      <td>666601000000</td>\n","      <td>0.869</td>\n","      <td>62027306.0</td>\n","      <td>10746.895891</td>\n","      <td>47396.1202078484</td>\n","      <td>80.757</td>\n","      <td>2.311862</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>GBR</td>\n","      <td>2009</td>\n","      <td>2.575000</td>\n","      <td>661967000000</td>\n","      <td>0.869</td>\n","      <td>62506226.0</td>\n","      <td>10590.417025</td>\n","      <td>38744.131693043</td>\n","      <td>81.031</td>\n","      <td>2.307042</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>GBR</td>\n","      <td>2010</td>\n","      <td>3.616667</td>\n","      <td>651061000000</td>\n","      <td>0.867</td>\n","      <td>63006483.0</td>\n","      <td>10333.238248</td>\n","      <td>39598.957119545</td>\n","      <td>81.302</td>\n","      <td>2.302222</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>GBR</td>\n","      <td>2011</td>\n","      <td>3.466667</td>\n","      <td>653682000000</td>\n","      <td>0.867</td>\n","      <td>63509285.0</td>\n","      <td>10292.699721</td>\n","      <td>42109.6418795749</td>\n","      <td>81.57</td>\n","      <td>2.234323</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>GBR</td>\n","      <td>2012</td>\n","      <td>3.291667</td>\n","      <td>660971000000</td>\n","      <td>0.868</td>\n","      <td>63960484.0</td>\n","      <td>10334.052507</td>\n","      <td>42497.3404974322</td>\n","      <td>81.837</td>\n","      <td>2.166423</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>252 rows × 10 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb51b3b2-322e-41be-9a51-4732d8551da1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eb51b3b2-322e-41be-9a51-4732d8551da1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eb51b3b2-322e-41be-9a51-4732d8551da1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a801d4d-f9cb-45db-b4d8-85b804413e65\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a801d4d-f9cb-45db-b4d8-85b804413e65')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a801d4d-f9cb-45db-b4d8-85b804413e65 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9d8f6d00-2800-4155-81d4-c2c3c701dd5d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9d8f6d00-2800-4155-81d4-c2c3c701dd5d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":60}],"source":["final_data"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"kT7-NKiN2HZ6","executionInfo":{"status":"ok","timestamp":1734195694768,"user_tz":-60,"elapsed":56,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[],"source":["# Convert 'Year' column in final_df to numeric (int)\n","final_corruption['Year'] = pd.to_numeric(final_corruption['Year'])\n","\n","# Convert 'year' column in merged_data to numeric (int) if it's not already\n","final_data['year'] = pd.to_numeric(final_data['year'])\n","\n","# Merge with your existing merged_data\n","final_data = pd.merge(\n","    final_data,\n","    final_corruption[['country_code', 'Year', 'corruption_perception_index']], # Use the new value_name here\n","    left_on=['country_code', 'year'],\n","    right_on=['country_code', 'Year'],\n","    how='left'\n",")\n","\n"]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"uR8e-LD13BH0","executionInfo":{"status":"ok","timestamp":1734195695402,"user_tz":-60,"elapsed":688,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"16b40a19-413a-4458-8b97-fdb5a0122c0f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","   GDP per capita (current US$) Urban population (% of total population)  \\\n","0              28413.8264387368                                   96.777   \n","1              27489.5551770488                                   96.851   \n","2              24820.9380503896                                   96.924   \n","3              25338.4432934904                                   96.996   \n","4              25252.8019066564                                   97.065   \n","..                          ...                                      ...   \n","95             23694.7604830673                                   74.965   \n","96             23628.3272122367                                    75.17   \n","97             25197.2656001848                                   75.374   \n","98             30310.3575963774                                   75.577   \n","99             34106.6581224001                                   75.779   \n","\n","    environmental_awareness  corruption_perception_index  \n","0                       NaN                         5.25  \n","1                       NaN                         5.25  \n","2                       NaN                         5.25  \n","3                       NaN                         5.40  \n","4                       NaN                         5.30  \n","..                      ...                          ...  \n","95                      NaN                         7.60  \n","96                      NaN                         7.40  \n","97                 2.186026                         7.30  \n","98                 2.222039                         7.70  \n","99                 2.258052                         8.20  \n","\n","[100 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-31fc0092-1a7e-43cf-8c23-756d1076346f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","      <td>7.60</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","      <td>7.40</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","      <td>7.30</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","      <td>7.70</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","      <td>8.20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31fc0092-1a7e-43cf-8c23-756d1076346f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-31fc0092-1a7e-43cf-8c23-756d1076346f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-31fc0092-1a7e-43cf-8c23-756d1076346f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-eaa27424-c5c6-440f-bc66-04b37cb09ceb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eaa27424-c5c6-440f-bc66-04b37cb09ceb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-eaa27424-c5c6-440f-bc66-04b37cb09ceb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":62}],"source":["# Drop the redundant Country Code and Year columns from the merge\n","final_data = final_data.drop(columns=['Year'])\n","final_data.head(100)"]},{"cell_type":"markdown","metadata":{"id":"XMjZ4mZo4iGE"},"source":["### Including Industry Composition as a covariate"]},{"cell_type":"code","execution_count":63,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":620},"id":"lFQjlzEO4qp8","executionInfo":{"status":"ok","timestamp":1734195695874,"user_tz":-60,"elapsed":477,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"09e51211-6dc5-41ba-8eac-f95cb67592f7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Country Name Country Code  \\\n","0                        Aruba          ABW   \n","1  Africa Eastern and Southern          AFE   \n","2                  Afghanistan          AFG   \n","3   Africa Western and Central          AFW   \n","4                       Angola          AGO   \n","\n","                                      Indicator Name  1960  1961  1962  1963  \\\n","0  Industry (including construction), value added...   NaN   NaN   NaN   NaN   \n","1  Industry (including construction), value added...   NaN   NaN   NaN   NaN   \n","2  Industry (including construction), value added...   NaN   NaN   NaN   NaN   \n","3  Industry (including construction), value added...   NaN   NaN   NaN   NaN   \n","4  Industry (including construction), value added...   NaN   NaN   NaN   NaN   \n","\n","   1964  1965  1966  ...       2014       2015       2016       2017  \\\n","0   NaN   NaN   NaN  ...  10.799498  12.468823  12.713822  12.394823   \n","1   NaN   NaN   NaN  ...  27.162602  25.191190  24.998759  25.855925   \n","2   NaN   NaN   NaN  ...  21.229663  22.124042  10.466808  10.051874   \n","3   NaN   NaN   NaN  ...  27.248474  22.971600  21.462778  24.344315   \n","4   NaN   NaN   NaN  ...  46.203326  41.933092  42.643568  42.167954   \n","\n","        2018       2019       2020       2021       2022       2023  \n","0  11.358168  11.372037        NaN        NaN        NaN        NaN  \n","1  27.843655  26.378792  25.373622  25.973194  26.795219  25.502568  \n","2  13.387247  14.058112  12.952600  14.273657  16.050368        NaN  \n","3  26.632048  27.498500  27.211561  29.476856  30.291467  30.289382  \n","4  47.931542  49.760922  45.678242  47.524410  45.177602  45.317250  \n","\n","[5 rows x 67 columns]"],"text/html":["\n","  <div id=\"df-07c425d0-92cd-46f8-a532-f761f483de85\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Indicator Name</th>\n","      <th>1960</th>\n","      <th>1961</th>\n","      <th>1962</th>\n","      <th>1963</th>\n","      <th>1964</th>\n","      <th>1965</th>\n","      <th>1966</th>\n","      <th>...</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>2018</th>\n","      <th>2019</th>\n","      <th>2020</th>\n","      <th>2021</th>\n","      <th>2022</th>\n","      <th>2023</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>Industry (including construction), value added...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>10.799498</td>\n","      <td>12.468823</td>\n","      <td>12.713822</td>\n","      <td>12.394823</td>\n","      <td>11.358168</td>\n","      <td>11.372037</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Africa Eastern and Southern</td>\n","      <td>AFE</td>\n","      <td>Industry (including construction), value added...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>27.162602</td>\n","      <td>25.191190</td>\n","      <td>24.998759</td>\n","      <td>25.855925</td>\n","      <td>27.843655</td>\n","      <td>26.378792</td>\n","      <td>25.373622</td>\n","      <td>25.973194</td>\n","      <td>26.795219</td>\n","      <td>25.502568</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>Industry (including construction), value added...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>21.229663</td>\n","      <td>22.124042</td>\n","      <td>10.466808</td>\n","      <td>10.051874</td>\n","      <td>13.387247</td>\n","      <td>14.058112</td>\n","      <td>12.952600</td>\n","      <td>14.273657</td>\n","      <td>16.050368</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Africa Western and Central</td>\n","      <td>AFW</td>\n","      <td>Industry (including construction), value added...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>27.248474</td>\n","      <td>22.971600</td>\n","      <td>21.462778</td>\n","      <td>24.344315</td>\n","      <td>26.632048</td>\n","      <td>27.498500</td>\n","      <td>27.211561</td>\n","      <td>29.476856</td>\n","      <td>30.291467</td>\n","      <td>30.289382</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","      <td>Industry (including construction), value added...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>46.203326</td>\n","      <td>41.933092</td>\n","      <td>42.643568</td>\n","      <td>42.167954</td>\n","      <td>47.931542</td>\n","      <td>49.760922</td>\n","      <td>45.678242</td>\n","      <td>47.524410</td>\n","      <td>45.177602</td>\n","      <td>45.317250</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 67 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07c425d0-92cd-46f8-a532-f761f483de85')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-07c425d0-92cd-46f8-a532-f761f483de85 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-07c425d0-92cd-46f8-a532-f761f483de85');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bc3c175f-960f-4318-8501-b46942cfb692\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc3c175f-960f-4318-8501-b46942cfb692')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bc3c175f-960f-4318-8501-b46942cfb692 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"industry_composition_full_data"}},"metadata":{},"execution_count":63}],"source":["industry_composition_full_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/Industry_composition.csv')\n","industry_composition_full_data.head()"]},{"cell_type":"code","execution_count":64,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"jAirlfBI5_V9","executionInfo":{"status":"ok","timestamp":1734195695875,"user_tz":-60,"elapsed":28,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"8f235831-e8f2-4358-ff10-ab5c478c23db"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Country Name Country Code       1993       1994       1995  \\\n","0                        Aruba          ABW        NaN        NaN  15.396362   \n","1  Africa Eastern and Southern          AFE  27.846063  27.979158  27.497536   \n","2                  Afghanistan          AFG        NaN        NaN        NaN   \n","3   Africa Western and Central          AFW  30.817470  31.519766  35.767334   \n","4                       Angola          AGO        NaN        NaN  60.285176   \n","\n","        1996       1997       1998       1999       2000  ...       2003  \\\n","0  14.987449  17.133844  17.510902  15.548314  13.175955  ...  14.892210   \n","1  27.335087  26.520712  25.914304  25.744454  26.742874  ...  26.644160   \n","2        NaN        NaN        NaN        NaN        NaN  ...  22.710864   \n","3  36.413187  34.944451  29.308497  27.900710  31.861245  ...  27.304525   \n","4  67.820676  60.757741  55.157289  72.717372  72.122955  ...  53.116998   \n","\n","        2004       2005       2006       2007       2008       2009  \\\n","0  15.596508  16.297461  17.655863  17.479550  16.182349  13.043036   \n","1  26.935382  27.873317  27.971525  29.156985  30.597169  26.699117   \n","2  26.226790  26.812099  28.210768  26.882242  26.915628  21.897122   \n","3  29.077748  29.474218  28.057570  26.922232  27.973148  24.476802   \n","4  54.629933  60.401993  58.109331  61.883538  60.254820  44.056374   \n","\n","        2010       2011       2012  \n","0  11.546062  12.366448  10.076063  \n","1  27.642159  28.774713  28.566295  \n","2  21.151421  22.740252  21.157807  \n","3  27.208666  30.188201  29.565929  \n","4  52.368438  56.026514  56.918219  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-c604784a-0840-4855-b42f-3deedf99a4b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1993</th>\n","      <th>1994</th>\n","      <th>1995</th>\n","      <th>1996</th>\n","      <th>1997</th>\n","      <th>1998</th>\n","      <th>1999</th>\n","      <th>2000</th>\n","      <th>...</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>15.396362</td>\n","      <td>14.987449</td>\n","      <td>17.133844</td>\n","      <td>17.510902</td>\n","      <td>15.548314</td>\n","      <td>13.175955</td>\n","      <td>...</td>\n","      <td>14.892210</td>\n","      <td>15.596508</td>\n","      <td>16.297461</td>\n","      <td>17.655863</td>\n","      <td>17.479550</td>\n","      <td>16.182349</td>\n","      <td>13.043036</td>\n","      <td>11.546062</td>\n","      <td>12.366448</td>\n","      <td>10.076063</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Africa Eastern and Southern</td>\n","      <td>AFE</td>\n","      <td>27.846063</td>\n","      <td>27.979158</td>\n","      <td>27.497536</td>\n","      <td>27.335087</td>\n","      <td>26.520712</td>\n","      <td>25.914304</td>\n","      <td>25.744454</td>\n","      <td>26.742874</td>\n","      <td>...</td>\n","      <td>26.644160</td>\n","      <td>26.935382</td>\n","      <td>27.873317</td>\n","      <td>27.971525</td>\n","      <td>29.156985</td>\n","      <td>30.597169</td>\n","      <td>26.699117</td>\n","      <td>27.642159</td>\n","      <td>28.774713</td>\n","      <td>28.566295</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>22.710864</td>\n","      <td>26.226790</td>\n","      <td>26.812099</td>\n","      <td>28.210768</td>\n","      <td>26.882242</td>\n","      <td>26.915628</td>\n","      <td>21.897122</td>\n","      <td>21.151421</td>\n","      <td>22.740252</td>\n","      <td>21.157807</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Africa Western and Central</td>\n","      <td>AFW</td>\n","      <td>30.817470</td>\n","      <td>31.519766</td>\n","      <td>35.767334</td>\n","      <td>36.413187</td>\n","      <td>34.944451</td>\n","      <td>29.308497</td>\n","      <td>27.900710</td>\n","      <td>31.861245</td>\n","      <td>...</td>\n","      <td>27.304525</td>\n","      <td>29.077748</td>\n","      <td>29.474218</td>\n","      <td>28.057570</td>\n","      <td>26.922232</td>\n","      <td>27.973148</td>\n","      <td>24.476802</td>\n","      <td>27.208666</td>\n","      <td>30.188201</td>\n","      <td>29.565929</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>60.285176</td>\n","      <td>67.820676</td>\n","      <td>60.757741</td>\n","      <td>55.157289</td>\n","      <td>72.717372</td>\n","      <td>72.122955</td>\n","      <td>...</td>\n","      <td>53.116998</td>\n","      <td>54.629933</td>\n","      <td>60.401993</td>\n","      <td>58.109331</td>\n","      <td>61.883538</td>\n","      <td>60.254820</td>\n","      <td>44.056374</td>\n","      <td>52.368438</td>\n","      <td>56.026514</td>\n","      <td>56.918219</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c604784a-0840-4855-b42f-3deedf99a4b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c604784a-0840-4855-b42f-3deedf99a4b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c604784a-0840-4855-b42f-3deedf99a4b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a1a9edf4-6506-4c1a-805f-66ebedac7f97\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1a9edf4-6506-4c1a-805f-66ebedac7f97')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a1a9edf4-6506-4c1a-805f-66ebedac7f97 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"industry_composition_filtered"}},"metadata":{},"execution_count":64}],"source":["# Create a list of years we want to keep\n","years_to_keep = list(range(1993, 2013))  # 1993 to 2012 inclusive\n","\n","# Get all column names\n","columns = industry_composition_full_data.columns.tolist()\n","\n","# Keep 'country' and 'country_code' columns\n","filtered_columns = ['Country Name', 'Country Code']\n","\n","# Add year columns from 1993-2012\n","for year in years_to_keep:\n","    filtered_columns.append(str(year))\n","\n","# Create new dataframe with only selected columns\n","industry_composition_filtered = industry_composition_full_data[filtered_columns]\n","industry_composition_filtered.head()"]},{"cell_type":"code","execution_count":65,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":590},"id":"PICYUcED7GDW","executionInfo":{"status":"ok","timestamp":1734195696336,"user_tz":-60,"elapsed":486,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"3bf527f5-eb11-4dd7-dd8e-fd631cbc1c25"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Country Name Country Code       1993       1994       1995       1996  \\\n","17           Belgium          BEL        NaN        NaN  26.045814  25.810886   \n","37       Switzerland          CHE  29.004206  29.827166  29.080231  28.028401   \n","54           Czechia          CZE  34.868126  34.818983  35.385509  36.145152   \n","55           Germany          DEU  30.606492  30.196988  29.768079  28.855926   \n","58           Denmark          DNK  21.627675  21.623354  22.092562  22.288173   \n","70             Spain          ESP        NaN        NaN  28.334433  28.079141   \n","75           Finland          FIN  26.958977  28.221799  29.490913  28.840257   \n","77            France          FRA  23.061958  22.244372  22.309778  21.675187   \n","81    United Kingdom          GBR  25.747901  26.274018  24.362531  24.490518   \n","101          Hungary          HUN        NaN        NaN  25.805541  25.412110   \n","177           Norway          NOR  27.595946  27.900388  28.793070  30.968775   \n","190           Poland          POL        NaN        NaN  33.481713  32.152805   \n","221  Slovak Republic          SVK        NaN        NaN  27.740014  28.596913   \n","223           Sweden          SWE  24.113047  25.105321  26.920824  26.221176   \n","\n","          1997       1998       1999       2000  ...       2003       2004  \\\n","17   26.109865  25.570685  24.725844  24.943833  ...  23.226655  22.959999   \n","37   27.286719  26.649005  26.281338  25.468196  ...  26.006421  25.551510   \n","54   35.699667  34.789282  33.771182  33.491207  ...  32.342253  33.579750   \n","55   28.578130  28.384498  27.654408  27.712378  ...  26.186781  26.404849   \n","58   22.452731  22.326018  22.638331  23.652710  ...  22.162994  22.129631   \n","70   28.064699  27.847473  27.895012  27.969240  ...  27.421204  26.993951   \n","75   29.027047  30.529409  30.435879  31.589980  ...  29.529025  29.373008   \n","77   21.527301  21.444845  21.201728  21.293940  ...  20.191811  19.957583   \n","81   23.628154  22.976141  22.573060  22.623079  ...  20.840890  20.242213   \n","101  27.790314  28.095434  27.517752  27.048551  ...  26.389044  26.850612   \n","177  31.473005  27.631494  29.608287  36.799829  ...  33.813786  35.426086   \n","190  31.411530  31.178400  30.212741  28.793172  ...  27.457410  28.765469   \n","221  27.093768  27.972812  28.366536  29.416854  ...  30.582157  32.042649   \n","223  26.313347  26.395452  26.024666  26.373056  ...  25.199932  25.069165   \n","\n","          2005       2006       2007       2008       2009       2010  \\\n","17   22.573778  22.139926  22.281952  21.595448  20.600030  20.894580   \n","37   25.827074  26.002793  25.930945  25.946301  24.742787  24.694526   \n","54   33.617198  34.333216  34.182737  33.657633  32.987694  33.170752   \n","55   26.353291  26.974399  27.236503  26.848682  24.735805  26.848893   \n","58   22.239532  22.819594  22.166674  22.593935  19.950198  19.704924   \n","70   27.168933  26.932537  26.303649  26.290421  24.899680  23.159776   \n","75   29.251854  30.241126  30.670009  29.563225  25.660396  26.158294   \n","77   19.609605  19.284084  19.136739  18.813831  18.304843  17.845736   \n","81   20.266753  20.131206  19.737712  19.993537  18.554793  18.588073   \n","101  27.181776  27.191854  26.701970  25.761069  25.089349  25.199904   \n","177  38.380411  40.056300  37.619260  40.811591  34.869075  35.309484   \n","190  28.637295  28.762959  28.667007  28.665083  29.508209  29.675160   \n","221  31.926984  34.286243  33.544719  33.056554  29.436702  30.619083   \n","223  24.900472  25.254607  25.444014  24.483296  22.402981  23.752729   \n","\n","          2011       2012  \n","17   20.777896  20.075241  \n","37   25.031526  24.603891  \n","54   33.650574  32.922328  \n","55   27.068972  27.283986  \n","58   20.254699  20.397917  \n","70   22.081140  21.034542  \n","75   25.031061  23.378781  \n","77   17.978166  17.868551  \n","81   18.325444  18.301643  \n","101  25.104104  25.018200  \n","177  37.624581  37.476576  \n","190  30.463279  30.292440  \n","221  30.484207  30.820729  \n","223  23.632362  23.003265  \n","\n","[14 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-2a1dd24c-57c7-4679-b6ca-21c38a70f45c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1993</th>\n","      <th>1994</th>\n","      <th>1995</th>\n","      <th>1996</th>\n","      <th>1997</th>\n","      <th>1998</th>\n","      <th>1999</th>\n","      <th>2000</th>\n","      <th>...</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>17</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>26.045814</td>\n","      <td>25.810886</td>\n","      <td>26.109865</td>\n","      <td>25.570685</td>\n","      <td>24.725844</td>\n","      <td>24.943833</td>\n","      <td>...</td>\n","      <td>23.226655</td>\n","      <td>22.959999</td>\n","      <td>22.573778</td>\n","      <td>22.139926</td>\n","      <td>22.281952</td>\n","      <td>21.595448</td>\n","      <td>20.600030</td>\n","      <td>20.894580</td>\n","      <td>20.777896</td>\n","      <td>20.075241</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>Switzerland</td>\n","      <td>CHE</td>\n","      <td>29.004206</td>\n","      <td>29.827166</td>\n","      <td>29.080231</td>\n","      <td>28.028401</td>\n","      <td>27.286719</td>\n","      <td>26.649005</td>\n","      <td>26.281338</td>\n","      <td>25.468196</td>\n","      <td>...</td>\n","      <td>26.006421</td>\n","      <td>25.551510</td>\n","      <td>25.827074</td>\n","      <td>26.002793</td>\n","      <td>25.930945</td>\n","      <td>25.946301</td>\n","      <td>24.742787</td>\n","      <td>24.694526</td>\n","      <td>25.031526</td>\n","      <td>24.603891</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Czechia</td>\n","      <td>CZE</td>\n","      <td>34.868126</td>\n","      <td>34.818983</td>\n","      <td>35.385509</td>\n","      <td>36.145152</td>\n","      <td>35.699667</td>\n","      <td>34.789282</td>\n","      <td>33.771182</td>\n","      <td>33.491207</td>\n","      <td>...</td>\n","      <td>32.342253</td>\n","      <td>33.579750</td>\n","      <td>33.617198</td>\n","      <td>34.333216</td>\n","      <td>34.182737</td>\n","      <td>33.657633</td>\n","      <td>32.987694</td>\n","      <td>33.170752</td>\n","      <td>33.650574</td>\n","      <td>32.922328</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>Germany</td>\n","      <td>DEU</td>\n","      <td>30.606492</td>\n","      <td>30.196988</td>\n","      <td>29.768079</td>\n","      <td>28.855926</td>\n","      <td>28.578130</td>\n","      <td>28.384498</td>\n","      <td>27.654408</td>\n","      <td>27.712378</td>\n","      <td>...</td>\n","      <td>26.186781</td>\n","      <td>26.404849</td>\n","      <td>26.353291</td>\n","      <td>26.974399</td>\n","      <td>27.236503</td>\n","      <td>26.848682</td>\n","      <td>24.735805</td>\n","      <td>26.848893</td>\n","      <td>27.068972</td>\n","      <td>27.283986</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>Denmark</td>\n","      <td>DNK</td>\n","      <td>21.627675</td>\n","      <td>21.623354</td>\n","      <td>22.092562</td>\n","      <td>22.288173</td>\n","      <td>22.452731</td>\n","      <td>22.326018</td>\n","      <td>22.638331</td>\n","      <td>23.652710</td>\n","      <td>...</td>\n","      <td>22.162994</td>\n","      <td>22.129631</td>\n","      <td>22.239532</td>\n","      <td>22.819594</td>\n","      <td>22.166674</td>\n","      <td>22.593935</td>\n","      <td>19.950198</td>\n","      <td>19.704924</td>\n","      <td>20.254699</td>\n","      <td>20.397917</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>Spain</td>\n","      <td>ESP</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>28.334433</td>\n","      <td>28.079141</td>\n","      <td>28.064699</td>\n","      <td>27.847473</td>\n","      <td>27.895012</td>\n","      <td>27.969240</td>\n","      <td>...</td>\n","      <td>27.421204</td>\n","      <td>26.993951</td>\n","      <td>27.168933</td>\n","      <td>26.932537</td>\n","      <td>26.303649</td>\n","      <td>26.290421</td>\n","      <td>24.899680</td>\n","      <td>23.159776</td>\n","      <td>22.081140</td>\n","      <td>21.034542</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>26.958977</td>\n","      <td>28.221799</td>\n","      <td>29.490913</td>\n","      <td>28.840257</td>\n","      <td>29.027047</td>\n","      <td>30.529409</td>\n","      <td>30.435879</td>\n","      <td>31.589980</td>\n","      <td>...</td>\n","      <td>29.529025</td>\n","      <td>29.373008</td>\n","      <td>29.251854</td>\n","      <td>30.241126</td>\n","      <td>30.670009</td>\n","      <td>29.563225</td>\n","      <td>25.660396</td>\n","      <td>26.158294</td>\n","      <td>25.031061</td>\n","      <td>23.378781</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>23.061958</td>\n","      <td>22.244372</td>\n","      <td>22.309778</td>\n","      <td>21.675187</td>\n","      <td>21.527301</td>\n","      <td>21.444845</td>\n","      <td>21.201728</td>\n","      <td>21.293940</td>\n","      <td>...</td>\n","      <td>20.191811</td>\n","      <td>19.957583</td>\n","      <td>19.609605</td>\n","      <td>19.284084</td>\n","      <td>19.136739</td>\n","      <td>18.813831</td>\n","      <td>18.304843</td>\n","      <td>17.845736</td>\n","      <td>17.978166</td>\n","      <td>17.868551</td>\n","    </tr>\n","    <tr>\n","      <th>81</th>\n","      <td>United Kingdom</td>\n","      <td>GBR</td>\n","      <td>25.747901</td>\n","      <td>26.274018</td>\n","      <td>24.362531</td>\n","      <td>24.490518</td>\n","      <td>23.628154</td>\n","      <td>22.976141</td>\n","      <td>22.573060</td>\n","      <td>22.623079</td>\n","      <td>...</td>\n","      <td>20.840890</td>\n","      <td>20.242213</td>\n","      <td>20.266753</td>\n","      <td>20.131206</td>\n","      <td>19.737712</td>\n","      <td>19.993537</td>\n","      <td>18.554793</td>\n","      <td>18.588073</td>\n","      <td>18.325444</td>\n","      <td>18.301643</td>\n","    </tr>\n","    <tr>\n","      <th>101</th>\n","      <td>Hungary</td>\n","      <td>HUN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>25.805541</td>\n","      <td>25.412110</td>\n","      <td>27.790314</td>\n","      <td>28.095434</td>\n","      <td>27.517752</td>\n","      <td>27.048551</td>\n","      <td>...</td>\n","      <td>26.389044</td>\n","      <td>26.850612</td>\n","      <td>27.181776</td>\n","      <td>27.191854</td>\n","      <td>26.701970</td>\n","      <td>25.761069</td>\n","      <td>25.089349</td>\n","      <td>25.199904</td>\n","      <td>25.104104</td>\n","      <td>25.018200</td>\n","    </tr>\n","    <tr>\n","      <th>177</th>\n","      <td>Norway</td>\n","      <td>NOR</td>\n","      <td>27.595946</td>\n","      <td>27.900388</td>\n","      <td>28.793070</td>\n","      <td>30.968775</td>\n","      <td>31.473005</td>\n","      <td>27.631494</td>\n","      <td>29.608287</td>\n","      <td>36.799829</td>\n","      <td>...</td>\n","      <td>33.813786</td>\n","      <td>35.426086</td>\n","      <td>38.380411</td>\n","      <td>40.056300</td>\n","      <td>37.619260</td>\n","      <td>40.811591</td>\n","      <td>34.869075</td>\n","      <td>35.309484</td>\n","      <td>37.624581</td>\n","      <td>37.476576</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>Poland</td>\n","      <td>POL</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>33.481713</td>\n","      <td>32.152805</td>\n","      <td>31.411530</td>\n","      <td>31.178400</td>\n","      <td>30.212741</td>\n","      <td>28.793172</td>\n","      <td>...</td>\n","      <td>27.457410</td>\n","      <td>28.765469</td>\n","      <td>28.637295</td>\n","      <td>28.762959</td>\n","      <td>28.667007</td>\n","      <td>28.665083</td>\n","      <td>29.508209</td>\n","      <td>29.675160</td>\n","      <td>30.463279</td>\n","      <td>30.292440</td>\n","    </tr>\n","    <tr>\n","      <th>221</th>\n","      <td>Slovak Republic</td>\n","      <td>SVK</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>27.740014</td>\n","      <td>28.596913</td>\n","      <td>27.093768</td>\n","      <td>27.972812</td>\n","      <td>28.366536</td>\n","      <td>29.416854</td>\n","      <td>...</td>\n","      <td>30.582157</td>\n","      <td>32.042649</td>\n","      <td>31.926984</td>\n","      <td>34.286243</td>\n","      <td>33.544719</td>\n","      <td>33.056554</td>\n","      <td>29.436702</td>\n","      <td>30.619083</td>\n","      <td>30.484207</td>\n","      <td>30.820729</td>\n","    </tr>\n","    <tr>\n","      <th>223</th>\n","      <td>Sweden</td>\n","      <td>SWE</td>\n","      <td>24.113047</td>\n","      <td>25.105321</td>\n","      <td>26.920824</td>\n","      <td>26.221176</td>\n","      <td>26.313347</td>\n","      <td>26.395452</td>\n","      <td>26.024666</td>\n","      <td>26.373056</td>\n","      <td>...</td>\n","      <td>25.199932</td>\n","      <td>25.069165</td>\n","      <td>24.900472</td>\n","      <td>25.254607</td>\n","      <td>25.444014</td>\n","      <td>24.483296</td>\n","      <td>22.402981</td>\n","      <td>23.752729</td>\n","      <td>23.632362</td>\n","      <td>23.003265</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a1dd24c-57c7-4679-b6ca-21c38a70f45c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2a1dd24c-57c7-4679-b6ca-21c38a70f45c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2a1dd24c-57c7-4679-b6ca-21c38a70f45c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5b6dfa38-3c53-46e2-81b5-3884a2158d49\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b6dfa38-3c53-46e2-81b5-3884a2158d49')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5b6dfa38-3c53-46e2-81b5-3884a2158d49 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"industry_composition_filtered"}},"metadata":{},"execution_count":65}],"source":["# Delete the countries which are not in the merged data set\n","industry_composition_filtered = industry_composition_filtered[industry_composition_filtered['Country Code'].isin(unique_country_codes_merged_data)]\n","industry_composition_filtered.head(50)"]},{"cell_type":"code","execution_count":66,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Tdrar6TD7Y1s","executionInfo":{"status":"ok","timestamp":1734195696337,"user_tz":-60,"elapsed":74,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"1ebee789-14b1-49b7-a8a8-1b8f001b6d19"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Country Name Country Code  Year  Industry composition\n","0       Belgium          BEL  1993                   NaN\n","1       Belgium          BEL  1994                   NaN\n","2       Belgium          BEL  1995             26.045814\n","3       Belgium          BEL  1996             25.810886\n","4       Belgium          BEL  1997             26.109865\n","..          ...          ...   ...                   ...\n","95       France          FRA  2008             18.813831\n","96       France          FRA  2009             18.304843\n","97       France          FRA  2010             17.845736\n","98       France          FRA  2011             17.978166\n","99       France          FRA  2012             17.868551\n","\n","[100 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-c9133329-6c58-48b1-bec7-09ca48e7b58f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Industry composition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1993</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1994</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>26.045814</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>25.810886</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Belgium</td>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>26.109865</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2008</td>\n","      <td>18.813831</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2009</td>\n","      <td>18.304843</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2010</td>\n","      <td>17.845736</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2011</td>\n","      <td>17.978166</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>France</td>\n","      <td>FRA</td>\n","      <td>2012</td>\n","      <td>17.868551</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9133329-6c58-48b1-bec7-09ca48e7b58f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c9133329-6c58-48b1-bec7-09ca48e7b58f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c9133329-6c58-48b1-bec7-09ca48e7b58f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-63f74ab0-8dde-490a-8c60-8911c0711647\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63f74ab0-8dde-490a-8c60-8911c0711647')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-63f74ab0-8dde-490a-8c60-8911c0711647 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_industry_composition","summary":"{\n  \"name\": \"final_industry_composition\",\n  \"rows\": 280,\n  \"fields\": [\n    {\n      \"column\": \"Country Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Slovak Republic\",\n          \"Sweden\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"1993\",\n          \"2010\",\n          \"2008\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.624815833718837,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 270,\n        \"samples\": [\n          33.61719819,\n          27.06897192,\n          22.24437161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":66}],"source":["# Melt the DataFrame to convert years to rows\n","melted_industry_composition = pd.melt(\n","    industry_composition_filtered,\n","    id_vars=['Country Name', 'Country Code'],\n","    var_name='Year',\n","    value_name='Industry composition'\n",")\n","\n","# Sort values by Country Name and Year\n","final_industry_composition= melted_industry_composition.sort_values(['Country Name', 'Year'])\n","\n","# Reset the index\n","final_industry_composition = final_industry_composition.reset_index(drop=True)\n","\n","# Display the result\n","final_industry_composition.head(100)"]},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"gxFB_bgx8dTI","executionInfo":{"status":"ok","timestamp":1734195696802,"user_tz":-60,"elapsed":535,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"f2612f63-f635-40b7-d26d-f4375e2502cb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","   GDP per capita (current US$) Urban population (% of total population)  \\\n","0              28413.8264387368                                   96.777   \n","1              27489.5551770488                                   96.851   \n","2              24820.9380503896                                   96.924   \n","3              25338.4432934904                                   96.996   \n","4              25252.8019066564                                   97.065   \n","..                          ...                                      ...   \n","95             23694.7604830673                                   74.965   \n","96             23628.3272122367                                    75.17   \n","97             25197.2656001848                                   75.374   \n","98             30310.3575963774                                   75.577   \n","99             34106.6581224001                                   75.779   \n","\n","    environmental_awareness  corruption_perception_index Country Code  Year  \\\n","0                       NaN                         5.25          BEL  1995   \n","1                       NaN                         5.25          BEL  1996   \n","2                       NaN                         5.25          BEL  1997   \n","3                       NaN                         5.40          BEL  1998   \n","4                       NaN                         5.30          BEL  1999   \n","..                      ...                          ...          ...   ...   \n","95                      NaN                         7.60          DEU  2000   \n","96                      NaN                         7.40          DEU  2001   \n","97                 2.186026                         7.30          DEU  2002   \n","98                 2.222039                         7.70          DEU  2003   \n","99                 2.258052                         8.20          DEU  2004   \n","\n","    Industry composition  \n","0              26.045814  \n","1              25.810886  \n","2              26.109865  \n","3              25.570685  \n","4              24.725844  \n","..                   ...  \n","95             27.712378  \n","96             27.069191  \n","97             26.378724  \n","98             26.186781  \n","99             26.404849  \n","\n","[100 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-03974c9d-4026-4912-b7fe-edb56a11f613\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Industry composition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>26.045814</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>25.810886</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>26.109865</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>25.570685</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>24.725844</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","      <td>7.60</td>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>27.712378</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","      <td>7.40</td>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>27.069191</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","      <td>7.30</td>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>26.378724</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","      <td>7.70</td>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>26.186781</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","      <td>8.20</td>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>26.404849</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03974c9d-4026-4912-b7fe-edb56a11f613')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-03974c9d-4026-4912-b7fe-edb56a11f613 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-03974c9d-4026-4912-b7fe-edb56a11f613');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0559ad02-bd5b-4332-8384-4f5d3efa06d0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0559ad02-bd5b-4332-8384-4f5d3efa06d0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0559ad02-bd5b-4332-8384-4f5d3efa06d0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":67}],"source":["# Convert 'Year' column in final_df to numeric (int)\n","final_industry_composition['Year'] = pd.to_numeric(final_industry_composition['Year'])\n","\n","# Convert 'year' column in merged_data to numeric (int) if it's not already\n","final_data['year'] = pd.to_numeric(final_data['year'])\n","\n","# Merge with your existing merged_data\n","final_data = pd.merge(\n","    final_data,\n","    final_industry_composition[['Country Code', 'Year', 'Industry composition']], # Use the new value_name here\n","    left_on=['country_code', 'year'],\n","    right_on=['Country Code', 'Year'],\n","    how='left'\n",")\n","final_data.head(100)"]},{"cell_type":"code","execution_count":68,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"46Dr1tjn87XN","executionInfo":{"status":"ok","timestamp":1734195696802,"user_tz":-60,"elapsed":45,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d7c97d66-33d3-4c35-fb78-8efc7fcd9046"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","   GDP per capita (current US$) Urban population (% of total population)  \\\n","0              28413.8264387368                                   96.777   \n","1              27489.5551770488                                   96.851   \n","2              24820.9380503896                                   96.924   \n","3              25338.4432934904                                   96.996   \n","4              25252.8019066564                                   97.065   \n","..                          ...                                      ...   \n","95             23694.7604830673                                   74.965   \n","96             23628.3272122367                                    75.17   \n","97             25197.2656001848                                   75.374   \n","98             30310.3575963774                                   75.577   \n","99             34106.6581224001                                   75.779   \n","\n","    environmental_awareness  corruption_perception_index  Industry composition  \n","0                       NaN                         5.25             26.045814  \n","1                       NaN                         5.25             25.810886  \n","2                       NaN                         5.25             26.109865  \n","3                       NaN                         5.40             25.570685  \n","4                       NaN                         5.30             24.725844  \n","..                      ...                          ...                   ...  \n","95                      NaN                         7.60             27.712378  \n","96                      NaN                         7.40             27.069191  \n","97                 2.186026                         7.30             26.378724  \n","98                 2.222039                         7.70             26.186781  \n","99                 2.258052                         8.20             26.404849  \n","\n","[100 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-3826d7b4-79de-4bc9-ad9c-9347d83d49e1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>GDP per capita (current US$)</th>\n","      <th>Urban population (% of total population)</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>Industry composition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.045814</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>25.810886</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.109865</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>25.570685</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>24.725844</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","      <td>7.60</td>\n","      <td>27.712378</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","      <td>7.40</td>\n","      <td>27.069191</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","      <td>7.30</td>\n","      <td>26.378724</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","      <td>7.70</td>\n","      <td>26.186781</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","      <td>8.20</td>\n","      <td>26.404849</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3826d7b4-79de-4bc9-ad9c-9347d83d49e1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3826d7b4-79de-4bc9-ad9c-9347d83d49e1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3826d7b4-79de-4bc9-ad9c-9347d83d49e1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9d7d27cc-8255-44bc-a275-4fdcae4024d2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d7d27cc-8255-44bc-a275-4fdcae4024d2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9d7d27cc-8255-44bc-a275-4fdcae4024d2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (current US$)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Urban population (% of total population)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":68}],"source":["final_data = final_data.drop(columns=['Country Code', 'Year'])\n","final_data.head(100)"]},{"cell_type":"code","execution_count":69,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"5w8FdZ6curIO","executionInfo":{"status":"ok","timestamp":1734195697209,"user_tz":-60,"elapsed":443,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"e6235f42-7820-433b-aeb5-cfd992b2d3d5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year  oecd_eps  annual_transport_trends  \\\n","0            BEL  1995  0.770833              91158000000   \n","1            BEL  1996  0.770833              92416000000   \n","2            BEL  1997  0.770833              94033000000   \n","3            BEL  1998  0.770833              99280000000   \n","4            BEL  1999  0.770833             102830000000   \n","..           ...   ...       ...                      ...   \n","247          GBR  2008  2.404167             666601000000   \n","248          GBR  2009  2.575000             661967000000   \n","249          GBR  2010  3.616667             651061000000   \n","250          GBR  2011  3.466667             653682000000   \n","251          GBR  2012  3.291667             660971000000   \n","\n","     electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                        0.881        10137265.0                 8992.366284   \n","1                        0.882        10156970.0                 9098.776505   \n","2                        0.882        10181464.0                 9235.705199   \n","3                        0.882        10203182.0                 9730.297862   \n","4                        0.883        10226682.0                10055.069670   \n","..                         ...               ...                         ...   \n","247                      0.869        62027306.0                10746.895891   \n","248                      0.869        62506226.0                10590.417025   \n","249                      0.867        63006483.0                10333.238248   \n","250                      0.867        63509285.0                10292.699721   \n","251                      0.868        63960484.0                10334.052507   \n","\n","       gdp_per_capita urbanization_rate  environmental_awareness  \\\n","0    28413.8264387368            96.777                      NaN   \n","1    27489.5551770488            96.851                      NaN   \n","2    24820.9380503896            96.924                      NaN   \n","3    25338.4432934904            96.996                      NaN   \n","4    25252.8019066564            97.065                      NaN   \n","..                ...               ...                      ...   \n","247  47396.1202078484            80.757                 2.311862   \n","248   38744.131693043            81.031                 2.307042   \n","249   39598.957119545            81.302                 2.302222   \n","250  42109.6418795749             81.57                 2.234323   \n","251  42497.3404974322            81.837                 2.166423   \n","\n","     corruption_perception_index  industry_composition  \n","0                           5.25             26.045814  \n","1                           5.25             25.810886  \n","2                           5.25             26.109865  \n","3                           5.40             25.570685  \n","4                           5.30             24.725844  \n","..                           ...                   ...  \n","247                         7.70             19.993537  \n","248                         7.70             18.554793  \n","249                         7.60             18.588073  \n","250                         7.80             18.325444  \n","251                         7.40             18.301643  \n","\n","[252 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-1485028a-0d7c-425f-866c-eaf8bb3101b9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.045814</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>25.810886</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.109865</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>25.570685</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>24.725844</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>GBR</td>\n","      <td>2008</td>\n","      <td>2.404167</td>\n","      <td>666601000000</td>\n","      <td>0.869</td>\n","      <td>62027306.0</td>\n","      <td>10746.895891</td>\n","      <td>47396.1202078484</td>\n","      <td>80.757</td>\n","      <td>2.311862</td>\n","      <td>7.70</td>\n","      <td>19.993537</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>GBR</td>\n","      <td>2009</td>\n","      <td>2.575000</td>\n","      <td>661967000000</td>\n","      <td>0.869</td>\n","      <td>62506226.0</td>\n","      <td>10590.417025</td>\n","      <td>38744.131693043</td>\n","      <td>81.031</td>\n","      <td>2.307042</td>\n","      <td>7.70</td>\n","      <td>18.554793</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>GBR</td>\n","      <td>2010</td>\n","      <td>3.616667</td>\n","      <td>651061000000</td>\n","      <td>0.867</td>\n","      <td>63006483.0</td>\n","      <td>10333.238248</td>\n","      <td>39598.957119545</td>\n","      <td>81.302</td>\n","      <td>2.302222</td>\n","      <td>7.60</td>\n","      <td>18.588073</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>GBR</td>\n","      <td>2011</td>\n","      <td>3.466667</td>\n","      <td>653682000000</td>\n","      <td>0.867</td>\n","      <td>63509285.0</td>\n","      <td>10292.699721</td>\n","      <td>42109.6418795749</td>\n","      <td>81.57</td>\n","      <td>2.234323</td>\n","      <td>7.80</td>\n","      <td>18.325444</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>GBR</td>\n","      <td>2012</td>\n","      <td>3.291667</td>\n","      <td>660971000000</td>\n","      <td>0.868</td>\n","      <td>63960484.0</td>\n","      <td>10334.052507</td>\n","      <td>42497.3404974322</td>\n","      <td>81.837</td>\n","      <td>2.166423</td>\n","      <td>7.40</td>\n","      <td>18.301643</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>252 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1485028a-0d7c-425f-866c-eaf8bb3101b9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1485028a-0d7c-425f-866c-eaf8bb3101b9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1485028a-0d7c-425f-866c-eaf8bb3101b9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4f92daad-636c-4fc8-b9ac-d0d425a32403\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f92daad-636c-4fc8-b9ac-d0d425a32403')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4f92daad-636c-4fc8-b9ac-d0d425a32403 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4cf89ef7-d23d-4868-aed4-c43a903f194e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4cf89ef7-d23d-4868-aed4-c43a903f194e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":69}],"source":["final_data = final_data.rename(columns={'Industry composition': 'industry_composition'})\n","final_data = final_data.rename(columns={'GDP per capita (current US$)': 'gdp_per_capita'})\n","final_data = final_data.rename(columns={'Urban population (% of total population)': 'urbanization_rate'})\n","final_data"]},{"cell_type":"markdown","source":["### Including the instrumental variable"],"metadata":{"id":"fijfPW4BQ1UE"}},{"cell_type":"code","source":["IV = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/estat_road_eqs_carhab_en.csv')\n","IV.head()"],"metadata":{"id":"nbYJQrNaQ-fZ","executionInfo":{"status":"ok","timestamp":1734195697757,"user_tz":-60,"elapsed":552,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"f07c881b-3eeb-4540-c7c7-0d53b36e7ff5"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     DATAFLOW        LAST UPDATE    freq    unit      geo  \\\n","0  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  Albania   \n","1  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  Albania   \n","2  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  Albania   \n","3  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  Albania   \n","4  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  Albania   \n","\n","   TIME_PERIOD  OBS_VALUE OBS_FLAG  \n","0         2000       38.0      NaN  \n","1         2001       44.0      NaN  \n","2         2002       49.0      NaN  \n","3         2013      118.0      NaN  \n","4         2014      131.0      NaN  "],"text/html":["\n","  <div id=\"df-9ce44352-3b47-4208-9711-a52a0894cb42\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DATAFLOW</th>\n","      <th>LAST UPDATE</th>\n","      <th>freq</th>\n","      <th>unit</th>\n","      <th>geo</th>\n","      <th>TIME_PERIOD</th>\n","      <th>OBS_VALUE</th>\n","      <th>OBS_FLAG</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>Albania</td>\n","      <td>2000</td>\n","      <td>38.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>Albania</td>\n","      <td>2001</td>\n","      <td>44.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>Albania</td>\n","      <td>2002</td>\n","      <td>49.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>Albania</td>\n","      <td>2013</td>\n","      <td>118.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>Albania</td>\n","      <td>2014</td>\n","      <td>131.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ce44352-3b47-4208-9711-a52a0894cb42')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9ce44352-3b47-4208-9711-a52a0894cb42 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9ce44352-3b47-4208-9711-a52a0894cb42');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8ede85b4-c881-4d37-a9d4-67cc8b59a802\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ede85b4-c881-4d37-a9d4-67cc8b59a802')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8ede85b4-c881-4d37-a9d4-67cc8b59a802 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"IV","summary":"{\n  \"name\": \"IV\",\n  \"rows\": 1210,\n  \"fields\": [\n    {\n      \"column\": \"DATAFLOW\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"ESTAT:ROAD_EQS_CARHAB(1.0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LAST UPDATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"26/11/24 23:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Annual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Number\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 43,\n        \"samples\": [\n          \"Slovenia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TIME_PERIOD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1990,\n        \"max\": 2023,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBS_VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 155.331915437962,\n        \"min\": 29.0,\n        \"max\": 781.0,\n        \"num_unique_values\": 523,\n        \"samples\": [\n          174.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBS_FLAG\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"b\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# Define a function to convert country names to their 3-digit ISO alpha-3 codes\n","def country_name_to_alpha_3(country_name):\n","    try:\n","        return countries.lookup(country_name).alpha_3\n","    except LookupError:\n","        return None  # Return None if no match is found\n","\n","# Apply the conversion to the 'geo' column\n","IV['geo'] = IV['geo'].apply(country_name_to_alpha_3)\n","IV"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"_DANIAZOiXWk","executionInfo":{"status":"ok","timestamp":1734195698142,"user_tz":-60,"elapsed":398,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"0014ccc7-1698-45f2-f024-946f473cfc37"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        DATAFLOW        LAST UPDATE    freq    unit   geo  \\\n","0     ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   ALB   \n","1     ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   ALB   \n","2     ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   ALB   \n","3     ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   ALB   \n","4     ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   ALB   \n","...                          ...                ...     ...     ...   ...   \n","1205  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  None   \n","1206  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  None   \n","1207  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  None   \n","1208  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  None   \n","1209  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number  None   \n","\n","      TIME_PERIOD  OBS_VALUE OBS_FLAG  \n","0            2000       38.0      NaN  \n","1            2001       44.0      NaN  \n","2            2002       49.0      NaN  \n","3            2013      118.0      NaN  \n","4            2014      131.0      NaN  \n","...           ...        ...      ...  \n","1205         2019      174.0      NaN  \n","1206         2020      163.0      NaN  \n","1207         2021      182.0      NaN  \n","1208         2022      191.0        s  \n","1209         2023      205.0        s  \n","\n","[1210 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-d4f27d13-377c-45bb-8efa-075acb19559a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DATAFLOW</th>\n","      <th>LAST UPDATE</th>\n","      <th>freq</th>\n","      <th>unit</th>\n","      <th>geo</th>\n","      <th>TIME_PERIOD</th>\n","      <th>OBS_VALUE</th>\n","      <th>OBS_FLAG</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>ALB</td>\n","      <td>2000</td>\n","      <td>38.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>ALB</td>\n","      <td>2001</td>\n","      <td>44.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>ALB</td>\n","      <td>2002</td>\n","      <td>49.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>ALB</td>\n","      <td>2013</td>\n","      <td>118.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>ALB</td>\n","      <td>2014</td>\n","      <td>131.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1205</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>None</td>\n","      <td>2019</td>\n","      <td>174.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1206</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>None</td>\n","      <td>2020</td>\n","      <td>163.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1207</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>None</td>\n","      <td>2021</td>\n","      <td>182.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>None</td>\n","      <td>2022</td>\n","      <td>191.0</td>\n","      <td>s</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>None</td>\n","      <td>2023</td>\n","      <td>205.0</td>\n","      <td>s</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4f27d13-377c-45bb-8efa-075acb19559a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d4f27d13-377c-45bb-8efa-075acb19559a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d4f27d13-377c-45bb-8efa-075acb19559a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4b0dae76-8a32-4cd7-b9c2-ab0502d95c77\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b0dae76-8a32-4cd7-b9c2-ab0502d95c77')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4b0dae76-8a32-4cd7-b9c2-ab0502d95c77 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_bd8e1043-44cc-4fb5-8970-8ae0b54cb526\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('IV')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_bd8e1043-44cc-4fb5-8970-8ae0b54cb526 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('IV');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"IV","summary":"{\n  \"name\": \"IV\",\n  \"rows\": 1210,\n  \"fields\": [\n    {\n      \"column\": \"DATAFLOW\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"ESTAT:ROAD_EQS_CARHAB(1.0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LAST UPDATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"26/11/24 23:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Annual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Number\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 41,\n        \"samples\": [\n          \"LVA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TIME_PERIOD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1990,\n        \"max\": 2023,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBS_VALUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 155.331915437962,\n        \"min\": 29.0,\n        \"max\": 781.0,\n        \"num_unique_values\": 523,\n        \"samples\": [\n          174.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBS_FLAG\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"b\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["# Prepare the datasets for merging\n","# Rename 'OBS_VALUE' to 'IV [Passenger Cars - Per Thousand Inhabitants]' in the first dataset\n","IV = IV.rename(columns={'OBS_VALUE': 'IV [Passenger Cars - Per Thousand Inhabitants]'})\n","\n","# Ensure both datasets have compatible column names for merging\n","# Convert 'geo' in the first dataset and 'country_code' in the final data to a common column name\n","IV = IV.rename(columns={'geo': 'country_code'})\n","IV = IV.rename(columns={'TIME_PERIOD': 'year'})\n","\n","# Merge the datasets on 'country_code' and 'TIME_PERIOD'\n","final_data = pd.merge(final_data, IV, on=['country_code', 'year'], how='left')\n","final_data.head(100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":687},"id":"EvptyEIbjGTi","executionInfo":{"status":"ok","timestamp":1734195698147,"user_tz":-60,"elapsed":43,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"fc427737-9e1b-411c-adc0-a363d5168434"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","      gdp_per_capita urbanization_rate  environmental_awareness  \\\n","0   28413.8264387368            96.777                      NaN   \n","1   27489.5551770488            96.851                      NaN   \n","2   24820.9380503896            96.924                      NaN   \n","3   25338.4432934904            96.996                      NaN   \n","4   25252.8019066564            97.065                      NaN   \n","..               ...               ...                      ...   \n","95  23694.7604830673            74.965                      NaN   \n","96  23628.3272122367             75.17                      NaN   \n","97  25197.2656001848            75.374                 2.186026   \n","98  30310.3575963774            75.577                 2.222039   \n","99  34106.6581224001            75.779                 2.258052   \n","\n","    corruption_perception_index  industry_composition  \\\n","0                          5.25             26.045814   \n","1                          5.25             25.810886   \n","2                          5.25             26.109865   \n","3                          5.40             25.570685   \n","4                          5.30             24.725844   \n","..                          ...                   ...   \n","95                         7.60             27.712378   \n","96                         7.40             27.069191   \n","97                         7.30             26.378724   \n","98                         7.70             26.186781   \n","99                         8.20             26.404849   \n","\n","                      DATAFLOW        LAST UPDATE    freq    unit  \\\n","0   ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","1   ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","2   ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","3   ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","4   ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","..                         ...                ...     ...     ...   \n","95  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","96  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","97  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","98  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","99  ESTAT:ROAD_EQS_CARHAB(1.0)  26/11/24 23:00:00  Annual  Number   \n","\n","    IV [Passenger Cars - Per Thousand Inhabitants] OBS_FLAG  \n","0                                            421.0      NaN  \n","1                                            427.0      NaN  \n","2                                            433.0      NaN  \n","3                                            440.0      NaN  \n","4                                            448.0      NaN  \n","..                                             ...      ...  \n","95                                           532.0        b  \n","96                                           538.0      NaN  \n","97                                           541.0      NaN  \n","98                                           546.0      NaN  \n","99                                           550.0      NaN  \n","\n","[100 rows x 18 columns]"],"text/html":["\n","  <div id=\"df-0a5243ea-3b46-439a-ac6f-47c9f35e4848\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>DATAFLOW</th>\n","      <th>LAST UPDATE</th>\n","      <th>freq</th>\n","      <th>unit</th>\n","      <th>IV [Passenger Cars - Per Thousand Inhabitants]</th>\n","      <th>OBS_FLAG</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.045814</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>421.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>25.810886</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>427.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.109865</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>433.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>25.570685</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>440.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>24.725844</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>448.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","      <td>7.60</td>\n","      <td>27.712378</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>532.0</td>\n","      <td>b</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","      <td>7.40</td>\n","      <td>27.069191</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>538.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","      <td>7.30</td>\n","      <td>26.378724</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>541.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","      <td>7.70</td>\n","      <td>26.186781</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>546.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","      <td>8.20</td>\n","      <td>26.404849</td>\n","      <td>ESTAT:ROAD_EQS_CARHAB(1.0)</td>\n","      <td>26/11/24 23:00:00</td>\n","      <td>Annual</td>\n","      <td>Number</td>\n","      <td>550.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 18 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a5243ea-3b46-439a-ac6f-47c9f35e4848')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0a5243ea-3b46-439a-ac6f-47c9f35e4848 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0a5243ea-3b46-439a-ac6f-47c9f35e4848');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d27d479e-08da-4739-852c-0f4c227c04d9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d27d479e-08da-4739-852c-0f4c227c04d9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d27d479e-08da-4739-852c-0f4c227c04d9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATAFLOW\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"ESTAT:ROAD_EQS_CARHAB(1.0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LAST UPDATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"26/11/24 23:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Annual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Number\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV [Passenger Cars - Per Thousand Inhabitants]\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.78639638984835,\n        \"min\": 189.0,\n        \"max\": 566.0,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          240.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBS_FLAG\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"b\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["# Remove the selected unnecessary columns from the merged dataset\n","columns_to_remove = [\"DATAFLOW\", \"LAST UPDATE\", \"freq\", \"unit\", \"OBS_FLAG\"]\n","final_data = final_data.drop(columns=columns_to_remove)\n","final_data.head(100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"Wgbwu9klmYzo","executionInfo":{"status":"ok","timestamp":1734195698148,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"28857506-58d4-4b45-9879-7be576537117"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   country_code  year  oecd_eps  annual_transport_trends  \\\n","0           BEL  1995  0.770833              91158000000   \n","1           BEL  1996  0.770833              92416000000   \n","2           BEL  1997  0.770833              94033000000   \n","3           BEL  1998  0.770833              99280000000   \n","4           BEL  1999  0.770833             102830000000   \n","..          ...   ...       ...                      ...   \n","95          DEU  2000  2.062500             831300000000   \n","96          DEU  2001  2.062500             852600000000   \n","97          DEU  2002  2.541667             863000000000   \n","98          DEU  2003  2.541667             857700000000   \n","99          DEU  2004  2.666667             868700000000   \n","\n","    electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                       0.881        10137265.0                 8992.366284   \n","1                       0.882        10156970.0                 9098.776505   \n","2                       0.882        10181464.0                 9235.705199   \n","3                       0.882        10203182.0                 9730.297862   \n","4                       0.883        10226682.0                10055.069670   \n","..                        ...               ...                         ...   \n","95                      0.897        81797258.0                10162.932356   \n","96                      0.897        81933884.0                10405.951218   \n","97                      0.897        82068326.0                10515.628161   \n","98                      0.897        82111616.0                10445.537937   \n","99                      0.897        82092708.0                10581.938654   \n","\n","      gdp_per_capita urbanization_rate  environmental_awareness  \\\n","0   28413.8264387368            96.777                      NaN   \n","1   27489.5551770488            96.851                      NaN   \n","2   24820.9380503896            96.924                      NaN   \n","3   25338.4432934904            96.996                      NaN   \n","4   25252.8019066564            97.065                      NaN   \n","..               ...               ...                      ...   \n","95  23694.7604830673            74.965                      NaN   \n","96  23628.3272122367             75.17                      NaN   \n","97  25197.2656001848            75.374                 2.186026   \n","98  30310.3575963774            75.577                 2.222039   \n","99  34106.6581224001            75.779                 2.258052   \n","\n","    corruption_perception_index  industry_composition  \\\n","0                          5.25             26.045814   \n","1                          5.25             25.810886   \n","2                          5.25             26.109865   \n","3                          5.40             25.570685   \n","4                          5.30             24.725844   \n","..                          ...                   ...   \n","95                         7.60             27.712378   \n","96                         7.40             27.069191   \n","97                         7.30             26.378724   \n","98                         7.70             26.186781   \n","99                         8.20             26.404849   \n","\n","    IV [Passenger Cars - Per Thousand Inhabitants]  \n","0                                            421.0  \n","1                                            427.0  \n","2                                            433.0  \n","3                                            440.0  \n","4                                            448.0  \n","..                                             ...  \n","95                                           532.0  \n","96                                           538.0  \n","97                                           541.0  \n","98                                           546.0  \n","99                                           550.0  \n","\n","[100 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-1a9ddf8a-391a-48bd-a307-0db0558f2d9f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV [Passenger Cars - Per Thousand Inhabitants]</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.045814</td>\n","      <td>421.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>25.810886</td>\n","      <td>427.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.109865</td>\n","      <td>433.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>25.570685</td>\n","      <td>440.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>24.725844</td>\n","      <td>448.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>DEU</td>\n","      <td>2000</td>\n","      <td>2.062500</td>\n","      <td>831300000000</td>\n","      <td>0.897</td>\n","      <td>81797258.0</td>\n","      <td>10162.932356</td>\n","      <td>23694.7604830673</td>\n","      <td>74.965</td>\n","      <td>NaN</td>\n","      <td>7.60</td>\n","      <td>27.712378</td>\n","      <td>532.0</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>DEU</td>\n","      <td>2001</td>\n","      <td>2.062500</td>\n","      <td>852600000000</td>\n","      <td>0.897</td>\n","      <td>81933884.0</td>\n","      <td>10405.951218</td>\n","      <td>23628.3272122367</td>\n","      <td>75.17</td>\n","      <td>NaN</td>\n","      <td>7.40</td>\n","      <td>27.069191</td>\n","      <td>538.0</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>DEU</td>\n","      <td>2002</td>\n","      <td>2.541667</td>\n","      <td>863000000000</td>\n","      <td>0.897</td>\n","      <td>82068326.0</td>\n","      <td>10515.628161</td>\n","      <td>25197.2656001848</td>\n","      <td>75.374</td>\n","      <td>2.186026</td>\n","      <td>7.30</td>\n","      <td>26.378724</td>\n","      <td>541.0</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>DEU</td>\n","      <td>2003</td>\n","      <td>2.541667</td>\n","      <td>857700000000</td>\n","      <td>0.897</td>\n","      <td>82111616.0</td>\n","      <td>10445.537937</td>\n","      <td>30310.3575963774</td>\n","      <td>75.577</td>\n","      <td>2.222039</td>\n","      <td>7.70</td>\n","      <td>26.186781</td>\n","      <td>546.0</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>DEU</td>\n","      <td>2004</td>\n","      <td>2.666667</td>\n","      <td>868700000000</td>\n","      <td>0.897</td>\n","      <td>82092708.0</td>\n","      <td>10581.938654</td>\n","      <td>34106.6581224001</td>\n","      <td>75.779</td>\n","      <td>2.258052</td>\n","      <td>8.20</td>\n","      <td>26.404849</td>\n","      <td>550.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a9ddf8a-391a-48bd-a307-0db0558f2d9f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a9ddf8a-391a-48bd-a307-0db0558f2d9f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a9ddf8a-391a-48bd-a307-0db0558f2d9f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b47f502f-d210-4449-a333-19a856061fd0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b47f502f-d210-4449-a333-19a856061fd0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b47f502f-d210-4449-a333-19a856061fd0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV [Passenger Cars - Per Thousand Inhabitants]\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.78639638984835,\n        \"min\": 189.0,\n        \"max\": 566.0,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          240.0,\n          414.0,\n          243.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Identify rows where the 'IV [Passenger Cars - Per Thousand Inhabitants]' column is missing\n","missing_iv_data = final_data[\n","    final_data['IV [Passenger Cars - Per Thousand Inhabitants]'].isnull()\n","]\n","\n","# Select only the relevant columns (country_code and year) for missing data\n","missing_iv_table = missing_iv_data[['country_code', 'year']]\n","missing_iv_table.head(100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"YJMDPcvDms3o","executionInfo":{"status":"ok","timestamp":1734195698536,"user_tz":-60,"elapsed":424,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"35d593a3-2cfe-4d27-f994-cc74e1ac4084"},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year\n","85           FRA  2008\n","132          NOR  2001\n","133          NOR  2002\n","134          NOR  2003\n","181          ESP  1996\n","182          ESP  1997\n","183          ESP  1998\n","190          ESP  2005"],"text/html":["\n","  <div id=\"df-52ca84b0-76c9-4cb7-80bd-7e0c4f82266f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>85</th>\n","      <td>FRA</td>\n","      <td>2008</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>NOR</td>\n","      <td>2001</td>\n","    </tr>\n","    <tr>\n","      <th>133</th>\n","      <td>NOR</td>\n","      <td>2002</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>NOR</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>181</th>\n","      <td>ESP</td>\n","      <td>1996</td>\n","    </tr>\n","    <tr>\n","      <th>182</th>\n","      <td>ESP</td>\n","      <td>1997</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>ESP</td>\n","      <td>1998</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>ESP</td>\n","      <td>2005</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52ca84b0-76c9-4cb7-80bd-7e0c4f82266f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-52ca84b0-76c9-4cb7-80bd-7e0c4f82266f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-52ca84b0-76c9-4cb7-80bd-7e0c4f82266f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-106bc388-1b34-4b82-8972-fba10a3d4615\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-106bc388-1b34-4b82-8972-fba10a3d4615')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-106bc388-1b34-4b82-8972-fba10a3d4615 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"missing_iv_table","summary":"{\n  \"name\": \"missing_iv_table\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"FRA\",\n          \"NOR\",\n          \"ESP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1996,\n        \"max\": 2008,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2001,\n          1997,\n          2008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["final_data.rename(columns={'IV [Passenger Cars - Per Thousand Inhabitants]': 'IV'}, inplace=True)\n","final_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"geyMtPn46IyX","executionInfo":{"status":"ok","timestamp":1734195698538,"user_tz":-60,"elapsed":47,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"59d82f39-3462-4015-9253-c70a40237ad1"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  year  oecd_eps  annual_transport_trends  \\\n","0            BEL  1995  0.770833              91158000000   \n","1            BEL  1996  0.770833              92416000000   \n","2            BEL  1997  0.770833              94033000000   \n","3            BEL  1998  0.770833              99280000000   \n","4            BEL  1999  0.770833             102830000000   \n","..           ...   ...       ...                      ...   \n","247          GBR  2008  2.404167             666601000000   \n","248          GBR  2009  2.575000             661967000000   \n","249          GBR  2010  3.616667             651061000000   \n","250          GBR  2011  3.466667             653682000000   \n","251          GBR  2012  3.291667             660971000000   \n","\n","     electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                        0.881        10137265.0                 8992.366284   \n","1                        0.882        10156970.0                 9098.776505   \n","2                        0.882        10181464.0                 9235.705199   \n","3                        0.882        10203182.0                 9730.297862   \n","4                        0.883        10226682.0                10055.069670   \n","..                         ...               ...                         ...   \n","247                      0.869        62027306.0                10746.895891   \n","248                      0.869        62506226.0                10590.417025   \n","249                      0.867        63006483.0                10333.238248   \n","250                      0.867        63509285.0                10292.699721   \n","251                      0.868        63960484.0                10334.052507   \n","\n","       gdp_per_capita urbanization_rate  environmental_awareness  \\\n","0    28413.8264387368            96.777                      NaN   \n","1    27489.5551770488            96.851                      NaN   \n","2    24820.9380503896            96.924                      NaN   \n","3    25338.4432934904            96.996                      NaN   \n","4    25252.8019066564            97.065                      NaN   \n","..                ...               ...                      ...   \n","247  47396.1202078484            80.757                 2.311862   \n","248   38744.131693043            81.031                 2.307042   \n","249   39598.957119545            81.302                 2.302222   \n","250  42109.6418795749             81.57                 2.234323   \n","251  42497.3404974322            81.837                 2.166423   \n","\n","     corruption_perception_index  industry_composition     IV  \n","0                           5.25             26.045814  421.0  \n","1                           5.25             25.810886  427.0  \n","2                           5.25             26.109865  433.0  \n","3                           5.40             25.570685  440.0  \n","4                           5.30             24.725844  448.0  \n","..                           ...                   ...    ...  \n","247                         7.70             19.993537  458.0  \n","248                         7.70             18.554793  452.0  \n","249                         7.60             18.588073  451.0  \n","250                         7.80             18.325444  448.0  \n","251                         7.40             18.301643  449.0  \n","\n","[252 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-f82e5a17-f2ae-40c8-ae7a-8bf682204b31\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>1995</td>\n","      <td>0.770833</td>\n","      <td>91158000000</td>\n","      <td>0.881</td>\n","      <td>10137265.0</td>\n","      <td>8992.366284</td>\n","      <td>28413.8264387368</td>\n","      <td>96.777</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.045814</td>\n","      <td>421.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>1996</td>\n","      <td>0.770833</td>\n","      <td>92416000000</td>\n","      <td>0.882</td>\n","      <td>10156970.0</td>\n","      <td>9098.776505</td>\n","      <td>27489.5551770488</td>\n","      <td>96.851</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>25.810886</td>\n","      <td>427.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>1997</td>\n","      <td>0.770833</td>\n","      <td>94033000000</td>\n","      <td>0.882</td>\n","      <td>10181464.0</td>\n","      <td>9235.705199</td>\n","      <td>24820.9380503896</td>\n","      <td>96.924</td>\n","      <td>NaN</td>\n","      <td>5.25</td>\n","      <td>26.109865</td>\n","      <td>433.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>1998</td>\n","      <td>0.770833</td>\n","      <td>99280000000</td>\n","      <td>0.882</td>\n","      <td>10203182.0</td>\n","      <td>9730.297862</td>\n","      <td>25338.4432934904</td>\n","      <td>96.996</td>\n","      <td>NaN</td>\n","      <td>5.40</td>\n","      <td>25.570685</td>\n","      <td>440.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>1999</td>\n","      <td>0.770833</td>\n","      <td>102830000000</td>\n","      <td>0.883</td>\n","      <td>10226682.0</td>\n","      <td>10055.069670</td>\n","      <td>25252.8019066564</td>\n","      <td>97.065</td>\n","      <td>NaN</td>\n","      <td>5.30</td>\n","      <td>24.725844</td>\n","      <td>448.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>GBR</td>\n","      <td>2008</td>\n","      <td>2.404167</td>\n","      <td>666601000000</td>\n","      <td>0.869</td>\n","      <td>62027306.0</td>\n","      <td>10746.895891</td>\n","      <td>47396.1202078484</td>\n","      <td>80.757</td>\n","      <td>2.311862</td>\n","      <td>7.70</td>\n","      <td>19.993537</td>\n","      <td>458.0</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>GBR</td>\n","      <td>2009</td>\n","      <td>2.575000</td>\n","      <td>661967000000</td>\n","      <td>0.869</td>\n","      <td>62506226.0</td>\n","      <td>10590.417025</td>\n","      <td>38744.131693043</td>\n","      <td>81.031</td>\n","      <td>2.307042</td>\n","      <td>7.70</td>\n","      <td>18.554793</td>\n","      <td>452.0</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>GBR</td>\n","      <td>2010</td>\n","      <td>3.616667</td>\n","      <td>651061000000</td>\n","      <td>0.867</td>\n","      <td>63006483.0</td>\n","      <td>10333.238248</td>\n","      <td>39598.957119545</td>\n","      <td>81.302</td>\n","      <td>2.302222</td>\n","      <td>7.60</td>\n","      <td>18.588073</td>\n","      <td>451.0</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>GBR</td>\n","      <td>2011</td>\n","      <td>3.466667</td>\n","      <td>653682000000</td>\n","      <td>0.867</td>\n","      <td>63509285.0</td>\n","      <td>10292.699721</td>\n","      <td>42109.6418795749</td>\n","      <td>81.57</td>\n","      <td>2.234323</td>\n","      <td>7.80</td>\n","      <td>18.325444</td>\n","      <td>448.0</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>GBR</td>\n","      <td>2012</td>\n","      <td>3.291667</td>\n","      <td>660971000000</td>\n","      <td>0.868</td>\n","      <td>63960484.0</td>\n","      <td>10334.052507</td>\n","      <td>42497.3404974322</td>\n","      <td>81.837</td>\n","      <td>2.166423</td>\n","      <td>7.40</td>\n","      <td>18.301643</td>\n","      <td>449.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>252 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f82e5a17-f2ae-40c8-ae7a-8bf682204b31')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f82e5a17-f2ae-40c8-ae7a-8bf682204b31 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f82e5a17-f2ae-40c8-ae7a-8bf682204b31');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b5eac8f7-28cc-460b-adb2-e9cb1933e8cd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b5eac8f7-28cc-460b-adb2-e9cb1933e8cd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b5eac8f7-28cc-460b-adb2-e9cb1933e8cd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b0fe3b27-155e-4f60-9461-64d77b4830f2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b0fe3b27-155e-4f60-9461-64d77b4830f2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data","summary":"{\n  \"name\": \"final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"SVK\",\n          \"SWE\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1995,\n        \"max\": 2012,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1995,\n          1996,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.871473947199311,\n        \"min\": 0.52083331346512,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          2.6333332061768,\n          3.7000000476837,\n          3.0166666507721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 275971547158,\n        \"min\": 17977000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          65490000000,\n          108000000000,\n          284808000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03160126822883904,\n        \"min\": 0.706,\n        \"max\": 0.922,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.886,\n          0.916,\n          0.919\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25509837.2547711,\n        \"min\": 4358992.0,\n        \"max\": 82389638.0,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          5374796.0,\n          10287004.0,\n          10251716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2850.9122639110606,\n        \"min\": 2885.4675058172666,\n        \"max\": 12500.892544008157,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          3591.2060662395374,\n          10498.683581730891,\n          4501.685376379915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 252,\n        \"samples\": [\n          \"5538.61646477184\",\n          \"23015.0712632462\",\n          \"4744.21226429639\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 251,\n        \"samples\": [\n          \"61.229\",\n          \"97.186\",\n          \"56.355\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20393412195094698,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          1.65532199681484,\n          2.31186150608595,\n          2.08081653450688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9683583671055893,\n        \"min\": 3.3,\n        \"max\": 10.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          9.6,\n          5.25,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.672810639511227,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          27.97281159,\n          24.31215099,\n          28.09543363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.78639638984835,\n        \"min\": 189.0,\n        \"max\": 566.0,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          240.0,\n          414.0,\n          243.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":75}]},{"cell_type":"markdown","source":["## EDA"],"metadata":{"id":"eQsBcpT7Q9w-"}},{"cell_type":"code","source":["final_data['urbanization_rate'] = pd.to_numeric(final_data['urbanization_rate'], errors='coerce')\n","final_data['gdp_per_capita'] = pd.to_numeric(final_data['gdp_per_capita'], errors='coerce')\n","#Interpolate the missing values in the IV\n","final_data['IV'] = final_data['IV'].interpolate(method='linear', limit_direction='both')"],"metadata":{"id":"8DJ8-sYnltjf","executionInfo":{"status":"ok","timestamp":1734195698538,"user_tz":-60,"elapsed":43,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["# Create a new dataframe with data from 2002 to 2012, excluding Slovakia\n","final_data_from_2002 = final_data[(final_data['year'] >= 2002) &\n","                      (final_data['year'] <= 2012) &\n","                      (final_data['country_code'] != 'SVK')].copy()\n","\n","# Reset the index of the new dataframe\n","final_data_from_2002.reset_index(drop=True, inplace=True)"],"metadata":{"id":"gKlNdoEHnhxh","executionInfo":{"status":"ok","timestamp":1734195698539,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["skew_corrution_perception = skew(final_data['corruption_perception_index'])\n","skew_urbanization_rate = skew(final_data['urbanization_rate'])\n","skew_gdp_per_capita = skew(final_data['gdp_per_capita'])\n","skew_environmental_awareness = skew(final_data_from_2002['environmental_awareness'])\n","skew_industry_composition = skew(final_data['industry_composition'])\n","skew_IV = skew(final_data['IV'])\n","print(f\"Skew of corruption_perception_index: {skew_corrution_perception}\")\n","print(f\"Skew of urbanization_rate: {skew_urbanization_rate}\")\n","print(f\"Skew of gdp_per_capita: {skew_gdp_per_capita}\")\n","print(f\"Skew of environmental_awareness: {skew_environmental_awareness}\")\n","print(f\"Skew of industry_composition: {skew_industry_composition}\")\n","print(f\"Skew of IV: {skew_IV}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2n4F_7k1irQk","executionInfo":{"status":"ok","timestamp":1734195698539,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"96e810ed-49ba-4156-9c81-51666795871d"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["Skew of corruption_perception_index: -0.36937915859325104\n","Skew of urbanization_rate: -0.1332993299567601\n","Skew of gdp_per_capita: 0.9051005926008729\n","Skew of environmental_awareness: 0.021776411262598116\n","Skew of industry_composition: 0.3574995194449009\n","Skew of IV: -0.6852324932039322\n"]}]},{"cell_type":"code","source":["# Create a new column with values divided by 1000 while keeping the original\n","final_data['transport_trend_per_person'] = final_data['transport_trend_per_person'] / 1000\n","final_data['gdp_per_capita'] = final_data['gdp_per_capita'] / 1000"],"metadata":{"id":"9joQpxaEGz61","executionInfo":{"status":"ok","timestamp":1734195698539,"user_tz":-60,"elapsed":29,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":["### Check for multicollinearity\n","\n","\n"],"metadata":{"id":"gKyIk__Wq98A"}},{"cell_type":"code","source":["# Create a new dataframe with data from 2002 to 2012, excluding Slovakia\n","final_data_from_2002 = final_data[(final_data['year'] >= 2002) &\n","                      (final_data['year'] <= 2012) &\n","                      (final_data['country_code'] != 'SVK')].copy()\n","\n","# Reset the index of the new dataframe\n","final_data_from_2002.reset_index(drop=True, inplace=True)\n","\n","import pandas as pd\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","# Assuming your data is in a DataFrame called 'df' with columns for your 5 controls\n","X = final_data_from_2002[['gdp_per_capita', 'urbanization_rate', 'environmental_awareness', 'corruption_perception_index', 'industry_composition']]\n","\n","# Calculate VIF for each control\n","vif_data = pd.DataFrame()\n","vif_data[\"Variable\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oW2ap55TXRKb","executionInfo":{"status":"ok","timestamp":1734195698539,"user_tz":-60,"elapsed":27,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"dd689131-7957-433c-b189-487af72a6f51"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["                      Variable         VIF\n","0               gdp_per_capita    8.855248\n","1            urbanization_rate   91.275428\n","2      environmental_awareness  118.272029\n","3  corruption_perception_index   44.781825\n","4         industry_composition   29.792549\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","# Create a new dataframe with data from 2002 to 2012, excluding Slovakia\n","final_data_from_2002 = final_data[(final_data['year'] >= 2002) &\n","                      (final_data['year'] <= 2012) &\n","                      (final_data['country_code'] != 'SVK')].copy()\n","\n","# Reset the index of the new dataframe\n","final_data_from_2002.reset_index(drop=True, inplace=True)\n","\n","# Assembling the confounders\n","X = final_data_from_2002[['gdp_per_capita', 'urbanization_rate', 'environmental_awareness']]\n","\n","# Calculate VIF for each control\n","vif_data = pd.DataFrame()\n","vif_data[\"Variable\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9N8llwILiBY9","executionInfo":{"status":"ok","timestamp":1734195699084,"user_tz":-60,"elapsed":563,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"59f4d959-3cf0-4db3-e10d-7d835f02990b"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["                  Variable        VIF\n","0           gdp_per_capita   5.247288\n","1        urbanization_rate  66.878243\n","2  environmental_awareness  62.082982\n"]}]},{"cell_type":"code","source":["# Assuming your data is in a DataFrame called 'df' with columns for your 5 controls\n","X = final_data[['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']]\n","\n","# Calculate VIF for each control\n","vif_data = pd.DataFrame()\n","vif_data[\"Variable\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6VHLZJGJY3mY","executionInfo":{"status":"ok","timestamp":1734195699084,"user_tz":-60,"elapsed":21,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"e53c9fcd-3de5-49ce-af91-583828a8c2d0"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["                      Variable        VIF\n","0               gdp_per_capita   6.690269\n","1            urbanization_rate  41.594645\n","2  corruption_perception_index  33.722602\n","3         industry_composition  16.256888\n"]}]},{"cell_type":"code","source":["# Calculate the correlation matrix\n","corr_matrix = final_data[['gdp_per_capita', 'urbanization_rate', 'environmental_awareness', 'corruption_perception_index', 'industry_composition']].corr()\n","\n","# Create a heatmap\n","plt.figure(figsize=(6, 5))\n","sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\n","plt.title('Correlation Matrix of Control Variables')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":652},"id":"10Z3c2UZarGu","executionInfo":{"status":"ok","timestamp":1734195701235,"user_tz":-60,"elapsed":2161,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2588da0e-3c51-4d22-ead2-cbfdc15fd30e"},"execution_count":83,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["final_data.to_csv('final_data_with_confounders.csv', index=False)\n","\n","from google.colab import files\n","files.download('final_data_with_confounders.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"oaSL1pyDornO","executionInfo":{"status":"ok","timestamp":1734195701235,"user_tz":-60,"elapsed":16,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"276198b9-ed77-4dc2-8c50-c4cf1f65c7c7"},"execution_count":84,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_3240b138-c525-4a8c-abb0-1c02210f4575\", \"final_data_with_confounders.csv\", 32328)"]},"metadata":{}}]}],"metadata":{"colab":{"collapsed_sections":["qyOtuY7yAe8b"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}