{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24542,"status":"ok","timestamp":1734425816318,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"14ZP-C4vyHDl","outputId":"788ef4dd-5783-424b-bc5a-e12483b7a252"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"aMNtKOuPUrJF","executionInfo":{"status":"ok","timestamp":1734425843550,"user_tz":-60,"elapsed":27246,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"420c7ee7-97a4-47df-8f9b-6c0488654dd8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting linearmodels\n","  Downloading linearmodels-6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.9 kB)\n","Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.26.4)\n","Requirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (2.2.2)\n","Requirement already satisfied: scipy>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.13.1)\n","Requirement already satisfied: statsmodels>=0.13.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (0.14.4)\n","Collecting mypy-extensions>=0.4 (from linearmodels)\n","  Downloading mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n","Requirement already satisfied: Cython>=3.0.10 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (3.0.11)\n","Collecting pyhdfe>=0.1 (from linearmodels)\n","  Downloading pyhdfe-0.2.0-py3-none-any.whl.metadata (4.0 kB)\n","Collecting formulaic>=1.0.0 (from linearmodels)\n","  Downloading formulaic-1.1.0-py3-none-any.whl.metadata (6.9 kB)\n","Collecting setuptools-scm<9.0.0,>=8.0.0 (from setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels)\n","  Downloading setuptools_scm-8.1.0-py3-none-any.whl.metadata (6.6 kB)\n","Collecting interface-meta>=1.2.0 (from formulaic>=1.0.0->linearmodels)\n","  Downloading interface_meta-1.3.0-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (4.12.2)\n","Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (1.17.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: packaging>=20 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (24.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (75.1.0)\n","Requirement already satisfied: tomli>=1 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (2.2.1)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.0->linearmodels) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4.0->linearmodels) (1.17.0)\n","Downloading linearmodels-6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading formulaic-1.1.0-py3-none-any.whl (115 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.7/115.7 kB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n","Downloading pyhdfe-0.2.0-py3-none-any.whl (19 kB)\n","Downloading setuptools_scm-8.1.0-py3-none-any.whl (43 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.7/43.7 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n","Installing collected packages: setuptools-scm, mypy-extensions, interface-meta, pyhdfe, formulaic, linearmodels\n","Successfully installed formulaic-1.1.0 interface-meta-1.3.0 linearmodels-6.1 mypy-extensions-1.0.0 pyhdfe-0.2.0 setuptools-scm-8.1.0\n","Collecting stargazer\n","  Downloading stargazer-0.0.7-py3-none-any.whl.metadata (6.3 kB)\n","Downloading stargazer-0.0.7-py3-none-any.whl (15 kB)\n","Installing collected packages: stargazer\n","Successfully installed stargazer-0.0.7\n"]}],"source":["%matplotlib inline\n","!pip install linearmodels\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","from scipy.stats import skew\n","from scipy import interpolate\n","from linearmodels.panel import PanelOLS\n","from linearmodels.iv import IV2SLS\n","!pip install stargazer\n","from stargazer.stargazer import Stargazer"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4hVrNIXAiIP","outputId":"53bcd7d3-a817-4aa9-dc4f-fe7fc4fdf5ff","executionInfo":{"status":"ok","timestamp":1734425861998,"user_tz":-60,"elapsed":18460,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting DoubleML\n","  Downloading DoubleML-0.9.0-py3-none-any.whl.metadata (7.7 kB)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.4.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from DoubleML) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.5.2)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from DoubleML) (0.14.4)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from DoubleML) (5.24.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (24.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->DoubleML) (3.5.0)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->DoubleML) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->DoubleML) (1.17.0)\n","Downloading DoubleML-0.9.0-py3-none-any.whl (318 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m318.1/318.1 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: DoubleML\n","Successfully installed DoubleML-0.9.0\n"]}],"source":["# Install the DoubleML package, upgrading to the latest version if it's already installed.\n","# !: This symbol in a Colab notebook indicates that the following command should be run in the system shell (like a terminal), not within the Python interpreter.\n","!pip install -U DoubleML\n","\n","import graphviz as gr  # For creating and visualizing directed acyclic graphs (DAGs)\n","\n","import statsmodels.formula.api as smf  # For statistical modeling using R-style formulas\n","\n","from matplotlib.colors import ListedColormap  # For creating custom colormaps for visualizations\n","import seaborn as sns  # For statistical data visualization based on matplotlib\n","\n","from sklearn.model_selection import KFold, RepeatedKFold  # For cross-validation techniques\n","from sklearn.base import clone  # For cloning estimator objects\n","\n","from sklearn.tree import DecisionTreeRegressor  # For Decision Tree regression models\n","from sklearn.ensemble import RandomForestRegressor  # For Random Forest regression models\n","from xgboost import XGBRegressor  # For XGBoost regression models\n","\n","import doubleml as dml  # For Double/Debiased Machine Learning\n","from doubleml import DoubleMLClusterData  # For DoubleML data handling with clustered data"]},{"cell_type":"markdown","metadata":{"id":"ig21KQ8v5r_B"},"source":["# Regression Analysis in thousand kilometers"]},{"cell_type":"code","source":["final_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/final_data_with_confounders.csv')"],"metadata":{"id":"O-kqfYuGoxa1","executionInfo":{"status":"ok","timestamp":1734425862767,"user_tz":-60,"elapsed":779,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"id":"buBjX9Au5r_E","executionInfo":{"status":"ok","timestamp":1734425863198,"user_tz":-60,"elapsed":439,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"959d5a04-d20d-4f1d-d7c3-e6d6090fed64"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column data types:\n","country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n","\n","Columns with non-numeric values:\n","- country_code\n","  Example non-numeric values: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA']\n","\n","Columns with null values:\n","environmental_awareness    100\n","dtype: int64\n"]}],"source":["# Check data types of columns\n","data_types = final_data.dtypes\n","print(\"Column data types:\")\n","print(data_types)\n","\n","# Function to check for non-numeric values\n","def check_non_numeric(column):\n","    return column.apply(lambda x: not pd.api.types.is_numeric_dtype(type(x)))\n","\n","# Check for non-numeric values in each column\n","non_numeric = final_data.apply(check_non_numeric)\n","\n","print(\"\\nColumns with non-numeric values:\")\n","for column, has_non_numeric in non_numeric.items():\n","    if has_non_numeric.any():\n","        print(f\"- {column}\")\n","        non_numeric_values = final_data[column][check_non_numeric(final_data[column])]\n","        print(f\"  Example non-numeric values: {non_numeric_values.unique()[:5]}\")\n","\n","# Check for NaN or null values\n","null_counts = final_data.isnull().sum()\n","print(\"\\nColumns with null values:\")\n","print(null_counts[null_counts > 0])\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"bSqA4Tyj5r_F","executionInfo":{"status":"ok","timestamp":1734425863199,"user_tz":-60,"elapsed":22,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef830d06-f9aa-4468-80e9-9e9dfae65398"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n"]}],"source":["# Convert 'GDP per capita (current US$)' to numeric\n","final_data['gdp_per_capita'] = pd.to_numeric(final_data['gdp_per_capita'], errors='coerce')\n","\n","# Convert 'Urban population (% of total population)' to numeric\n","final_data['urbanization_rate'] = pd.to_numeric(final_data['urbanization_rate'], errors='coerce')\n","\n","# Verify the data types\n","print(final_data.dtypes)\n"]},{"cell_type":"markdown","metadata":{"id":"wW6xdMZA5r_H"},"source":["### Simple linear regression without environmental awareness (years 1995-2012)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"EuAAW19Y5r_I","executionInfo":{"status":"ok","timestamp":1734425863199,"user_tz":-60,"elapsed":15,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a5393b9b-83b8-407e-b0d3-858e2d7a84e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.123\n","Model:                            OLS   Adj. R-squared:                  0.119\n","Method:                 Least Squares   F-statistic:                     22.84\n","Date:                Tue, 17 Dec 2024   Prob (F-statistic):           0.000360\n","Time:                        08:57:42   Log-Likelihood:                -305.93\n","No. Observations:                 252   AIC:                             615.9\n","Df Residuals:                     250   BIC:                             622.9\n","Df Model:                           1                                         \n","Covariance Type:              cluster                                         \n","==============================================================================================\n","                                 coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------------------\n","Intercept                      1.1042      0.176      6.261      0.000       0.723       1.485\n","transport_trend_per_person     0.1070      0.022      4.780      0.000       0.059       0.155\n","==============================================================================\n","Omnibus:                       49.859   Durbin-Watson:                   0.386\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):               10.994\n","Skew:                          -0.034   Prob(JB):                      0.00410\n","Kurtosis:                       1.979   Cond. No.                         31.1\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n"]}],"source":["# Define the model formula without controls\n","model_formula_no_controls = 'oecd_eps ~ transport_trend_per_person'\n","\n","# Fit the model using ordinary least squares (OLS)\n","# Use clustered standard errors\n","slr = smf.ols(formula=model_formula_no_controls, data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","slr_summary = slr.summary\n","\n","\n","# Print the model summary\n","print(slr.summary())"]},{"cell_type":"markdown","metadata":{"id":"rVGE4dvW5r_J"},"source":["### Multiple linear regression modell without environmental awareness (years 1995-2012)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"EJuuL6ui5r_L","executionInfo":{"status":"ok","timestamp":1734425863684,"user_tz":-60,"elapsed":496,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"87e8a2c7-20cd-4b13-f3d4-84af318cd2ca"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.401\n","Model:                            OLS   Adj. R-squared:                  0.389\n","Method:                 Least Squares   F-statistic:                     12.16\n","Date:                Tue, 17 Dec 2024   Prob (F-statistic):           0.000158\n","Time:                        08:57:43   Log-Likelihood:                -257.76\n","No. Observations:                 252   AIC:                             527.5\n","Df Residuals:                     246   BIC:                             548.7\n","Df Model:                           5                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           3.6613      1.199      3.054      0.009       1.071       6.252\n","transport_trend_per_person     -0.1188      0.067     -1.764      0.101      -0.264       0.027\n","gdp_per_capita                  0.0339      0.006      5.277      0.000       0.020       0.048\n","urbanization_rate              -0.0036      0.017     -0.210      0.837      -0.040       0.033\n","corruption_perception_index     0.0349      0.082      0.425      0.678      -0.142       0.212\n","industry_composition           -0.0593      0.025     -2.406      0.032      -0.113      -0.006\n","==============================================================================\n","Omnibus:                       45.503   Durbin-Watson:                   0.408\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):               10.868\n","Skew:                           0.093   Prob(JB):                      0.00437\n","Kurtosis:                       2.000   Cond. No.                     1.14e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 1.14e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}],"source":["import statsmodels.api as sm\n","\n","# Select the variables for the regression\n","X = final_data[['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']]\n","y = final_data['oecd_eps']\n","\n","# Add a constant term to the independent variables\n","X = sm.add_constant(X)\n","\n","# Fit the regression model\n","mlr = sm.OLS(y, X).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","mlr_summary = mlr.summary\n","\n","# Print the summary of the regression results\n","print(mlr.summary())"]},{"cell_type":"code","source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data_mlr = {\n","    ' ': ['const', 'transport_trend_per_person', 'gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition'],\n","    'coef': [mlr.params['const'], mlr.params['transport_trend_per_person'], mlr.params['gdp_per_capita'], mlr.params['urbanization_rate'], mlr.params['corruption_perception_index'], mlr.params['industry_composition']],\n","    'P>|t|': [mlr.params['const'], mlr.params['transport_trend_per_person'], mlr.params['gdp_per_capita'], mlr.params['urbanization_rate'], mlr.params['corruption_perception_index'], mlr.params['industry_composition']]  # Add p-value\n","}\n","summary_data_mlr = pd.DataFrame(summary_data_mlr).set_index(' ')\n","\n","# Print the summary\n","print(summary_data_mlr[['coef', 'P>|t|']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-y_a4VAr1Htw","executionInfo":{"status":"ok","timestamp":1734426059506,"user_tz":-60,"elapsed":205,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"1292451a-e8a5-40f0-a1d2-fe8e90bd74a8"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["                                 coef     P>|t|\n","                                               \n","const                        3.661304  3.661304\n","transport_trend_per_person  -0.118802 -0.118802\n","gdp_per_capita               0.033904  0.033904\n","urbanization_rate           -0.003565 -0.003565\n","corruption_perception_index  0.034859  0.034859\n","industry_composition        -0.059309 -0.059309\n"]}]},{"cell_type":"code","execution_count":10,"metadata":{"id":"V5xTN4FF5r_N","executionInfo":{"status":"ok","timestamp":1734425863685,"user_tz":-60,"elapsed":15,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"723cc6c6-3421-45df-ce65-51eae8aa8c09"},"outputs":[{"output_type":"stream","name":"stdout","text":["                      coef     P>|t|     2.5 %    97.5 %\n","Model                                                   \n","Without Controls  0.107028  0.000360  0.058651  0.155405\n","With Controls    -0.118802  0.101116 -0.264259  0.026654\n"]}],"source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data = {\n","    'Model': ['Without Controls', 'With Controls'],\n","    'coef': [slr.params['transport_trend_per_person'], mlr.params['transport_trend_per_person']],\n","    '2.5 %': [slr.conf_int().loc['transport_trend_per_person', 0], mlr.conf_int().loc['transport_trend_per_person', 0]],\n","    '97.5 %': [slr.conf_int().loc['transport_trend_per_person', 1], mlr.conf_int().loc['transport_trend_per_person', 1]],\n","    'P>|t|': [slr.pvalues['transport_trend_per_person'], mlr.pvalues['transport_trend_per_person']]  # Add p-value\n","}\n","summary_df = pd.DataFrame(summary_data).set_index('Model')\n","\n","# Print the summary\n","print(summary_df[['coef', 'P>|t|', '2.5 %', '97.5 %']])"]},{"cell_type":"code","source":["#Table 2: Basic OLS table\n","# Creating models with progressive controls\n","model1 = smf.ols('oecd_eps ~ transport_trend_per_person', data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']})\n","model2 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita', data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']})\n","model3 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate', data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']})\n","model4 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition', data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']})\n","model5 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition + corruption_perception_index', data=final_data).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']})\n","\n","# Using Stargazer to create a regression table\n","stargazer = Stargazer([model1, model2, model3, model4, model5])\n","\n","# Displaying the table\n","stargazer.significant_digits(3)\n","stargazer"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":499},"id":"xaT4gO-I9oEc","executionInfo":{"status":"ok","timestamp":1734425864286,"user_tz":-60,"elapsed":611,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"b0e010f6-bf0a-4260-fb9b-5176d950db62"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<stargazer.stargazer.Stargazer at 0x7dc4461052a0>"],"text/html":["<table style=\"text-align:center\"><tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align:left\"></td><td colspan=\"5\"><em>Dependent variable: oecd_eps</em></td></tr><tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td><td>(3)</td><td>(4)</td><td>(5)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","\n","<tr><td style=\"text-align:left\">Intercept</td><td>1.104<sup>***</sup></td><td>1.559<sup>***</sup></td><td>1.404<sup></sup></td><td>3.710<sup>***</sup></td><td>3.661<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.176)</td><td>(0.202)</td><td>(0.944)</td><td>(1.313)</td><td>(1.199)</td></tr>\n","<tr><td style=\"text-align:left\">corruption_perception_index</td><td></td><td></td><td></td><td></td><td>0.035<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td></td><td>(0.082)</td></tr>\n","<tr><td style=\"text-align:left\">gdp_per_capita</td><td></td><td>0.030<sup>***</sup></td><td>0.030<sup>***</sup></td><td>0.034<sup>***</sup></td><td>0.034<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td>(0.009)</td><td>(0.009)</td><td>(0.007)</td><td>(0.006)</td></tr>\n","<tr><td style=\"text-align:left\">industry_composition</td><td></td><td></td><td></td><td>-0.058<sup>**</sup></td><td>-0.059<sup>**</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td>(0.024)</td><td>(0.025)</td></tr>\n","<tr><td style=\"text-align:left\">transport_trend_per_person</td><td>0.107<sup>***</sup></td><td>-0.050<sup></sup></td><td>-0.058<sup></sup></td><td>-0.099<sup></sup></td><td>-0.119<sup>*</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.022)</td><td>(0.039)</td><td>(0.055)</td><td>(0.069)</td><td>(0.067)</td></tr>\n","<tr><td style=\"text-align:left\">urbanization_rate</td><td></td><td></td><td>0.003<sup></sup></td><td>-0.004<sup></sup></td><td>-0.004<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td>(0.018)</td><td>(0.018)</td><td>(0.017)</td></tr>\n","\n","<td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align: left\">Observations</td><td>252</td><td>252</td><td>252</td><td>252</td><td>252</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.123</td><td>0.323</td><td>0.324</td><td>0.400</td><td>0.401</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>0.119</td><td>0.318</td><td>0.315</td><td>0.390</td><td>0.389</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.818 (df=250)</td><td>0.720 (df=249)</td><td>0.721 (df=248)</td><td>0.681 (df=247)</td><td>0.681 (df=246)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>22.844<sup>***</sup> (df=1; 250)</td><td>7.153<sup>***</sup> (df=2; 249)</td><td>5.948<sup>***</sup> (df=3; 248)</td><td>12.483<sup>***</sup> (df=4; 247)</td><td>12.161<sup>***</sup> (df=5; 246)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td><td colspan=\"5\" style=\"text-align: right\"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr></table>"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"2j0EHEbk5r_N"},"source":["### Including fixed effects"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"A5XvTwRd5r_O","executionInfo":{"status":"ok","timestamp":1734425864657,"user_tz":-60,"elapsed":379,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"da894df3-1d6e-4624-fbe1-32f2dd649b73"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL           1.652546                   10.103135       34.315782   \n","CHE           2.341435                   10.487592       57.108660   \n","CZE           1.705787                    6.269252       12.502298   \n","DEU           2.496528                   10.486481       33.998951   \n","DNK           2.836111                   10.705475       45.135722   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","BEL                   97.301556                     6.647222   \n","CHE                   73.517111                     8.812778   \n","CZE                   73.774833                     4.938889   \n","DEU                   75.652778                     7.906111   \n","DNK                   85.770667                     9.160000   \n","\n","              industry_composition          IV  \n","country_code                                    \n","BEL                      23.246218  461.222222  \n","CHE                      26.100550  501.555556  \n","CZE                      33.935812  374.944444  \n","DEU                      27.241305  526.000000  \n","DNK                      21.967615  354.388889  "],"text/html":["\n","  <div id=\"df-844e3a65-0d8c-4dfd-a10b-cf82f24fde51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>1.652546</td>\n","      <td>10.103135</td>\n","      <td>34.315782</td>\n","      <td>97.301556</td>\n","      <td>6.647222</td>\n","      <td>23.246218</td>\n","      <td>461.222222</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>2.341435</td>\n","      <td>10.487592</td>\n","      <td>57.108660</td>\n","      <td>73.517111</td>\n","      <td>8.812778</td>\n","      <td>26.100550</td>\n","      <td>501.555556</td>\n","    </tr>\n","    <tr>\n","      <th>CZE</th>\n","      <td>1.705787</td>\n","      <td>6.269252</td>\n","      <td>12.502298</td>\n","      <td>73.774833</td>\n","      <td>4.938889</td>\n","      <td>33.935812</td>\n","      <td>374.944444</td>\n","    </tr>\n","    <tr>\n","      <th>DEU</th>\n","      <td>2.496528</td>\n","      <td>10.486481</td>\n","      <td>33.998951</td>\n","      <td>75.652778</td>\n","      <td>7.906111</td>\n","      <td>27.241305</td>\n","      <td>526.000000</td>\n","    </tr>\n","    <tr>\n","      <th>DNK</th>\n","      <td>2.836111</td>\n","      <td>10.705475</td>\n","      <td>45.135722</td>\n","      <td>85.770667</td>\n","      <td>9.160000</td>\n","      <td>21.967615</td>\n","      <td>354.388889</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-844e3a65-0d8c-4dfd-a10b-cf82f24fde51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-844e3a65-0d8c-4dfd-a10b-cf82f24fde51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-844e3a65-0d8c-4dfd-a10b-cf82f24fde51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d12a436b-4959-44bf-bb7e-9901d067668c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d12a436b-4959-44bf-bb7e-9901d067668c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d12a436b-4959-44bf-bb7e-9901d067668c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mean_final_data","summary":"{\n  \"name\": \"mean_final_data\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"HUN\",\n          \"POL\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40404528363024844,\n        \"min\": 1.4368055595291833,\n        \"max\": 2.836111108462011,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1.80185184544987,\n          1.6884259449111179,\n          1.6525462865829432\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9061866929756213,\n        \"min\": 3.969895001484197,\n        \"max\": 11.594951076315795,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          4.867046106559398,\n          3.969895001484197,\n          10.103134991493668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.10330978329025,\n        \"min\": 7.837828318311919,\n        \"max\": 61.35495418126042,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          9.131706666387789,\n          7.837828318311919,\n          34.31578154709006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.419459988111232,\n        \"min\": 55.653055555555554,\n        \"max\": 97.30155555555555,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          66.41783333333333,\n          61.3825,\n          97.30155555555555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9138749766901597,\n        \"min\": 4.122222222222223,\n        \"max\": 9.456666666666667,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          4.9511111111111115,\n          4.4911111111111115,\n          6.647222222222222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.45083826258704,\n        \"min\": 20.001752786111112,\n        \"max\": 34.769308091666666,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          26.450135469444447,\n          29.563958152222224,\n          23.246217850555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83.31362210918029,\n        \"min\": 253.22222222222223,\n        \"max\": 526.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          268.0,\n          325.77777777777777,\n          461.22222222222223\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["# compute means by country\n","y = \"oecd_eps\"\n","X = ['transport_trend_per_person', 'gdp_per_capita',\n","    'urbanization_rate','corruption_perception_index', 'industry_composition', 'IV']\n","\n","mean_final_data = final_data.groupby(\"country_code\")[[y] + X].mean()\n","mean_final_data.head()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"Em1B3HRz5r_O","executionInfo":{"status":"ok","timestamp":1734425864658,"user_tz":-60,"elapsed":13,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"114330d6-0922-40ea-c55c-bced4643a54f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL          -0.881713                   -1.110769       -5.901955   \n","BEL          -0.881713                   -1.004358       -6.826226   \n","BEL          -0.881713                   -0.867430       -9.494843   \n","BEL          -0.881713                   -0.372837       -8.977338   \n","BEL          -0.881713                   -0.048065       -9.062980   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","BEL                   -0.524556                    -1.397222   \n","BEL                   -0.450556                    -1.397222   \n","BEL                   -0.377556                    -1.397222   \n","BEL                   -0.305556                    -1.247222   \n","BEL                   -0.236556                    -1.347222   \n","\n","              industry_composition         IV  \n","country_code                                   \n","BEL                       2.799596 -40.222222  \n","BEL                       2.564669 -34.222222  \n","BEL                       2.863648 -28.222222  \n","BEL                       2.324468 -21.222222  \n","BEL                       1.479626 -13.222222  "],"text/html":["\n","  <div id=\"df-6912e7cc-2ee2-40f3-96d2-8abfb28ab0fd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-1.110769</td>\n","      <td>-5.901955</td>\n","      <td>-0.524556</td>\n","      <td>-1.397222</td>\n","      <td>2.799596</td>\n","      <td>-40.222222</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-1.004358</td>\n","      <td>-6.826226</td>\n","      <td>-0.450556</td>\n","      <td>-1.397222</td>\n","      <td>2.564669</td>\n","      <td>-34.222222</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.867430</td>\n","      <td>-9.494843</td>\n","      <td>-0.377556</td>\n","      <td>-1.397222</td>\n","      <td>2.863648</td>\n","      <td>-28.222222</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.372837</td>\n","      <td>-8.977338</td>\n","      <td>-0.305556</td>\n","      <td>-1.247222</td>\n","      <td>2.324468</td>\n","      <td>-21.222222</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.048065</td>\n","      <td>-9.062980</td>\n","      <td>-0.236556</td>\n","      <td>-1.347222</td>\n","      <td>1.479626</td>\n","      <td>-13.222222</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6912e7cc-2ee2-40f3-96d2-8abfb28ab0fd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6912e7cc-2ee2-40f3-96d2-8abfb28ab0fd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6912e7cc-2ee2-40f3-96d2-8abfb28ab0fd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-335c524f-fca7-4e51-a6a5-3ae8238533fe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-335c524f-fca7-4e51-a6a5-3ae8238533fe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-335c524f-fca7-4e51-a6a5-3ae8238533fe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demeaned_final_data","summary":"{\n  \"name\": \"demeaned_final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"HUN\",\n          \"POL\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7792760729246616,\n        \"min\": -1.3983796437581386,\n        \"max\": 1.8203704953193334,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          0.3252313401963556,\n          0.5493055582046553,\n          1.269907547367982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5037997007991495,\n        \"min\": -1.7114100953102156,\n        \"max\": 0.9863528094363536,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -0.3653607301794821,\n          0.39554859023722244,\n          -0.919911866707638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.97959196097578,\n        \"min\": -26.55149077538662,\n        \"max\": 40.82096511711358,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -4.3874944020913995,\n          -11.300710283843863,\n          -10.175403921691263\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0024435582256315,\n        \"min\": -3.2222222222222143,\n        \"max\": 3.260166666666663,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -1.5888333333333406,\n          -0.1155555555555452,\n          -0.9891666666666765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6779404662547776,\n        \"min\": -5.86,\n        \"max\": 4.561111111111111,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          -0.4911111111111115,\n          -0.11277777777777764,\n          0.2666666666666657\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8349137732416325,\n        \"min\": -7.137813951666665,\n        \"max\": 6.042282468333333,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          1.6452981605555514,\n          1.065933139444443,\n          1.6501608361111089\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.54449619130417,\n        \"min\": -130.77777777777777,\n        \"max\": 166.22222222222223,\n        \"num_unique_values\": 225,\n        \"samples\": [\n          5.7777777777777715,\n          -31.77777777777777,\n          -29.333333333333314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"source":["# compute demeaned df\n","demeaned_final_data = (final_data\n","               .set_index(\"country_code\") # set the index as the person indicator\n","               [[y] + X]\n","               - mean_final_data) # subtract the mean data\n","\n","demeaned_final_data.head()"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"CL4GlleK5r_P","executionInfo":{"status":"ok","timestamp":1734425865149,"user_tz":-60,"elapsed":502,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":169},"outputId":"0939bf53-3dcd-4532-b916-aea2427c29d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<tr>\n","               <td></td>                  <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th>                   <td>-3.816e-17</td> <td>    0.028</td> <td>-1.38e-15</td> <td> 1.000</td> <td>   -0.054</td> <td>    0.054</td>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>  <td>    0.4051</td> <td>    0.066</td> <td>    6.100</td> <td> 0.000</td> <td>    0.274</td> <td>    0.536</td>\n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>         <td>    0.0364</td> <td>    0.004</td> <td>   10.242</td> <td> 0.000</td> <td>    0.029</td> <td>    0.043</td>\n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>      <td>    0.0799</td> <td>    0.037</td> <td>    2.164</td> <td> 0.031</td> <td>    0.007</td> <td>    0.153</td>\n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th> <td>    0.0643</td> <td>    0.043</td> <td>    1.507</td> <td> 0.133</td> <td>   -0.020</td> <td>    0.148</td>\n","</tr>\n","<tr>\n","  <th>industry_composition</th>        <td>   -0.1083</td> <td>    0.016</td> <td>   -6.933</td> <td> 0.000</td> <td>   -0.139</td> <td>   -0.078</td>\n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}                     &   -3.816e-17  &        0.028     & -1.38e-15  &         1.000        &       -0.054    &        0.054     \\\\\n\\textbf{transport\\_trend\\_per\\_person} &       0.4051  &        0.066     &     6.100  &         0.000        &        0.274    &        0.536     \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0364  &        0.004     &    10.242  &         0.000        &        0.029    &        0.043     \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.0799  &        0.037     &     2.164  &         0.031        &        0.007    &        0.153     \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0643  &        0.043     &     1.507  &         0.133        &       -0.020    &        0.148     \\\\\n\\textbf{industry\\_composition}         &      -0.1083  &        0.016     &    -6.933  &         0.000        &       -0.139    &       -0.078     \\\\\n\\bottomrule\n\\end{tabular}\n\\end{center}"},"metadata":{},"execution_count":14}],"source":["# compute with ols fe estimator\n","est_fe = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition\", data=demeaned_final_data).fit()\n","est_fe.summary().tables[1]"]},{"cell_type":"code","source":["# Canned method WITHOUT clustering\n","est_fe_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition + EntityEffects\",\n","                            data=final_data.set_index([\"country_code\", \"year\"]))\n","result = est_fe_canned.fit()\n","result.summary.tables[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"ffPKNShnRi47","executionInfo":{"status":"ok","timestamp":1734425865411,"user_tz":-60,"elapsed":268,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"33fe6cd3-5403-46ba-973b-6e5b499d9eeb"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<caption>Parameter Estimates</caption>\n","<tr>\n","               <td></td>               <th>Parameter</th> <th>Std. Err.</th> <th>T-stat</th>  <th>P-value</th> <th>Lower CI</th> <th>Upper CI</th>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>   <td>0.4051</td>    <td>0.0682</td>   <td>5.9364</td>  <td>0.0000</td>   <td>0.2707</td>   <td>0.5395</td> \n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>          <td>0.0364</td>    <td>0.0037</td>   <td>9.9682</td>  <td>0.0000</td>   <td>0.0292</td>   <td>0.0436</td> \n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>       <td>0.0799</td>    <td>0.0379</td>   <td>2.1063</td>  <td>0.0363</td>   <td>0.0052</td>   <td>0.1546</td> \n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th>  <td>0.0643</td>    <td>0.0439</td>   <td>1.4667</td>  <td>0.1438</td>   <td>-0.0221</td>  <td>0.1508</td> \n","</tr>\n","<tr>\n","  <th>industry_composition</th>         <td>-0.1083</td>   <td>0.0160</td>   <td>-6.7476</td> <td>0.0000</td>   <td>-0.1399</td>  <td>-0.0767</td>\n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{Parameter} & \\textbf{Std. Err.} & \\textbf{T-stat} & \\textbf{P-value} & \\textbf{Lower CI} & \\textbf{Upper CI}  \\\\\n\\midrule\n\\textbf{transport\\_trend\\_per\\_person} &       0.4051       &       0.0682       &      5.9364     &      0.0000      &       0.2707      &       0.5395       \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0364       &       0.0037       &      9.9682     &      0.0000      &       0.0292      &       0.0436       \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.0799       &       0.0379       &      2.1063     &      0.0363      &       0.0052      &       0.1546       \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0643       &       0.0439       &      1.4667     &      0.1438      &      -0.0221      &       0.1508       \\\\\n\\textbf{industry\\_composition}         &      -0.1083       &       0.0160       &     -6.7476     &      0.0000      &      -0.1399      &      -0.0767       \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{Parameter Estimates}\n\\end{center}"},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Canned method with clustering on country level\n","est_fe_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + corruption_perception_index + industry_composition + EntityEffects\",\n","                            data=final_data.set_index([\"country_code\", \"year\"]))\n","\n","result_FE = est_fe_canned.fit(cov_type='clustered', cluster_entity=True)\n","result_FE.summary.tables[1]\n","\n","# Store the model summary in a variable\n","mlrFE_summary = result_FE.summary\n","\n","\n","# Print the summary of the regression results\n","print(mlrFE_summary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJMGv8GSSj6E","executionInfo":{"status":"ok","timestamp":1734427775852,"user_tz":-60,"elapsed":380,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"a3c16a90-3440-4e5d-b0e5-43ce0e8c6839"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["                          PanelOLS Estimation Summary                           \n","================================================================================\n","Dep. Variable:               oecd_eps   R-squared:                        0.6908\n","Estimator:                   PanelOLS   R-squared (Between):             -9.5195\n","No. Observations:                 252   R-squared (Within):               0.6908\n","Date:                Tue, Dec 17 2024   R-squared (Overall):             -8.2823\n","Time:                        09:29:35   Log-likelihood                   -146.32\n","Cov. Estimator:             Clustered                                           \n","                                        F-statistic:                      104.13\n","Entities:                          14   P-value                           0.0000\n","Avg Obs:                       18.000   Distribution:                   F(5,233)\n","Min Obs:                       18.000                                           \n","Max Obs:                       18.000   F-statistic (robust):             25.580\n","                                        P-value                           0.0000\n","Time periods:                      18   Distribution:                   F(5,233)\n","Avg Obs:                       14.000                                           \n","Min Obs:                       14.000                                           \n","Max Obs:                       14.000                                           \n","                                                                                \n","                                      Parameter Estimates                                      \n","===============================================================================================\n","                             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n","-----------------------------------------------------------------------------------------------\n","transport_trend_per_person      0.4051     0.1578     2.5680     0.0109      0.0943      0.7159\n","gdp_per_capita                  0.0364     0.0078     4.6599     0.0000      0.0210      0.0518\n","urbanization_rate               0.0799     0.1142     0.6992     0.4851     -0.1452      0.3049\n","corruption_perception_index     0.0643     0.0491     1.3113     0.1910     -0.0323      0.1610\n","industry_composition           -0.1083     0.0242    -4.4755     0.0000     -0.1560     -0.0606\n","===============================================================================================\n","\n","F-test for Poolability: 25.482\n","P-value: 0.0000\n","Distribution: F(13,233)\n","\n","Included effects: Entity\n"]}]},{"cell_type":"code","source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data_FE = {\n","    ' ': ['transport_trend_per_person', 'gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition'],\n","    'coef': [result_FE.params['transport_trend_per_person'], result_FE.params['gdp_per_capita'], result_FE.params['urbanization_rate'], result_FE.params['corruption_perception_index'], result_FE.params['industry_composition']],\n","    'P>|t|': [result_FE.params['transport_trend_per_person'], result_FE.params['gdp_per_capita'], result_FE.params['urbanization_rate'], result_FE.params['corruption_perception_index'], result_FE.params['industry_composition']]  # Add p-value\n","}\n","summary_data_FE = pd.DataFrame(summary_data_FE).set_index(' ')\n","\n","# Print the summary\n","print(summary_data_FE[['coef', 'P>|t|']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iHbGk68R8D_R","executionInfo":{"status":"ok","timestamp":1734427867295,"user_tz":-60,"elapsed":526,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"f9a5ac15-2860-4fc0-988a-ea8a097e597c"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["                                 coef     P>|t|\n","                                               \n","transport_trend_per_person   0.405098  0.405098\n","gdp_per_capita               0.036437  0.036437\n","urbanization_rate            0.079856  0.079856\n","corruption_perception_index  0.064350  0.064350\n","industry_composition        -0.108295 -0.108295\n"]}]},{"cell_type":"code","source":["# NO FE included in this one here!!\n","\n","# compute with ols pooled\n","est_pool_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition\",\n","                            data=final_data.set_index([\"country_code\", \"year\"]))\n","\n","result = est_pool_canned.fit(cov_type='clustered', cluster_entity=True)\n","result.summary.tables[1]"],"metadata":{"id":"6Ynnx_H5eYAV","executionInfo":{"status":"ok","timestamp":1734425865971,"user_tz":-60,"elapsed":598,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":165},"outputId":"0a7121c4-cbf5-49cc-c628-89ef3bd7b5fd"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<caption>Parameter Estimates</caption>\n","<tr>\n","               <td></td>               <th>Parameter</th> <th>Std. Err.</th> <th>T-stat</th>  <th>P-value</th> <th>Lower CI</th> <th>Upper CI</th>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>   <td>-0.1405</td>   <td>0.0777</td>   <td>-1.8090</td> <td>0.0717</td>   <td>-0.2935</td>  <td>0.0125</td> \n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>          <td>0.0295</td>    <td>0.0064</td>   <td>4.5932</td>  <td>0.0000</td>   <td>0.0169</td>   <td>0.0422</td> \n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>       <td>0.0277</td>    <td>0.0173</td>   <td>1.6035</td>  <td>0.1101</td>   <td>-0.0063</td>  <td>0.0618</td> \n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th>  <td>0.0665</td>    <td>0.1167</td>   <td>0.5692</td>  <td>0.5697</td>   <td>-0.1635</td>  <td>0.2964</td> \n","</tr>\n","<tr>\n","  <th>industry_composition</th>         <td>-0.0086</td>   <td>0.0234</td>   <td>-0.3659</td> <td>0.7148</td>   <td>-0.0547</td>  <td>0.0375</td> \n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{Parameter} & \\textbf{Std. Err.} & \\textbf{T-stat} & \\textbf{P-value} & \\textbf{Lower CI} & \\textbf{Upper CI}  \\\\\n\\midrule\n\\textbf{transport\\_trend\\_per\\_person} &      -0.1405       &       0.0777       &     -1.8090     &      0.0717      &      -0.2935      &       0.0125       \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0295       &       0.0064       &      4.5932     &      0.0000      &       0.0169      &       0.0422       \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.0277       &       0.0173       &      1.6035     &      0.1101      &      -0.0063      &       0.0618       \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0665       &       0.1167       &      0.5692     &      0.5697      &      -0.1635      &       0.2964       \\\\\n\\textbf{industry\\_composition}         &      -0.0086       &       0.0234       &     -0.3659     &      0.7148      &      -0.0547      &       0.0375       \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{Parameter Estimates}\n\\end{center}"},"metadata":{},"execution_count":17}]},{"cell_type":"code","execution_count":18,"metadata":{"id":"eHo6620u5r_Q","executionInfo":{"status":"ok","timestamp":1734425867411,"user_tz":-60,"elapsed":1452,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":468},"outputId":"12f56cd7-a082-450d-c700-657d047d76f5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='transport_trend_per_person', ylabel='oecd_eps'>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# estimate ols and store fitted values\n","est_ols = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=final_data).fit()\n","final_data[\"fitted_values\"] = est_ols.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=final_data, color = \"r\", s = 20)\n","\n","# plot ols fit line (crossing fitted values)\n","sns.lineplot(x='transport_trend_per_person', y='fitted_values', data=final_data)"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"knrOnvH95r_Q","executionInfo":{"status":"ok","timestamp":1734425871096,"user_tz":-60,"elapsed":3696,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":490},"outputId":"0aa91822-6621-4d42-9ffb-de922ba74495"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Environmental policy stringency')"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["# get number of countries\n","cou = np.unique(final_data.loc[:,\"country_code\"].values)\n","colors = sns.color_palette(n_colors=len(cou)).as_hex()\n","\n","# estimate ols and store fitted values\n","est_ols = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=final_data).fit()\n","final_data[\"fitted_values\"] = est_ols.fittedvalues\n","\n","# estimate fe with dummies and store fitted values\n","est_fe = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + C(country_code)\", data=final_data).fit()\n","final_data[\"fitted_values_fe\"] = est_fe.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=final_data, hue=\"country_code\", legend = False,\n","                palette = colors)\n","\n","# plot fe fit lines (crossing fitted values)\n","for i in range(len(cou)):\n","    df_temp = final_data.query(f\"country_code=='{cou[i]}'\")\n","    sns.lineplot(x='transport_trend_per_person', y='fitted_values_fe', data=df_temp, hue=\"country_code\", legend = False)\n","\n","# Add axis labels with the desired names\n","plt.title('Inclusion of entity fixed effects')\n","plt.xlabel('Kilometers driven per person')\n","plt.ylabel('Environmental policy stringency')\n","\n","# Explanation of what we see here: This graph includes only the entity FE for transport trend per person. the model which shows 0.4051 has a significantly lower coefficient\n","# This stems from the fact that in the other model the Fe for the parameters are included too which lowers the parameter of transport_trend_per person"]},{"cell_type":"markdown","metadata":{"id":"8ZvvCnro5r_R"},"source":["## Double machine learning"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"BZJLzhWa5r_R","executionInfo":{"status":"ok","timestamp":1734425871098,"user_tz":-60,"elapsed":24,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6f2ba7ce-84dc-4594-a3f0-31bd35555422"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 252\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 252 entries, 0 to 251\n","Columns: 15 entries, country_code to fitted_values_fe\n","dtypes: float64(12), int64(2), object(1)\n","memory usage: 29.7+ KB\n","\n"]}],"source":["# Create a DoubleMLClusterData object to prepare the data for Double Machine Learning.\n","# This object specifies the outcome variable ('y'), treatment variable ('x'),\n","# clustering variable ('id'), and confounders ('x_cols').\n","obj_dml_data_from_df = DoubleMLClusterData(final_data, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","\n","# Print the DoubleMLClusterData object to display its properties and data information.\n","print(obj_dml_data_from_df)"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"7judJ5L15r_S","executionInfo":{"status":"ok","timestamp":1734426905206,"user_tz":-60,"elapsed":251,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1799a6a4-ea7c-4694-9fd9-c07b791cc292"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t    P>|t|     2.5 %  \\\n","transport_trend_per_person -0.107545  0.047015 -2.287448  0.02217 -0.199692   \n","\n","                              97.5 %  \n","transport_trend_per_person -0.015397  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_data_from_df,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_summary = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"AN4o5NuI5r_S","executionInfo":{"status":"ok","timestamp":1734426912159,"user_tz":-60,"elapsed":5519,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5e010ef7-7af2-418a-cb7e-9b70287f2cb0"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.237176  0.070186 -3.379242  0.000727 -0.374739   \n","\n","                              97.5 %  \n","transport_trend_per_person -0.099614  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_data_from_df,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_summary = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":62,"metadata":{"id":"LsaUsKHj5r_T","executionInfo":{"status":"ok","timestamp":1734426913367,"user_tz":-60,"elapsed":486,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2609e8b-3402-4521-b1d2-89928451c1b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.035701  0.059486 -0.600155  0.548403 -0.152291   \n","\n","                             97.5 %  \n","transport_trend_per_person  0.08089  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(n_jobs=1,  # Number of parallel threads used to run XGBoost\n","                     objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","                     eta=0.1,  # Learning rate\n","                     n_estimators=35)  # Number of boosting rounds (trees)\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR(obj_dml_data_from_df,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_summary = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"8pQN-Dgl5r_T","executionInfo":{"status":"ok","timestamp":1734426913368,"user_tz":-60,"elapsed":12,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"49792cba-6ac7-4991-d1dd-4d914d47fff6"},"outputs":[{"output_type":"stream","name":"stdout","text":["            coef     P>|t|\n","slr     0.107028  0.000360\n","mlr    -0.118802  0.101116\n","forest -0.237176  0.000727\n","tree   -0.107545  0.022170\n","xgb    -0.035701  0.548403\n"]}],"source":["# Concatenate the summaries and update the index\n","plr_summary = pd.concat([summary_df, forest_summary, tree_summary, boost_summary])\n","plr_summary.index = ['slr', 'mlr','forest', 'tree', 'xgb']\n","\n","# Print the updated summary\n","print(plr_summary[['coef', 'P>|t|']])"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"GALAc2on5r_U","executionInfo":{"status":"ok","timestamp":1734425893121,"user_tz":-60,"elapsed":2175,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"44dc48e2-99a0-4f5a-c851-f1ff256b7e60"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary.shape[0]), np.nan)\n","errors[0, :] = plr_summary['coef'] - plr_summary['2.5 %']\n","errors[1, :] = plr_summary['97.5 %'] - plr_summary['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary.index, plr_summary['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary.index[:2], plr_summary['coef'][:2], yerr=errors[:, :2], fmt='o', color='orange', capsize=5)\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='r', linestyle='--')\n","\n","plt.title('Summary of the regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"]},{"cell_type":"markdown","metadata":{"id":"acfzNDsV5r_U"},"source":["### Including Fixed Effects in the DML\n","\n"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"Mxgn40m35r_X","executionInfo":{"status":"ok","timestamp":1734425893122,"user_tz":-60,"elapsed":22,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"df038d42-86ac-483e-bfef-95768eccf7c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 252\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 252 entries, 0 to 251\n","Columns: 8 entries, country_code to IV\n","dtypes: float64(7), object(1)\n","memory usage: 15.9+ KB\n","\n"]}],"source":["# Reset the index to bring 'country_code' back as a column\n","demeaned_final_data = demeaned_final_data.reset_index()\n","\n","obj_dml_diff = DoubleMLClusterData(demeaned_final_data, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","print(obj_dml_diff)"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"CsRWTl1E5r_X","executionInfo":{"status":"ok","timestamp":1734425907147,"user_tz":-60,"elapsed":14039,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a3a575ff-7d60-44d4-da73-0a0a23767668"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.096351  0.115275  0.835833  0.403249 -0.129585   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.322287  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_diff,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_diff_summary = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_diff_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"yExablZs5r_Y","executionInfo":{"status":"ok","timestamp":1734425907148,"user_tz":-60,"elapsed":17,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"231d9b27-34f3-4c79-add1-b3ede14afc22"},"outputs":[{"output_type":"stream","name":"stdout","text":["                               coef  std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.20743  0.12706  1.632531  0.102568 -0.041604   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.456463  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_diff,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_diff_summary = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"6q3EMm6n5r_Y","executionInfo":{"status":"ok","timestamp":1734425908427,"user_tz":-60,"elapsed":1291,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"42fab62d-74c2-460f-96a8-9802788a2808"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef  std err        t     P>|t|    2.5 %  \\\n","transport_trend_per_person  0.268038  0.09717  2.75846  0.005807  0.07759   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.458487  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(\n","    n_jobs=1,  # Number of parallel threads used to run XGBoost\n","    objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","    eta=0.1,  # Learning rate\n","    n_estimators=50,  # Increased number of boosting rounds (trees)\n","    max_depth=7,  # Limit tree depth to prevent overfitting\n","    subsample=0.8,  # Use 80% of data for each tree to add robustness\n","    colsample_bytree=0.8  # Use 80% of features for each tree to reduce complexity\n",")\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR( obj_dml_diff,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_diff_summary = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_diff_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","source":["# Concatenate the summaries, reset the index, and then rename\n","# Convert mlrFE_summary to DataFrame\n","\n","#Instead, extract the table as HTML and read it into a DataFrame\n","mlrFE_summary = mlrFE_summary.tables[1].as_html() # Get the desired table as HTML\n","mlrFE_summary = pd.read_html(mlrFE_summary, header=0, index_col=0)[0] # Read HTML into DataFrame\n","\n","mlrFE_summary = pd.DataFrame(mlrFE_summary)\n","# Set first row as index and rename columns\n","mlrFE_summary = mlrFE_summary.rename(columns={\n","    'Parameter': 'coef',\n","    'Std. Err.': 'std err',\n","    'T-stat': 't',\n","    'P-value': 'P>|t|',\n","    'Lower CI': '2.5 %',\n","    'Upper CI': '97.5 %'\n","})\n","\n","# Keep only the transport_trend_per_person row\n","mlrFE_summary"],"metadata":{"id":"VmdJ9Tf50sfu","executionInfo":{"status":"ok","timestamp":1734425908428,"user_tz":-60,"elapsed":20,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":263},"outputId":"e2e61025-a394-4a42-838e-6a3a63f40a24"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-30-17e6ac29f06f>:6: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlrFE_summary = pd.read_html(mlrFE_summary, header=0, index_col=0)[0] # Read HTML into DataFrame\n"]},{"output_type":"execute_result","data":{"text/plain":["                               coef  std err       t   P>|t|   2.5 %  97.5 %\n","transport_trend_per_person   0.4051   0.1578  2.5680  0.0109  0.0943  0.7159\n","gdp_per_capita               0.0364   0.0078  4.6599  0.0000  0.0210  0.0518\n","urbanization_rate            0.0799   0.1142  0.6992  0.4851 -0.1452  0.3049\n","corruption_perception_index  0.0643   0.0491  1.3113  0.1910 -0.0323  0.1610\n","industry_composition        -0.1083   0.0242 -4.4755  0.0000 -0.1560 -0.0606"],"text/html":["\n","  <div id=\"df-5ae9a47a-6ba9-4737-a078-291c005ccf91\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.4051</td>\n","      <td>0.1578</td>\n","      <td>2.5680</td>\n","      <td>0.0109</td>\n","      <td>0.0943</td>\n","      <td>0.7159</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>0.0364</td>\n","      <td>0.0078</td>\n","      <td>4.6599</td>\n","      <td>0.0000</td>\n","      <td>0.0210</td>\n","      <td>0.0518</td>\n","    </tr>\n","    <tr>\n","      <th>urbanization_rate</th>\n","      <td>0.0799</td>\n","      <td>0.1142</td>\n","      <td>0.6992</td>\n","      <td>0.4851</td>\n","      <td>-0.1452</td>\n","      <td>0.3049</td>\n","    </tr>\n","    <tr>\n","      <th>corruption_perception_index</th>\n","      <td>0.0643</td>\n","      <td>0.0491</td>\n","      <td>1.3113</td>\n","      <td>0.1910</td>\n","      <td>-0.0323</td>\n","      <td>0.1610</td>\n","    </tr>\n","    <tr>\n","      <th>industry_composition</th>\n","      <td>-0.1083</td>\n","      <td>0.0242</td>\n","      <td>-4.4755</td>\n","      <td>0.0000</td>\n","      <td>-0.1560</td>\n","      <td>-0.0606</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ae9a47a-6ba9-4737-a078-291c005ccf91')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5ae9a47a-6ba9-4737-a078-291c005ccf91 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5ae9a47a-6ba9-4737-a078-291c005ccf91');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-33260cf6-1058-40a9-a631-4917ddf5d476\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33260cf6-1058-40a9-a631-4917ddf5d476')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-33260cf6-1058-40a9-a631-4917ddf5d476 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_19e0d25a-7735-47e7-b13c-dbcaaa463a0c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlrFE_summary')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_19e0d25a-7735-47e7-b13c-dbcaaa463a0c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlrFE_summary');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlrFE_summary","summary":"{\n  \"name\": \"mlrFE_summary\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18847825338749297,\n        \"min\": -0.1083,\n        \"max\": 0.4051,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0364,\n          -0.1083,\n          0.0799\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06337161825296873,\n        \"min\": 0.0078,\n        \"max\": 0.1578,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0078,\n          0.0242,\n          0.1142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.391560750893311,\n        \"min\": -4.4755,\n        \"max\": 4.6599,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.6599,\n          -4.4755,\n          0.6992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21067037048431844,\n        \"min\": 0.0,\n        \"max\": 0.4851,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          0.191,\n          0.0109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10755646424088142,\n        \"min\": -0.156,\n        \"max\": 0.0943,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.021,\n          -0.156,\n          -0.1452\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3010679408372801,\n        \"min\": -0.0606,\n        \"max\": 0.7159,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0518,\n          -0.0606,\n          0.3049\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["mlrFE_summary = mlrFE_summary.iloc[0:1] # Select the row with the coefficient for 'transport_trend_per_person'"],"metadata":{"id":"0-Gkmoor_6a0","executionInfo":{"status":"ok","timestamp":1734425908430,"user_tz":-60,"elapsed":16,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["mlrFE_summary"],"metadata":{"id":"Fx8bqSGiAYTY","executionInfo":{"status":"ok","timestamp":1734425908826,"user_tz":-60,"elapsed":410,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":89},"outputId":"4fad07da-b0fc-4fc3-d2c9-f36938b56d7e"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              coef  std err      t   P>|t|   2.5 %  97.5 %\n","transport_trend_per_person  0.4051   0.1578  2.568  0.0109  0.0943  0.7159"],"text/html":["\n","  <div id=\"df-e9ff3b76-8290-44ce-b310-951450e80705\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.4051</td>\n","      <td>0.1578</td>\n","      <td>2.568</td>\n","      <td>0.0109</td>\n","      <td>0.0943</td>\n","      <td>0.7159</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9ff3b76-8290-44ce-b310-951450e80705')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e9ff3b76-8290-44ce-b310-951450e80705 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e9ff3b76-8290-44ce-b310-951450e80705');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_703e73fd-551f-400a-9522-54fe8b76ee3e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlrFE_summary')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_703e73fd-551f-400a-9522-54fe8b76ee3e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlrFE_summary');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlrFE_summary","summary":"{\n  \"name\": \"mlrFE_summary\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.4051,\n        \"max\": 0.4051,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.4051\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1578,\n        \"max\": 0.1578,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.568,\n        \"max\": 2.568,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0109,\n        \"max\": 0.0109,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0943,\n        \"max\": 0.0943,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0943\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7159,\n        \"max\": 0.7159,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7159\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","execution_count":33,"metadata":{"id":"oJQpii6x5r_Y","executionInfo":{"status":"ok","timestamp":1734425908828,"user_tz":-60,"elapsed":15,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"148110cd-8c3d-48e6-be4d-4971e4e71eb4"},"outputs":[{"output_type":"stream","name":"stdout","text":["                 coef     P>|t|     2.5 %    97.5 %\n","slr          0.107028  0.000360  0.058651  0.155405\n","mlr         -0.118802  0.101116 -0.264259  0.026654\n","mlrFE        0.405100  0.010900  0.094300  0.715900\n","forest      -0.122151  0.013743 -0.219319 -0.024984\n","tree        -0.042935  0.581763 -0.195713  0.109843\n","xgb         -0.035701  0.548403 -0.152291  0.080890\n","forest (FE)  0.096351  0.403249 -0.129585  0.322287\n","tree (FE)    0.207430  0.102568 -0.041604  0.456463\n","xgb (FE)     0.268038  0.005807  0.077590  0.458487\n"]}],"source":["# Concatenate the summaries, reset the index, and then rename\n","plr_summary = pd.concat([summary_df, mlrFE_summary, forest_summary, tree_summary, boost_summary, forest_diff_summary, tree_diff_summary, boost_diff_summary])\n","plr_summary.index = ['slr', 'mlr', 'mlrFE', 'forest', 'tree', 'xgb', 'forest (FE)', 'tree (FE)', 'xgb (FE)']  # Assign the desired labels\n","\n","# Print the updated summary\n","print(plr_summary[['coef', 'P>|t|', '2.5 %', '97.5 %']])"]},{"cell_type":"code","source":["# Adjust figure size to make the graph broader\n","plt.figure(figsize=(8, 5))\n","errors = np.full((2, plr_summary.shape[0]), np.nan)\n","errors[0, :] = plr_summary['coef'] - plr_summary['2.5 %']\n","errors[1, :] = plr_summary['97.5 %'] - plr_summary['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary.index, plr_summary['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary.index[:3], plr_summary['coef'][:3], yerr=errors[:, :3], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary.index[6:], plr_summary['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FE)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"],"metadata":{"id":"9pCbBLhG7VUw","executionInfo":{"status":"ok","timestamp":1734425910267,"user_tz":-60,"elapsed":1450,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":488},"outputId":"4b318dce-5317-422c-b112-6e3889b5f3f1"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Including the Instrumental Variable"],"metadata":{"id":"u1dPr6MOv4Wh"}},{"cell_type":"code","source":["demeaned_final_data"],"metadata":{"id":"AxVS_cMKEoig","executionInfo":{"status":"ok","timestamp":1734425910267,"user_tz":-60,"elapsed":21,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"fb4cc6b1-f40e-4eed-dfe1-44832a5132a9"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country_code  oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","0            BEL -0.881713                   -1.110769       -5.901955   \n","1            BEL -0.881713                   -1.004358       -6.826226   \n","2            BEL -0.881713                   -0.867430       -9.494843   \n","3            BEL -0.881713                   -0.372837       -8.977338   \n","4            BEL -0.881713                   -0.048065       -9.062980   \n","..           ...       ...                         ...             ...   \n","247          SWE  0.605093                    0.278063       15.011426   \n","248          SWE  1.025926                    0.115990        5.805834   \n","249          SWE  0.775926                   -0.077535       11.727918   \n","250          SWE  0.917593                   -0.056269       19.614633   \n","251          SWE  0.784259                   -0.210094       16.896695   \n","\n","     urbanization_rate  corruption_perception_index  industry_composition  \\\n","0            -0.524556                    -1.397222              2.799596   \n","1            -0.450556                    -1.397222              2.564669   \n","2            -0.377556                    -1.397222              2.863648   \n","3            -0.305556                    -1.247222              2.324468   \n","4            -0.236556                    -1.347222              1.479626   \n","..                 ...                          ...                   ...   \n","247           0.341000                     0.095000             -0.684516   \n","248           0.497000                    -0.005000             -2.764831   \n","249           0.651000                    -0.005000             -1.415083   \n","250           0.892000                     0.095000             -1.535450   \n","251           1.215000                    -0.405000             -2.164547   \n","\n","            IV  \n","0   -40.222222  \n","1   -34.222222  \n","2   -28.222222  \n","3   -21.222222  \n","4   -13.222222  \n","..         ...  \n","247  13.833333  \n","248  11.833333  \n","249  11.833333  \n","250  15.833333  \n","251  16.833333  \n","\n","[252 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-9608a745-22dd-4893-94ad-64e42d92e891\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>-0.881713</td>\n","      <td>-1.110769</td>\n","      <td>-5.901955</td>\n","      <td>-0.524556</td>\n","      <td>-1.397222</td>\n","      <td>2.799596</td>\n","      <td>-40.222222</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>-0.881713</td>\n","      <td>-1.004358</td>\n","      <td>-6.826226</td>\n","      <td>-0.450556</td>\n","      <td>-1.397222</td>\n","      <td>2.564669</td>\n","      <td>-34.222222</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>-0.881713</td>\n","      <td>-0.867430</td>\n","      <td>-9.494843</td>\n","      <td>-0.377556</td>\n","      <td>-1.397222</td>\n","      <td>2.863648</td>\n","      <td>-28.222222</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>-0.881713</td>\n","      <td>-0.372837</td>\n","      <td>-8.977338</td>\n","      <td>-0.305556</td>\n","      <td>-1.247222</td>\n","      <td>2.324468</td>\n","      <td>-21.222222</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>-0.881713</td>\n","      <td>-0.048065</td>\n","      <td>-9.062980</td>\n","      <td>-0.236556</td>\n","      <td>-1.347222</td>\n","      <td>1.479626</td>\n","      <td>-13.222222</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>SWE</td>\n","      <td>0.605093</td>\n","      <td>0.278063</td>\n","      <td>15.011426</td>\n","      <td>0.341000</td>\n","      <td>0.095000</td>\n","      <td>-0.684516</td>\n","      <td>13.833333</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>SWE</td>\n","      <td>1.025926</td>\n","      <td>0.115990</td>\n","      <td>5.805834</td>\n","      <td>0.497000</td>\n","      <td>-0.005000</td>\n","      <td>-2.764831</td>\n","      <td>11.833333</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>SWE</td>\n","      <td>0.775926</td>\n","      <td>-0.077535</td>\n","      <td>11.727918</td>\n","      <td>0.651000</td>\n","      <td>-0.005000</td>\n","      <td>-1.415083</td>\n","      <td>11.833333</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>SWE</td>\n","      <td>0.917593</td>\n","      <td>-0.056269</td>\n","      <td>19.614633</td>\n","      <td>0.892000</td>\n","      <td>0.095000</td>\n","      <td>-1.535450</td>\n","      <td>15.833333</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>SWE</td>\n","      <td>0.784259</td>\n","      <td>-0.210094</td>\n","      <td>16.896695</td>\n","      <td>1.215000</td>\n","      <td>-0.405000</td>\n","      <td>-2.164547</td>\n","      <td>16.833333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>252 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9608a745-22dd-4893-94ad-64e42d92e891')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9608a745-22dd-4893-94ad-64e42d92e891 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9608a745-22dd-4893-94ad-64e42d92e891');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0795f588-f418-428b-baf3-890bc6771ad2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0795f588-f418-428b-baf3-890bc6771ad2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0795f588-f418-428b-baf3-890bc6771ad2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a484cb11-c0a3-42cf-b4cf-e969c90604e0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('demeaned_final_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a484cb11-c0a3-42cf-b4cf-e969c90604e0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('demeaned_final_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demeaned_final_data","summary":"{\n  \"name\": \"demeaned_final_data\",\n  \"rows\": 252,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"HUN\",\n          \"POL\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7792760729246616,\n        \"min\": -1.3983796437581386,\n        \"max\": 1.8203704953193334,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          0.3252313401963556,\n          0.5493055582046553,\n          1.269907547367982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5037997007991495,\n        \"min\": -1.7114100953102156,\n        \"max\": 0.9863528094363536,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -0.3653607301794821,\n          0.39554859023722244,\n          -0.919911866707638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.97959196097578,\n        \"min\": -26.55149077538662,\n        \"max\": 40.82096511711358,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -4.3874944020913995,\n          -11.300710283843863,\n          -10.175403921691263\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0024435582256315,\n        \"min\": -3.2222222222222143,\n        \"max\": 3.260166666666663,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          -1.5888333333333406,\n          -0.1155555555555452,\n          -0.9891666666666765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6779404662547776,\n        \"min\": -5.86,\n        \"max\": 4.561111111111111,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          -0.4911111111111115,\n          -0.11277777777777764,\n          0.2666666666666657\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8349137732416325,\n        \"min\": -7.137813951666665,\n        \"max\": 6.042282468333333,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          1.6452981605555514,\n          1.065933139444443,\n          1.6501608361111089\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.54449619130417,\n        \"min\": -130.77777777777777,\n        \"max\": 166.22222222222223,\n        \"num_unique_values\": 225,\n        \"samples\": [\n          5.7777777777777715,\n          -31.77777777777777,\n          -29.333333333333314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# Check for NaN values in IV column\n","nan_values = demeaned_final_data['IV'].isna().sum()\n","\n","# Display rows where IV is NaN\n","nan_rows = demeaned_final_data[demeaned_final_data['IV'].isna()]\n","demeaned_final_data = demeaned_final_data.dropna(subset=['IV'])\n","\n","print(f\"Number of NaN values in IV column: {nan_values}\")\n","print(\"\\nRows with NaN values in IV column:\")\n","print(nan_rows)\n"],"metadata":{"id":"KU0hrUNUEVaZ","executionInfo":{"status":"ok","timestamp":1734425910268,"user_tz":-60,"elapsed":19,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"90d8f3c6-2cf7-4412-e821-c2a85286daa2"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of NaN values in IV column: 0\n","\n","Rows with NaN values in IV column:\n","Empty DataFrame\n","Columns: [country_code, oecd_eps, transport_trend_per_person, gdp_per_capita, urbanization_rate, corruption_perception_index, industry_composition, IV]\n","Index: []\n"]}]},{"cell_type":"code","source":["# Scatterplot with correlation\n","\n","# Set up the figure size\n","plt.figure(figsize=(10, 6))\n","\n","# Calculate the correlation coefficient\n","correlation = final_data['IV'].corr(final_data['transport_trend_per_person'])\n","\n","# Create the regression plot\n","sns.regplot(x='IV', y='transport_trend_per_person', data=final_data,\n","            scatter_kws={'s': 50}, line_kws={'color': 'red', 'linewidth': 2})\n","\n","# Set plot title and axis labels\n","plt.title('Number of Passenger cars vs. Kilometers driven', fontsize=14)\n","plt.xlabel('Number of Passenger cars per thousand inhabitants', fontsize=12)\n","plt.ylabel('Kilometers driven per person', fontsize=12)\n","\n","# Remove the grid\n","plt.grid(False)\n","\n","# Add correlation as annotation\n","plt.text(0.1, 0.9, f'Correlation: {correlation:.2f}', transform=plt.gca().transAxes, fontsize=12)\n","\n","# Show the plot\n","plt.show()"],"metadata":{"id":"NBZ8cKsj0Gm7","executionInfo":{"status":"ok","timestamp":1734425911370,"user_tz":-60,"elapsed":1114,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":569},"outputId":"40a88223-fb44-4c6d-e04f-2eaed078f73e"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# SLR for the passenger cars per 1000 inhabitants (instrumental variable) and transport trend per person (x variable)\n","Y_transport_trend = final_data['transport_trend_per_person']\n","X_cars_per_thousands = final_data['IV']\n","X_cars_per_thousands = sm.add_constant(X_cars_per_thousands)\n","model_IV_est = sm.OLS(Y_transport_trend, X_cars_per_thousands).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","print(model_IV_est.summary())\n","\n","# F-stat > 10, so we can use IV"],"metadata":{"id":"1x8UJykohp7t","executionInfo":{"status":"ok","timestamp":1734425911371,"user_tz":-60,"elapsed":40,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"190ab17c-2daf-47c6-c0db-6cc4a97d2434"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["                                OLS Regression Results                                \n","======================================================================================\n","Dep. Variable:     transport_trend_per_person   R-squared:                       0.566\n","Model:                                    OLS   Adj. R-squared:                  0.564\n","Method:                         Least Squares   F-statistic:                     68.22\n","Date:                        Tue, 17 Dec 2024   Prob (F-statistic):           1.57e-06\n","Time:                                08:58:30   Log-Likelihood:                -515.85\n","No. Observations:                         252   AIC:                             1036.\n","Df Residuals:                             250   BIC:                             1043.\n","Df Model:                                   1                                         \n","Covariance Type:                      cluster                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const         -0.8186      1.346     -0.608      0.554      -3.727       2.090\n","IV             0.0237      0.003      8.260      0.000       0.017       0.030\n","==============================================================================\n","Omnibus:                        4.347   Durbin-Watson:                   0.194\n","Prob(Omnibus):                  0.114   Jarque-Bera (JB):                4.442\n","Skew:                          -0.311   Prob(JB):                        0.109\n","Kurtosis:                       2.811   Cond. No.                     1.96e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 1.96e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}]},{"cell_type":"code","source":["# MLR of Z on X. Including confounders and excluding covariates.\n","\n","Z_passenger_cars = final_data[['IV', 'gdp_per_capita',\n","                'urbanization_rate']]\n","X_transport_trend = final_data['transport_trend_per_person']\n","Z_passenger_cars = sm.add_constant(Z_passenger_cars)\n","Z_on_X_mlr = sm.OLS(X_transport_trend, Z_passenger_cars).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","print(Z_on_X_mlr.summary())"],"metadata":{"id":"0s0DpBuA5ZQQ","executionInfo":{"status":"ok","timestamp":1734425911371,"user_tz":-60,"elapsed":35,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dad7f048-5eb2-4b39-f821-3e26e9a8f03f"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["                                OLS Regression Results                                \n","======================================================================================\n","Dep. Variable:     transport_trend_per_person   R-squared:                       0.789\n","Model:                                    OLS   Adj. R-squared:                  0.786\n","Method:                         Least Squares   F-statistic:                     74.31\n","Date:                        Tue, 17 Dec 2024   Prob (F-statistic):           1.95e-08\n","Time:                                08:58:30   Log-Likelihood:                -425.33\n","No. Observations:                         252   AIC:                             858.7\n","Df Residuals:                             248   BIC:                             872.8\n","Df Model:                                   3                                         \n","Covariance Type:                      cluster                                         \n","=====================================================================================\n","                        coef    std err          t      P>|t|      [0.025      0.975]\n","-------------------------------------------------------------------------------------\n","const                -4.9032      2.482     -1.975      0.070     -10.266       0.459\n","IV                    0.0096      0.003      3.081      0.009       0.003       0.016\n","gdp_per_capita        0.0530      0.015      3.565      0.003       0.021       0.085\n","urbanization_rate     0.1078      0.041      2.647      0.020       0.020       0.196\n","==============================================================================\n","Omnibus:                        7.437   Durbin-Watson:                   0.216\n","Prob(Omnibus):                  0.024   Jarque-Bera (JB):                3.969\n","Skew:                          -0.005   Prob(JB):                        0.137\n","Kurtosis:                       2.385   Cond. No.                     3.53e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 3.53e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}]},{"cell_type":"code","source":["# MLR of Z and all controls on Y\n","\n","Z_passenger_cars = final_data[['IV', 'gdp_per_capita',\n","                'urbanization_rate','corruption_perception_index', 'industry_composition']]\n","Y_oecd_eps = final_data['oecd_eps']\n","Z_passenger_cars = sm.add_constant(Z_passenger_cars)\n","Z_on_X_mlr = sm.OLS(Y_oecd_eps, Z_passenger_cars).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","print(Z_on_X_mlr.summary())"],"metadata":{"id":"wKZlypSicBbT","executionInfo":{"status":"ok","timestamp":1734425911371,"user_tz":-60,"elapsed":29,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f7c50ec7-1a05-4682-838a-3f8977be98e0"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.433\n","Model:                            OLS   Adj. R-squared:                  0.421\n","Method:                 Least Squares   F-statistic:                     16.49\n","Date:                Tue, 17 Dec 2024   Prob (F-statistic):           3.17e-05\n","Time:                        08:58:30   Log-Likelihood:                -250.99\n","No. Observations:                 252   AIC:                             514.0\n","Df Residuals:                     246   BIC:                             535.2\n","Df Model:                           5                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           3.2104      1.275      2.519      0.026       0.457       5.964\n","IV                              0.0031      0.002      1.585      0.137      -0.001       0.007\n","gdp_per_capita                  0.0235      0.006      4.095      0.001       0.011       0.036\n","urbanization_rate              -0.0194      0.016     -1.183      0.258      -0.055       0.016\n","corruption_perception_index    -0.0660      0.082     -0.805      0.435      -0.243       0.111\n","industry_composition           -0.0459      0.024     -1.876      0.083      -0.099       0.007\n","==============================================================================\n","Omnibus:                       27.053   Durbin-Watson:                   0.375\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):                8.330\n","Skew:                           0.030   Prob(JB):                       0.0155\n","Kurtosis:                       2.111   Cond. No.                     5.65e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 5.65e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}]},{"cell_type":"code","source":["# MLR of Z, X and all controls on Y\n","\n","ZandX = final_data[['IV', 'transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate','corruption_perception_index', 'industry_composition']]\n","Y_oecd_eps = final_data['oecd_eps']\n","ZandX = sm.add_constant(ZandX)\n","ZandX_on_Y_mlr = sm.OLS(Y_oecd_eps, ZandX).fit(cov_type='cluster', cov_kwds={'groups': final_data['country_code']}, use_t=True)\n","print(ZandX_on_Y_mlr.summary())"],"metadata":{"id":"YIcMq-Hkckrg","executionInfo":{"status":"ok","timestamp":1734425911371,"user_tz":-60,"elapsed":24,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5822c74a-4dee-495f-f3d0-cb3b318c7b16"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.513\n","Model:                            OLS   Adj. R-squared:                  0.501\n","Method:                 Least Squares   F-statistic:                     7.426\n","Date:                Tue, 17 Dec 2024   Prob (F-statistic):            0.00130\n","Time:                        08:58:30   Log-Likelihood:                -231.78\n","No. Observations:                 252   AIC:                             477.6\n","Df Residuals:                     245   BIC:                             502.3\n","Df Model:                           6                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           2.5520      1.190      2.144      0.051      -0.019       5.123\n","IV                              0.0051      0.002      2.835      0.014       0.001       0.009\n","transport_trend_per_person     -0.2526      0.067     -3.795      0.002      -0.396      -0.109\n","gdp_per_capita                  0.0295      0.007      4.106      0.001       0.014       0.045\n","urbanization_rate              -0.0046      0.018     -0.250      0.807      -0.045       0.035\n","corruption_perception_index     0.0995      0.088      1.130      0.279      -0.091       0.290\n","industry_composition           -0.0600      0.023     -2.651      0.020      -0.109      -0.011\n","==============================================================================\n","Omnibus:                       22.189   Durbin-Watson:                   0.409\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):                7.954\n","Skew:                           0.115   Prob(JB):                       0.0187\n","Kurtosis:                       2.161   Cond. No.                     5.76e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 5.76e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}]},{"cell_type":"code","source":["# Final prediction of Y using X and Z\n","\n","Y_eps = final_data['oecd_eps']\n","X_exo = final_data[['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']]\n","Z_endo = final_data['transport_trend_per_person']\n","W_iv = final_data['IV']\n","\n","X_exo = sm.add_constant(X_exo)\n","mlr_IV_summary = IV2SLS(Y_eps, X_exo, Z_endo, W_iv).fit(cov_type='clustered', **{'clusters': final_data['country_code']})\n","mlr_IV_summary"],"metadata":{"id":"lQiXAESPjVeJ","executionInfo":{"status":"ok","timestamp":1734425911898,"user_tz":-60,"elapsed":545,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":476},"outputId":"584a7b66-18fd-43fd-b788-243749e60ef3"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          IV-2SLS Estimation Summary                          \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                     -0.0399\n","Estimator:                    IV-2SLS   Adj. R-squared:                -0.0610\n","No. Observations:                 252   F-statistic:                    78.726\n","Date:                Tue, Dec 17 2024   P-value (F-stat)                0.0000\n","Time:                        08:58:30   Distribution:                  chi2(5)\n","Cov. Estimator:             clustered                                         \n","                                                                              \n","                                      Parameter Estimates                                      \n","===============================================================================================\n","                             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n","-----------------------------------------------------------------------------------------------\n","const                           4.2802     1.8698     2.2891     0.0221      0.6154      7.9449\n","gdp_per_capita                  0.0137     0.0141     0.9752     0.3294     -0.0139      0.0413\n","urbanization_rate              -0.0433     0.0282    -1.5365     0.1244     -0.0986      0.0119\n","corruption_perception_index    -0.3351     0.2865    -1.1696     0.2422     -0.8967      0.2264\n","industry_composition           -0.0231     0.0442    -0.5215     0.6020     -0.1097      0.0636\n","transport_trend_per_person      0.4105     0.3358     1.2225     0.2215     -0.2477      1.0687\n","===============================================================================================\n","\n","Endogenous: transport_trend_per_person\n","Instruments: IV\n","Clustered Covariance (One-Way)\n","Debiased: False\n","Num Clusters: 14\n","IVResults, id: 0x7dc446493190"],"text/html":["<table class=\"simpletable\">\n","<caption>IV-2SLS Estimation Summary</caption>\n","<tr>\n","  <th>Dep. Variable:</th>        <td>oecd_eps</td>     <th>  R-squared:         </th> <td>-0.0399</td>\n","</tr>\n","<tr>\n","  <th>Estimator:</th>             <td>IV-2SLS</td>     <th>  Adj. R-squared:    </th> <td>-0.0610</td>\n","</tr>\n","<tr>\n","  <th>No. Observations:</th>        <td>252</td>       <th>  F-statistic:       </th> <td>78.726</td> \n","</tr>\n","<tr>\n","  <th>Date:</th>             <td>Tue, Dec 17 2024</td> <th>  P-value (F-stat)   </th> <td>0.0000</td> \n","</tr>\n","<tr>\n","  <th>Time:</th>                 <td>08:58:30</td>     <th>  Distribution:      </th> <td>chi2(5)</td>\n","</tr>\n","<tr>\n","  <th>Cov. Estimator:</th>       <td>clustered</td>    <th>                     </th>    <td></td>    \n","</tr>\n","<tr>\n","  <th></th>                          <td></td>         <th>                     </th>    <td></td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<caption>Parameter Estimates</caption>\n","<tr>\n","               <td></td>               <th>Parameter</th> <th>Std. Err.</th> <th>T-stat</th>  <th>P-value</th> <th>Lower CI</th> <th>Upper CI</th>\n","</tr>\n","<tr>\n","  <th>const</th>                        <td>4.2802</td>    <td>1.8698</td>   <td>2.2891</td>  <td>0.0221</td>   <td>0.6154</td>   <td>7.9449</td> \n","</tr>\n","<tr>\n","  <th>gdp_per_capita</th>               <td>0.0137</td>    <td>0.0141</td>   <td>0.9752</td>  <td>0.3294</td>   <td>-0.0139</td>  <td>0.0413</td> \n","</tr>\n","<tr>\n","  <th>urbanization_rate</th>            <td>-0.0433</td>   <td>0.0282</td>   <td>-1.5365</td> <td>0.1244</td>   <td>-0.0986</td>  <td>0.0119</td> \n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th>  <td>-0.3351</td>   <td>0.2865</td>   <td>-1.1696</td> <td>0.2422</td>   <td>-0.8967</td>  <td>0.2264</td> \n","</tr>\n","<tr>\n","  <th>industry_composition</th>         <td>-0.0231</td>   <td>0.0442</td>   <td>-0.5215</td> <td>0.6020</td>   <td>-0.1097</td>  <td>0.0636</td> \n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>   <td>0.4105</td>    <td>0.3358</td>   <td>1.2225</td>  <td>0.2215</td>   <td>-0.2477</td>  <td>1.0687</td> \n","</tr>\n","</table><br/><br/>Endogenous: transport_trend_per_person<br/>Instruments: IV<br/>Clustered Covariance (One-Way)<br/>Debiased: False<br/>Num Clusters: 14<br/>id: 0x7dc446493190"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["def extract_transport_results(iv_results):\n","    # Create a DataFrame with the results directly from iv_results attributes\n","    transport_results = pd.DataFrame({\n","        'Parameter': ['transport_trend_per_person'],\n","        'coef': [iv_results.params['transport_trend_per_person']],\n","        'std err': [iv_results.std_errors['transport_trend_per_person']],\n","        'T-stat': [iv_results.tstats['transport_trend_per_person']],\n","        'P-value': [iv_results.pvalues['transport_trend_per_person']],\n","        # Calculate confidence intervals manually\n","        'Lower CI': [iv_results.params['transport_trend_per_person'] - 1.96 * iv_results.std_errors['transport_trend_per_person']],\n","        'Upper CI': [iv_results.params['transport_trend_per_person'] + 1.96 * iv_results.std_errors['transport_trend_per_person']]\n","    })\n","\n","    return transport_results\n","\n","# Example usage (unchanged):\n","mlr_IV_summary = extract_transport_results(mlr_IV_summary)\n","mlr_IV_summary"],"metadata":{"id":"BMl9cgb4winM","executionInfo":{"status":"ok","timestamp":1734425911900,"user_tz":-60,"elapsed":545,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":89},"outputId":"e68d6f4e-6c22-44ad-c9d5-d02a17c40780"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    Parameter      coef   std err    T-stat   P-value  \\\n","0  transport_trend_per_person  0.410528  0.335822  1.222456  0.221535   \n","\n","   Lower CI  Upper CI  \n","0 -0.247684   1.06874  "],"text/html":["\n","  <div id=\"df-07ceefda-b3b8-4dac-aa0f-e92cc80b9eef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Parameter</th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>T-stat</th>\n","      <th>P-value</th>\n","      <th>Lower CI</th>\n","      <th>Upper CI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>transport_trend_per_person</td>\n","      <td>0.410528</td>\n","      <td>0.335822</td>\n","      <td>1.222456</td>\n","      <td>0.221535</td>\n","      <td>-0.247684</td>\n","      <td>1.06874</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07ceefda-b3b8-4dac-aa0f-e92cc80b9eef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-07ceefda-b3b8-4dac-aa0f-e92cc80b9eef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-07ceefda-b3b8-4dac-aa0f-e92cc80b9eef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_41b03c58-2951-4d3a-a2e8-7fe9e4095c5a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlr_IV_summary')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_41b03c58-2951-4d3a-a2e8-7fe9e4095c5a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlr_IV_summary');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlr_IV_summary","summary":"{\n  \"name\": \"mlr_IV_summary\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Parameter\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"transport_trend_per_person\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.4105279181388397,\n        \"max\": 0.4105279181388397,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.4105279181388397\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.3358223613150057,\n        \"max\": 0.3358223613150057,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3358223613150057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T-stat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.2224555760113878,\n        \"max\": 1.2224555760113878,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.2224555760113878\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P-value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.22153539353277552,\n        \"max\": 0.22153539353277552,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.22153539353277552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lower CI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.2476839100385715,\n        \"max\": -0.2476839100385715,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.2476839100385715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Upper CI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.068739746316251,\n        \"max\": 1.068739746316251,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.068739746316251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["mlr_IV_summary = mlr_IV_summary.rename(columns={'T-stat': 't',\n","    'P-value': 'P>|t|',\n","    'Lower CI': '2.5 %',\n","    'Upper CI': '97.5 %'\n","})"],"metadata":{"id":"NFfrfsw7zYXK","executionInfo":{"status":"ok","timestamp":1734425911900,"user_tz":-60,"elapsed":15,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["obj_dml_diff_iv = DoubleMLClusterData(final_data, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'], z_cols='IV')\n","print(obj_dml_diff_iv)"],"metadata":{"id":"_AIfmE59C5rp","executionInfo":{"status":"ok","timestamp":1734425911900,"user_tz":-60,"elapsed":14,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"38e58afe-6ca1-49dd-bb92-f14841032c2e"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): ['IV']\n","No. Observations: 252\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 252 entries, 0 to 251\n","Columns: 15 entries, country_code to fitted_values_fe\n","dtypes: float64(12), int64(2), object(1)\n","memory usage: 29.7+ KB\n","\n"]}]},{"cell_type":"code","source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLIV(obj_dml_diff_iv,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 ml_r=randomForest,  # Specifies the Random Forest Classifier for iv regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_diff_iv_summary = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_diff_iv_summary)  # Displays the estimated ATE and other model information"],"metadata":{"id":"QMSTzk3cWrI2","executionInfo":{"status":"ok","timestamp":1734425924640,"user_tz":-60,"elapsed":12750,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ed530276-fce5-4c21-c447-41b4bb7f0973"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  1.791651  2.882699  0.621519  0.534258 -3.858336   \n","\n","                              97.5 %  \n","transport_trend_per_person  7.441638  \n"]}]},{"cell_type":"code","source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLIV(\n","    obj_dml_diff_iv,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    ml_r=tree_model,  # Specifies the Random Forest Classifier for iv regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_diff_iv_summary = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"],"metadata":{"id":"lsWY3OeSWuW1","executionInfo":{"status":"ok","timestamp":1734425924641,"user_tz":-60,"elapsed":9,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f59eb596-bcfa-4342-a3b2-bf544a18d3bb"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  1.288567  2.987647  0.431298  0.666251 -4.567113   \n","\n","                              97.5 %  \n","transport_trend_per_person  7.144247  \n"]}]},{"cell_type":"code","source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(\n","    n_jobs=1,  # Number of parallel threads used to run XGBoost\n","    objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","    eta=0.1,  # Learning rate\n","    n_estimators=50,  # Increased number of boosting rounds (trees)\n","    max_depth=7,  # Limit tree depth to prevent overfitting\n","    subsample=0.8,  # Use 80% of data for each tree to add robustness\n","    colsample_bytree=0.8  # Use 80% of features for each tree to reduce complexity\n",")\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLIV( obj_dml_diff_iv,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                ml_r=boost,  # Specifies the Random Forest Classifier for iv regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_diff_iv_summary = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_diff_iv_summary)  # Displays the estimated ATE and other model information"],"metadata":{"id":"TUKAYb9VWxod","executionInfo":{"status":"ok","timestamp":1734425926034,"user_tz":-60,"elapsed":1400,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d798ab75-74bf-46fe-cfcb-2b5415dfb2af"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  1.898951  1.575006  1.205679  0.227941 -1.188004   \n","\n","                              97.5 %  \n","transport_trend_per_person  4.985906  \n"]}]},{"cell_type":"code","source":["# Concatenate the summaries and update the index\n","plr_summary = pd.concat([summary_df, forest_summary, tree_summary, boost_summary, forest_diff_summary, tree_diff_summary, boost_diff_summary, forest_diff_iv_summary, tree_diff_iv_summary, boost_diff_iv_summary])\n","plr_summary.index = ['slr', 'mlr', 'forest', 'tree', 'xgb', 'forest (FE)', 'tree (FE)', 'xgb (FE)','forest (FE+IV)', 'tree (FE+IV)', 'xgb (FE+IV)']\n","\n","# Print the updated summary\n","print(plr_summary[['coef', 'P>|t|', '2.5 %', '97.5 %']])"],"metadata":{"id":"mOI6cpYmW0m0","executionInfo":{"status":"ok","timestamp":1734425926035,"user_tz":-60,"elapsed":10,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"552d6605-8318-4ed3-f7d9-0bb6837e5146"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["                    coef     P>|t|     2.5 %    97.5 %\n","slr             0.107028  0.000360  0.058651  0.155405\n","mlr            -0.118802  0.101116 -0.264259  0.026654\n","forest         -0.122151  0.013743 -0.219319 -0.024984\n","tree           -0.042935  0.581763 -0.195713  0.109843\n","xgb            -0.035701  0.548403 -0.152291  0.080890\n","forest (FE)     0.096351  0.403249 -0.129585  0.322287\n","tree (FE)       0.207430  0.102568 -0.041604  0.456463\n","xgb (FE)        0.268038  0.005807  0.077590  0.458487\n","forest (FE+IV)  1.791651  0.534258 -3.858336  7.441638\n","tree (FE+IV)    1.288567  0.666251 -4.567113  7.144247\n","xgb (FE+IV)     1.898951  0.227941 -1.188004  4.985906\n"]}]},{"cell_type":"code","source":["plr_summary['category'] = [\n","    'No ML', 'No ML', 'DML', 'DML', 'DML',\n","    'DML+FE', 'DML+FE', 'DML+FE',\n","    'DML+FE+IV', 'DML+FE+IV', 'DML+FE+IV'\n","]\n","\n","# Plotting\n","plt.figure(figsize=(10, 6))\n","\n","# Define colors for each category\n","category_colors = {\n","    'No ML': 'orange',\n","    'DML': 'blue',\n","    'DML+FE': 'green',\n","    'DML+FE+IV': 'purple'\n","}\n","\n","# Plot each category with different colors\n","for category, color in category_colors.items():\n","    category_data = plr_summary[plr_summary['category'] == category]\n","    plt.errorbar(\n","        category_data.index, category_data['coef'],\n","        yerr=[category_data['coef'] - category_data['2.5 %'], category_data['97.5 %'] - category_data['coef']],\n","        fmt='o', color=color, label=category, capsize=5\n","    )\n","\n","# Add reference line at coefficient 1.0\n","plt.axhline(y=0, color='red', linestyle='--')\n","\n","# Formatting the plot\n","plt.title('Summary of Regression Models with Categories')\n","plt.xlabel('Models')\n","plt.ylabel('Coefficient and 95% CI')\n","plt.xticks(rotation=45)\n","plt.legend(title='Categories')\n","plt.tight_layout()\n","\n","# Show plot\n","plt.show()"],"metadata":{"id":"fsj8CK06XTr0","executionInfo":{"status":"ok","timestamp":1734425927537,"user_tz":-60,"elapsed":1509,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":607},"outputId":"f83eed8f-0f21-4138-e29f-aca0606947d1"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Concatenate the summaries and update the index\n","plr_summary = pd.concat([summary_df, mlrFE_summary, mlr_IV_summary, forest_summary, tree_summary, boost_summary, forest_diff_summary, tree_diff_summary, boost_diff_summary, forest_diff_iv_summary, tree_diff_iv_summary, boost_diff_iv_summary])\n","plr_summary.index = ['slr', 'mlr', 'mlrFE', 'mlr_IV', 'forest', 'tree', 'xgb', 'forest (FE)', 'tree (FE)', 'xgb (FE)','forest (FE+IV)', 'tree (FE+IV)', 'xgb (FE+IV)']\n","\n","# Print the updated summary\n","print(plr_summary[['coef', 'P>|t|', '2.5 %', '97.5 %']])"],"metadata":{"id":"kC3NsYHspfE9","executionInfo":{"status":"ok","timestamp":1734425927537,"user_tz":-60,"elapsed":8,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bf9f40a7-f93f-42f8-e46d-6f8abece2e80"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["                    coef     P>|t|     2.5 %    97.5 %\n","slr             0.107028  0.000360  0.058651  0.155405\n","mlr            -0.118802  0.101116 -0.264259  0.026654\n","mlrFE           0.405100  0.010900  0.094300  0.715900\n","mlr_IV          0.410528  0.221535 -0.247684  1.068740\n","forest         -0.122151  0.013743 -0.219319 -0.024984\n","tree           -0.042935  0.581763 -0.195713  0.109843\n","xgb            -0.035701  0.548403 -0.152291  0.080890\n","forest (FE)     0.096351  0.403249 -0.129585  0.322287\n","tree (FE)       0.207430  0.102568 -0.041604  0.456463\n","xgb (FE)        0.268038  0.005807  0.077590  0.458487\n","forest (FE+IV)  1.791651  0.534258 -3.858336  7.441638\n","tree (FE+IV)    1.288567  0.666251 -4.567113  7.144247\n","xgb (FE+IV)     1.898951  0.227941 -1.188004  4.985906\n"]}]},{"cell_type":"code","source":["plr_summary['category'] = [\n","    'No ML', 'No ML', 'No ML', 'No ML', 'DML', 'DML', 'DML',\n","    'DML+FE', 'DML+FE', 'DML+FE',\n","    'DML+FE+IV', 'DML+FE+IV', 'DML+FE+IV'\n","]\n","\n","# Plotting\n","plt.figure(figsize=(10, 6))\n","\n","# Define colors for each category\n","category_colors = {\n","    'No ML': 'orange',\n","    'DML': 'blue',\n","    'DML+FE': 'green',\n","    'DML+FE+IV': 'purple'\n","}\n","\n","# Plot each category with different colors\n","for category, color in category_colors.items():\n","    category_data = plr_summary[plr_summary['category'] == category]\n","    plt.errorbar(\n","        category_data.index, category_data['coef'],\n","        yerr=[category_data['coef'] - category_data['2.5 %'], category_data['97.5 %'] - category_data['coef']],\n","        fmt='o', color=color, label=category, capsize=5\n","    )\n","\n","# Add reference line at coefficient 1.0\n","plt.axhline(y=0, color='red', linestyle='--')\n","\n","# Formatting the plot\n","plt.title('Summary of Regression Models with Categories')\n","plt.xlabel('Models')\n","plt.ylabel('Coefficient and 95% CI')\n","plt.xticks(rotation=45)\n","plt.legend(title='Categories')\n","plt.tight_layout()\n","\n","# Show plot\n","plt.show()"],"metadata":{"id":"SHhlpDY_q9eN","executionInfo":{"status":"ok","timestamp":1734425928149,"user_tz":-60,"elapsed":618,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":607},"outputId":"a85a3edb-ef62-4ac4-bfa3-2ebdbffe140d"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}