{"cells":[{"cell_type":"code","execution_count":90,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2362,"status":"ok","timestamp":1734346077795,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"14ZP-C4vyHDl","outputId":"8ac87ead-4284-4996-c529-c2c75abf3aaf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":91,"metadata":{"id":"aMNtKOuPUrJF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734346082961,"user_tz":-60,"elapsed":5176,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"6d34a55e-9153-4417-e975-0a515f2d5540"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: linearmodels in /usr/local/lib/python3.10/dist-packages (6.1)\n","Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.26.4)\n","Requirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (2.2.2)\n","Requirement already satisfied: scipy>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.13.1)\n","Requirement already satisfied: statsmodels>=0.13.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (0.14.4)\n","Requirement already satisfied: mypy-extensions>=0.4 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.0.0)\n","Requirement already satisfied: Cython>=3.0.10 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (3.0.11)\n","Requirement already satisfied: pyhdfe>=0.1 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (0.2.0)\n","Requirement already satisfied: formulaic>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.1.0)\n","Requirement already satisfied: setuptools-scm<9.0.0,>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (8.1.0)\n","Requirement already satisfied: interface-meta>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (1.3.0)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (4.12.2)\n","Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (1.17.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: packaging>=20 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (24.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (75.1.0)\n","Requirement already satisfied: tomli>=1 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (2.2.1)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.0->linearmodels) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4.0->linearmodels) (1.17.0)\n","Requirement already satisfied: stargazer in /usr/local/lib/python3.10/dist-packages (0.0.7)\n"]}],"source":["%matplotlib inline\n","!pip install linearmodels\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","from scipy.stats import skew\n","from scipy import interpolate\n","!pip install stargazer\n","from stargazer.stargazer import Stargazer\n","\n","from linearmodels.panel import PanelOLS"]},{"cell_type":"code","execution_count":92,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4hVrNIXAiIP","outputId":"1782c04a-2db1-42e8-a902-d6993273a0bf","executionInfo":{"status":"ok","timestamp":1734346088005,"user_tz":-60,"elapsed":5061,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: DoubleML in /usr/local/lib/python3.10/dist-packages (0.9.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.4.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from DoubleML) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.5.2)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from DoubleML) (0.14.4)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from DoubleML) (5.24.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (24.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->DoubleML) (3.5.0)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->DoubleML) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->DoubleML) (1.17.0)\n"]}],"source":["# Install the DoubleML package, upgrading to the latest version if it's already installed.\n","# !: This symbol in a Colab notebook indicates that the following command should be run in the system shell (like a terminal), not within the Python interpreter.\n","!pip install -U DoubleML\n","\n","import graphviz as gr  # For creating and visualizing directed acyclic graphs (DAGs)\n","\n","import statsmodels.formula.api as smf  # For statistical modeling using R-style formulas\n","\n","from matplotlib.colors import ListedColormap  # For creating custom colormaps for visualizations\n","import seaborn as sns  # For statistical data visualization based on matplotlib\n","\n","from sklearn.model_selection import KFold, RepeatedKFold  # For cross-validation techniques\n","from sklearn.base import clone  # For cloning estimator objects\n","\n","from sklearn.tree import DecisionTreeRegressor  # For Decision Tree regression models\n","from sklearn.ensemble import RandomForestRegressor  # For Random Forest regression models\n","from xgboost import XGBRegressor  # For XGBoost regression models\n","\n","import doubleml as dml  # For Double/Debiased Machine Learning\n","from doubleml import DoubleMLClusterData  # For DoubleML data handling with clustered data"]},{"cell_type":"markdown","metadata":{"id":"ig21KQ8v5r_B"},"source":["# Regression Analysis in thousand kilometers"]},{"cell_type":"code","source":["final_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/final_data_with_confounders.csv')"],"metadata":{"id":"O-kqfYuGoxa1","executionInfo":{"status":"ok","timestamp":1734346088005,"user_tz":-60,"elapsed":43,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","execution_count":94,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734346088006,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"68add6f7-9ed4-4ebf-d382-4f08bca81ccd","id":"buBjX9Au5r_E"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column data types:\n","country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n","\n","Columns with non-numeric values:\n","- country_code\n","  Example non-numeric values: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA']\n","\n","Columns with null values:\n","environmental_awareness    100\n","dtype: int64\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","# Check data types of columns\n","data_types = final_data.dtypes\n","print(\"Column data types:\")\n","print(data_types)\n","\n","# Function to check for non-numeric values\n","def check_non_numeric(column):\n","    return column.apply(lambda x: not pd.api.types.is_numeric_dtype(type(x)))\n","\n","# Check for non-numeric values in each column\n","non_numeric = final_data.apply(check_non_numeric)\n","\n","print(\"\\nColumns with non-numeric values:\")\n","for column, has_non_numeric in non_numeric.items():\n","    if has_non_numeric.any():\n","        print(f\"- {column}\")\n","        non_numeric_values = final_data[column][check_non_numeric(final_data[column])]\n","        print(f\"  Example non-numeric values: {non_numeric_values.unique()[:5]}\")\n","\n","# Check for NaN or null values\n","null_counts = final_data.isnull().sum()\n","print(\"\\nColumns with null values:\")\n","print(null_counts[null_counts > 0])\n"]},{"cell_type":"code","execution_count":95,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734346088008,"user_tz":-60,"elapsed":39,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"edf81890-b3cf-4001-dd1d-832fcc467e73","id":"bSqA4Tyj5r_F"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n"]}],"source":["import pandas as pd\n","\n","# Assuming your dataframe is named 'final_data'\n","\n","# Convert 'GDP per capita (current US$)' to numeric\n","final_data['gdp_per_capita'] = pd.to_numeric(final_data['gdp_per_capita'], errors='coerce')\n","\n","# Convert 'Urban population (% of total population)' to numeric\n","final_data['urbanization_rate'] = pd.to_numeric(final_data['urbanization_rate'], errors='coerce')\n","\n","# Verify the data types\n","print(final_data.dtypes)\n"]},{"cell_type":"code","source":["# Create a new dataframe with data from 2002 to 2012, excluding Slovakia\n","final_data_from_2002 = final_data[(final_data['year'] >= 2002) &\n","                      (final_data['year'] <= 2012) &\n","                      (final_data['country_code'] != 'SVK')].copy()\n","\n","# Reset the index of the new dataframe\n","final_data_from_2002.reset_index(drop=True, inplace=True)\n","\n","# Display the first few rows of the new dataframe\n","print(final_data_from_2002.head())\n","\n","# Display the shape of the new dataframe\n","print(\"Shape of the new dataframe:\", final_data_from_2002.shape)\n","\n","# Verify that Slovakia is not in the new dataframe\n","print(\"Countries in the new dataframe:\", final_data_from_2002['country_code'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PflA6JdVLg6z","executionInfo":{"status":"ok","timestamp":1734346088009,"user_tz":-60,"elapsed":33,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"a7a7487b-566a-4f13-c57c-9dc3d78dc8a5"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["  country_code  year  oecd_eps  annual_transport_trends  \\\n","0          BEL  2002  1.212500             109420000000   \n","1          BEL  2003  1.170833             108380000000   \n","2          BEL  2004  1.983333             109690000000   \n","3          BEL  2005  2.445833             109420000000   \n","4          BEL  2006  2.404167             109920000000   \n","\n","   electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                      0.885        10332973.0                   10.589402   \n","1                      0.886        10376260.0                   10.444997   \n","2                      0.864        10421292.0                   10.525566   \n","3                      0.881        10478886.0                   10.441950   \n","4                      0.886        10548442.0                   10.420496   \n","\n","   gdp_per_capita  urbanization_rate  environmental_awareness  \\\n","0       25.006191             97.241                 2.075188   \n","1       30.655209             97.296                 2.073389   \n","2       35.429408             97.350                 2.071590   \n","3       36.809701             97.403                 2.046368   \n","4       38.705107             97.454                 2.021146   \n","\n","   corruption_perception_index  industry_composition     IV  \n","0                          7.1             23.787336  462.0  \n","1                          7.6             23.226655  464.0  \n","2                          7.5             22.959999  467.0  \n","3                          7.4             22.573778  468.0  \n","4                          7.3             22.139926  470.0  \n","Shape of the new dataframe: (143, 13)\n","Countries in the new dataframe: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA' 'DEU' 'HUN' 'NOR' 'POL' 'ESP' 'SWE' 'CHE'\n"," 'GBR']\n"]}]},{"cell_type":"markdown","metadata":{"id":"wW6xdMZA5r_H"},"source":["### Simple linear regression with environmental awareness (years 2002-2012, excluding Slovakia)"]},{"cell_type":"code","execution_count":97,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734346088009,"user_tz":-60,"elapsed":28,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"e4e9c375-39c1-480f-bcf9-46bdb36f9177","id":"EuAAW19Y5r_I"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.067\n","Model:                            OLS   Adj. R-squared:                  0.061\n","Method:                 Least Squares   F-statistic:                     8.275\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):             0.0139\n","Time:                        10:48:07   Log-Likelihood:                -130.84\n","No. Observations:                 143   AIC:                             265.7\n","Df Residuals:                     141   BIC:                             271.6\n","Df Model:                           1                                         \n","Covariance Type:              cluster                                         \n","==============================================================================================\n","                                 coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------------------\n","Intercept                      1.9954      0.181     11.013      0.000       1.601       2.390\n","transport_trend_per_person     0.0628      0.022      2.877      0.014       0.015       0.110\n","==============================================================================\n","Omnibus:                        3.640   Durbin-Watson:                   0.686\n","Prob(Omnibus):                  0.162   Jarque-Bera (JB):                3.570\n","Skew:                          -0.384   Prob(JB):                        0.168\n","Kurtosis:                       2.911   Cond. No.                         38.0\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n"]}],"source":["# Define the model formula without controls\n","model_formula_no_controls = 'oecd_eps ~ transport_trend_per_person'\n","\n","# Fit the model using ordinary least squares (OLS)\n","# Use clustered standard errors\n","slr = smf.ols(formula=model_formula_no_controls, data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']}, use_t = True)\n","\n","# Store the model summary in a variable\n","slr_summary = slr.summary\n","\n","\n","# Print the model summary\n","print(slr.summary())"]},{"cell_type":"markdown","metadata":{"id":"rVGE4dvW5r_J"},"source":["### Multiple linear regression modell with environmental awareness (years 2002-2012, excluding Slovakia)"]},{"cell_type":"code","execution_count":98,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734346088010,"user_tz":-60,"elapsed":22,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"b3655f67-15d0-46d0-f229-eb23e0de3968","id":"EJuuL6ui5r_L"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.231\n","Model:                            OLS   Adj. R-squared:                  0.197\n","Method:                 Least Squares   F-statistic:                     11.32\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):           0.000244\n","Time:                        10:48:07   Log-Likelihood:                -117.05\n","No. Observations:                 143   AIC:                             248.1\n","Df Residuals:                     136   BIC:                             268.8\n","Df Model:                           6                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           3.6639      1.360      2.694      0.020       0.701       6.627\n","transport_trend_per_person     -0.0765      0.082     -0.935      0.368      -0.255       0.102\n","gdp_per_capita                  0.0165      0.005      3.132      0.009       0.005       0.028\n","urbanization_rate              -0.0056      0.018     -0.304      0.767      -0.045       0.034\n","environmental_awareness         0.1324      0.655      0.202      0.843      -1.295       1.560\n","corruption_perception_index     0.0435      0.081      0.538      0.600      -0.133       0.219\n","industry_composition           -0.0448      0.027     -1.667      0.121      -0.103       0.014\n","==============================================================================\n","Omnibus:                        6.456   Durbin-Watson:                   0.628\n","Prob(Omnibus):                  0.040   Jarque-Bera (JB):                6.413\n","Skew:                          -0.478   Prob(JB):                       0.0405\n","Kurtosis:                       2.595   Cond. No.                     1.49e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 1.49e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}],"source":["import pandas as pd\n","import statsmodels.api as sm\n","\n","# Select the variables for the regression\n","X = final_data_from_2002[['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate', 'environmental_awareness',\n","                'corruption_perception_index', 'industry_composition']]\n","y = final_data_from_2002['oecd_eps']\n","\n","# Add a constant term to the independent variables\n","X = sm.add_constant(X)\n","\n","# Fit the regression model\n","mlr = sm.OLS(y, X).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']}, use_t = True)\n","\n","# Store the model summary in a variable\n","mlr_summary = mlr.summary\n","\n","# Print the summary of the regression results\n","print(mlr.summary())"]},{"cell_type":"code","source":["#Table 2: Basic OLS table\n","# Creating models with progressive controls\n","model1 = smf.ols('oecd_eps ~ transport_trend_per_person', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","model2 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","model3 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","model4 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + environmental_awareness', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","model5 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + environmental_awareness + industry_composition', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","model6 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + environmental_awareness + industry_composition + corruption_perception_index', data=final_data_from_2002).fit(cov_type='cluster', cov_kwds={'groups': final_data_from_2002['country_code']})\n","\n","# Using Stargazer to create a regression table\n","stargazer = Stargazer([model1, model2, model3, model4, model5, model6])\n","\n","# Displaying the table\n","stargazer.significant_digits(3)\n","stargazer"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":544},"id":"Z6TlLFgmLgte","executionInfo":{"status":"ok","timestamp":1734346088253,"user_tz":-60,"elapsed":27,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"580fa4e5-d4bc-4b94-ff5a-7fba066fa310"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<stargazer.stargazer.Stargazer at 0x7b6360272da0>"],"text/html":["<table style=\"text-align:center\"><tr><td colspan=\"7\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align:left\"></td><td colspan=\"6\"><em>Dependent variable: oecd_eps</em></td></tr><tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td><td>(3)</td><td>(4)</td><td>(5)</td><td>(6)</td></tr>\n","<tr><td colspan=\"7\" style=\"border-bottom: 1px solid black\"></td></tr>\n","\n","<tr><td style=\"text-align:left\">Intercept</td><td>1.995<sup>***</sup></td><td>2.210<sup>***</sup></td><td>2.070<sup>*</sup></td><td>2.860<sup>**</sup></td><td>3.814<sup>**</sup></td><td>3.664<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.181)</td><td>(0.209)</td><td>(1.068)</td><td>(1.429)</td><td>(1.486)</td><td>(1.360)</td></tr>\n","<tr><td style=\"text-align:left\">corruption_perception_index</td><td></td><td></td><td></td><td></td><td></td><td>0.043<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td></td><td></td><td>(0.081)</td></tr>\n","<tr><td style=\"text-align:left\">environmental_awareness</td><td></td><td></td><td></td><td>-0.411<sup></sup></td><td>0.066<sup></sup></td><td>0.132<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td>(0.544)</td><td>(0.642)</td><td>(0.655)</td></tr>\n","<tr><td style=\"text-align:left\">gdp_per_capita</td><td></td><td>0.012<sup>**</sup></td><td>0.012<sup>**</sup></td><td>0.012<sup>**</sup></td><td>0.017<sup>***</sup></td><td>0.017<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td>(0.006)</td><td>(0.006)</td><td>(0.005)</td><td>(0.006)</td><td>(0.005)</td></tr>\n","<tr><td style=\"text-align:left\">industry_composition</td><td></td><td></td><td></td><td></td><td>-0.043<sup>*</sup></td><td>-0.045<sup>*</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td></td><td>(0.025)</td><td>(0.027)</td></tr>\n","<tr><td style=\"text-align:left\">transport_trend_per_person</td><td>0.063<sup>***</sup></td><td>-0.009<sup></sup></td><td>-0.015<sup></sup></td><td>0.001<sup></sup></td><td>-0.051<sup></sup></td><td>-0.076<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.022)</td><td>(0.035)</td><td>(0.053)</td><td>(0.053)</td><td>(0.081)</td><td>(0.082)</td></tr>\n","<tr><td style=\"text-align:left\">urbanization_rate</td><td></td><td></td><td>0.003<sup></sup></td><td>0.002<sup></sup></td><td>-0.005<sup></sup></td><td>-0.006<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td>(0.019)</td><td>(0.020)</td><td>(0.019)</td><td>(0.018)</td></tr>\n","\n","<td colspan=\"7\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align: left\">Observations</td><td>143</td><td>143</td><td>143</td><td>143</td><td>143</td><td>143</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.067</td><td>0.138</td><td>0.138</td><td>0.153</td><td>0.227</td><td>0.231</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>0.061</td><td>0.125</td><td>0.120</td><td>0.129</td><td>0.199</td><td>0.197</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.608 (df=141)</td><td>0.587 (df=140)</td><td>0.589 (df=139)</td><td>0.586 (df=138)</td><td>0.562 (df=137)</td><td>0.563 (df=136)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>8.275<sup>***</sup> (df=1; 141)</td><td>3.256<sup>**</sup> (df=2; 140)</td><td>2.440<sup>*</sup> (df=3; 139)</td><td>3.061<sup>**</sup> (df=4; 138)</td><td>4.322<sup>***</sup> (df=5; 137)</td><td>11.317<sup>***</sup> (df=6; 136)</td></tr>\n","<tr><td colspan=\"7\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td><td colspan=\"6\" style=\"text-align: right\"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr></table>"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data = {\n","    'Model': ['Without Controls', 'With Controls'],\n","    'coef': [slr.params['transport_trend_per_person'], mlr.params['transport_trend_per_person']],\n","    '2.5 %': [slr.conf_int().loc['transport_trend_per_person', 0], mlr.conf_int().loc['transport_trend_per_person', 0]],\n","    '97.5 %': [slr.conf_int().loc['transport_trend_per_person', 1], mlr.conf_int().loc['transport_trend_per_person', 1]],\n","    'P>|t|': [slr.pvalues['transport_trend_per_person'], mlr.pvalues['transport_trend_per_person']]  # Add p-value\n","}\n","summary_df = pd.DataFrame(summary_data).set_index('Model')\n","\n","# Print the summary\n","print(summary_df[['coef', 'P>|t|', '2.5 %', '97.5 %']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cGy0omqWAGKx","executionInfo":{"status":"ok","timestamp":1734346088254,"user_tz":-60,"elapsed":26,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d91f99bc-394c-4f90-ad20-c344af4da99a"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["                      coef     P>|t|     2.5 %    97.5 %\n","Model                                                   \n","Without Controls  0.062819  0.013916  0.015240  0.110398\n","With Controls    -0.076463  0.368094 -0.254592  0.101667\n"]}]},{"cell_type":"markdown","metadata":{"id":"2j0EHEbk5r_N"},"source":["### Including fixed effects into Multiple linear regression"]},{"cell_type":"code","execution_count":101,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346088254,"user_tz":-60,"elapsed":20,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"A5XvTwRd5r_O","colab":{"base_uri":"https://localhost:8080/","height":258},"outputId":"983e85b8-3804-47f3-ec8b-29c89a787ff6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL           2.175758                   10.353920       40.023140   \n","CHE           2.541667                   10.675758       65.934988   \n","CZE           2.319697                    6.566351       16.468792   \n","DEU           2.840909                   10.720453       38.320524   \n","DNK           3.164773                   10.804912       52.754622   \n","\n","              urbanization_rate  environmental_awareness  \\\n","country_code                                               \n","BEL                   97.500000                 2.071777   \n","CHE                   73.529091                 1.866190   \n","CZE                   73.470273                 2.321040   \n","DEU                   76.355364                 2.157975   \n","DNK                   86.223455                 2.108209   \n","\n","              corruption_perception_index  industry_composition  \n","country_code                                                     \n","BEL                              7.318182             21.901167  \n","CHE                              8.881818             25.524705  \n","CZE                              5.063636             33.423039  \n","DEU                              7.900000             26.574626  \n","DNK                              8.818182             21.552348  "],"text/html":["\n","  <div id=\"df-9ae17349-dd25-43d3-93d0-78b758bfa34b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>2.175758</td>\n","      <td>10.353920</td>\n","      <td>40.023140</td>\n","      <td>97.500000</td>\n","      <td>2.071777</td>\n","      <td>7.318182</td>\n","      <td>21.901167</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>2.541667</td>\n","      <td>10.675758</td>\n","      <td>65.934988</td>\n","      <td>73.529091</td>\n","      <td>1.866190</td>\n","      <td>8.881818</td>\n","      <td>25.524705</td>\n","    </tr>\n","    <tr>\n","      <th>CZE</th>\n","      <td>2.319697</td>\n","      <td>6.566351</td>\n","      <td>16.468792</td>\n","      <td>73.470273</td>\n","      <td>2.321040</td>\n","      <td>5.063636</td>\n","      <td>33.423039</td>\n","    </tr>\n","    <tr>\n","      <th>DEU</th>\n","      <td>2.840909</td>\n","      <td>10.720453</td>\n","      <td>38.320524</td>\n","      <td>76.355364</td>\n","      <td>2.157975</td>\n","      <td>7.900000</td>\n","      <td>26.574626</td>\n","    </tr>\n","    <tr>\n","      <th>DNK</th>\n","      <td>3.164773</td>\n","      <td>10.804912</td>\n","      <td>52.754622</td>\n","      <td>86.223455</td>\n","      <td>2.108209</td>\n","      <td>8.818182</td>\n","      <td>21.552348</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ae17349-dd25-43d3-93d0-78b758bfa34b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9ae17349-dd25-43d3-93d0-78b758bfa34b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9ae17349-dd25-43d3-93d0-78b758bfa34b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-598875ea-d3b8-42f0-bf30-4f81b44b2ec9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-598875ea-d3b8-42f0-bf30-4f81b44b2ec9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-598875ea-d3b8-42f0-bf30-4f81b44b2ec9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mean_final_data","summary":"{\n  \"name\": \"mean_final_data\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"POL\",\n          \"HUN\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3136415470793367,\n        \"min\": 2.1662879206917633,\n        \"max\": 3.1647727055983093,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          2.1662879206917633,\n          2.4768939343365726,\n          2.1757575707002093\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6683937641894926,\n        \"min\": 4.334796445532768,\n        \"max\": 11.843844543082433,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.334796445532768,\n          5.109474872300122,\n          10.353919868974236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.714188767254004,\n        \"min\": 10.064958971446652,\n        \"max\": 77.0532341050003,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          10.064958971446652,\n          11.937889546668583,\n          40.0231404736648\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.95817787057504,\n        \"min\": 61.22681818181818,\n        \"max\": 97.5,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          61.22681818181818,\n          67.40881818181818,\n          97.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2052924760106922,\n        \"min\": 1.773220019049132,\n        \"max\": 2.4964438927956856,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          2.055400318859187,\n          1.773220019049132,\n          2.0717774157687816\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6993766230508813,\n        \"min\": 4.418181818181818,\n        \"max\": 9.381818181818183,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.418181818181818,\n          5.0,\n          7.318181818181818\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.1069249025648755,\n        \"min\": 19.058218305454545,\n        \"max\": 36.81849724818182,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          28.866746582727274,\n          26.117718816363638,\n          21.901167450909092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":101}],"source":["# compute means by country\n","y = \"oecd_eps\"\n","X = ['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate', 'environmental_awareness',\n","                'corruption_perception_index', 'industry_composition']\n","mean_final_data = final_data_from_2002.groupby(\"country_code\")[[y] + X].mean()\n","mean_final_data.head()"]},{"cell_type":"code","execution_count":102,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346088621,"user_tz":-60,"elapsed":383,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"Em1B3HRz5r_O","colab":{"base_uri":"https://localhost:8080/","height":258},"outputId":"7d54a6d4-f25d-42a1-ae22-e58eb88d2698"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL          -0.963258                    0.235482      -15.016949   \n","BEL          -1.004924                    0.091077       -9.367931   \n","BEL          -0.192424                    0.171646       -4.593733   \n","BEL           0.270076                    0.088030       -3.213439   \n","BEL           0.228409                    0.066576       -1.318034   \n","\n","              urbanization_rate  environmental_awareness  \\\n","country_code                                               \n","BEL                      -0.259                 0.003411   \n","BEL                      -0.204                 0.001611   \n","BEL                      -0.150                -0.000188   \n","BEL                      -0.097                -0.025409   \n","BEL                      -0.046                -0.050631   \n","\n","              corruption_perception_index  industry_composition  \n","country_code                                                     \n","BEL                             -0.218182              1.886169  \n","BEL                              0.281818              1.325487  \n","BEL                              0.181818              1.058831  \n","BEL                              0.081818              0.672611  \n","BEL                             -0.018182              0.238758  "],"text/html":["\n","  <div id=\"df-9444a6d9-4f60-431a-9a63-a5caa3b6fa91\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.963258</td>\n","      <td>0.235482</td>\n","      <td>-15.016949</td>\n","      <td>-0.259</td>\n","      <td>0.003411</td>\n","      <td>-0.218182</td>\n","      <td>1.886169</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-1.004924</td>\n","      <td>0.091077</td>\n","      <td>-9.367931</td>\n","      <td>-0.204</td>\n","      <td>0.001611</td>\n","      <td>0.281818</td>\n","      <td>1.325487</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.192424</td>\n","      <td>0.171646</td>\n","      <td>-4.593733</td>\n","      <td>-0.150</td>\n","      <td>-0.000188</td>\n","      <td>0.181818</td>\n","      <td>1.058831</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>0.270076</td>\n","      <td>0.088030</td>\n","      <td>-3.213439</td>\n","      <td>-0.097</td>\n","      <td>-0.025409</td>\n","      <td>0.081818</td>\n","      <td>0.672611</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>0.228409</td>\n","      <td>0.066576</td>\n","      <td>-1.318034</td>\n","      <td>-0.046</td>\n","      <td>-0.050631</td>\n","      <td>-0.018182</td>\n","      <td>0.238758</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9444a6d9-4f60-431a-9a63-a5caa3b6fa91')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9444a6d9-4f60-431a-9a63-a5caa3b6fa91 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9444a6d9-4f60-431a-9a63-a5caa3b6fa91');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-82e82d41-a828-4832-b364-6197601a6aa4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82e82d41-a828-4832-b364-6197601a6aa4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-82e82d41-a828-4832-b364-6197601a6aa4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demeaned_final_data","summary":"{\n  \"name\": \"demeaned_final_data\",\n  \"rows\": 143,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"POL\",\n          \"HUN\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.550062442095036,\n        \"min\": -1.2954545888034001,\n        \"max\": 1.2170455780896,\n        \"num_unique_values\": 125,\n        \"samples\": [\n          0.7499998699534638,\n          -0.002272800965709365,\n          0.3007575598630181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3001210636850021,\n        \"min\": -0.7818248693053778,\n        \"max\": 0.8814637525203715,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          0.14706801447966278,\n          0.3051642342678438,\n          -0.11747545597898146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.97264468935008,\n        \"min\": -33.8826769305013,\n        \"max\": 25.122685193373698,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          3.294335961518101,\n          10.596385017468862,\n          3.9979437856580446\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7264585311214811,\n        \"min\": -2.3278181818181736,\n        \"max\": 2.2691818181818206,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          0.5561818181818126,\n          0.07790909090908826,\n          -0.004181818181820063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0647625695545941,\n        \"min\": -0.28440893741481554,\n        \"max\": 0.20596312688260565,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          0.015692278630959233,\n          -0.017461603928717206,\n          -0.03290442002825289\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7237953035805603,\n        \"min\": -5.5181818181818185,\n        \"max\": 4.4363636363636365,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          -0.01818181818181852,\n          -0.1363636363636367,\n          -0.2818181818181831\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3808624828760772,\n        \"min\": -4.70909982909091,\n        \"max\": 3.9930933118181784,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          -1.949422538181821,\n          -0.8301788890909094,\n          0.0785208845454548\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":102}],"source":["# compute demeaned df\n","demeaned_final_data = (final_data_from_2002\n","               .set_index(\"country_code\") # set the index as the person indicator\n","               [[y] + X]\n","               - mean_final_data) # subtract the mean data\n","\n","demeaned_final_data.head()"]},{"cell_type":"code","execution_count":103,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346088621,"user_tz":-60,"elapsed":33,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"CL4GlleK5r_P","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"be9042fe-1ad4-489f-80ce-8df5afcec468"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<tr>\n","               <td></td>                  <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th>                   <td> 2.602e-18</td> <td>    0.032</td> <td> 8.15e-17</td> <td> 1.000</td> <td>   -0.063</td> <td>    0.063</td>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>  <td>    0.0988</td> <td>    0.118</td> <td>    0.835</td> <td> 0.405</td> <td>   -0.135</td> <td>    0.333</td>\n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>         <td>    0.0351</td> <td>    0.005</td> <td>    7.776</td> <td> 0.000</td> <td>    0.026</td> <td>    0.044</td>\n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>      <td>    0.1171</td> <td>    0.062</td> <td>    1.889</td> <td> 0.061</td> <td>   -0.005</td> <td>    0.240</td>\n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th> <td>    0.0632</td> <td>    0.046</td> <td>    1.372</td> <td> 0.172</td> <td>   -0.028</td> <td>    0.154</td>\n","</tr>\n","<tr>\n","  <th>industry_composition</th>        <td>   -0.0822</td> <td>    0.028</td> <td>   -2.897</td> <td> 0.004</td> <td>   -0.138</td> <td>   -0.026</td>\n","</tr>\n","<tr>\n","  <th>environmental_awareness</th>     <td>    0.9597</td> <td>    0.508</td> <td>    1.890</td> <td> 0.061</td> <td>   -0.045</td> <td>    1.964</td>\n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}                     &    2.602e-18  &        0.032     &  8.15e-17  &         1.000        &       -0.063    &        0.063     \\\\\n\\textbf{transport\\_trend\\_per\\_person} &       0.0988  &        0.118     &     0.835  &         0.405        &       -0.135    &        0.333     \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0351  &        0.005     &     7.776  &         0.000        &        0.026    &        0.044     \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.1171  &        0.062     &     1.889  &         0.061        &       -0.005    &        0.240     \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0632  &        0.046     &     1.372  &         0.172        &       -0.028    &        0.154     \\\\\n\\textbf{industry\\_composition}         &      -0.0822  &        0.028     &    -2.897  &         0.004        &       -0.138    &       -0.026     \\\\\n\\textbf{environmental\\_awareness}      &       0.9597  &        0.508     &     1.890  &         0.061        &       -0.045    &        1.964     \\\\\n\\bottomrule\n\\end{tabular}\n\\end{center}"},"metadata":{},"execution_count":103}],"source":["# compute with ols fe estimator\n","est_fe = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition + environmental_awareness\", data=demeaned_final_data).fit()\n","est_fe.summary().tables[1]"]},{"cell_type":"code","source":["final_data_from_2002.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"eOOk1gFr-Ngi","executionInfo":{"status":"ok","timestamp":1734346088622,"user_tz":-60,"elapsed":29,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"37c9bf1f-bd87-4a25-9073-f9009b693da1"},"execution_count":104,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  country_code  year  oecd_eps  annual_transport_trends  \\\n","0          BEL  2002  1.212500             109420000000   \n","1          BEL  2003  1.170833             108380000000   \n","2          BEL  2004  1.983333             109690000000   \n","3          BEL  2005  2.445833             109420000000   \n","4          BEL  2006  2.404167             109920000000   \n","\n","   electoral_democracy_index  total_population  transport_trend_per_person  \\\n","0                      0.885        10332973.0                   10.589402   \n","1                      0.886        10376260.0                   10.444997   \n","2                      0.864        10421292.0                   10.525566   \n","3                      0.881        10478886.0                   10.441950   \n","4                      0.886        10548442.0                   10.420496   \n","\n","   gdp_per_capita  urbanization_rate  environmental_awareness  \\\n","0       25.006191             97.241                 2.075188   \n","1       30.655209             97.296                 2.073389   \n","2       35.429408             97.350                 2.071590   \n","3       36.809701             97.403                 2.046368   \n","4       38.705107             97.454                 2.021146   \n","\n","   corruption_perception_index  industry_composition     IV  \n","0                          7.1             23.787336  462.0  \n","1                          7.6             23.226655  464.0  \n","2                          7.5             22.959999  467.0  \n","3                          7.4             22.573778  468.0  \n","4                          7.3             22.139926  470.0  "],"text/html":["\n","  <div id=\"df-1fbcadae-6e7b-4dff-bce8-0b909ce5c199\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country_code</th>\n","      <th>year</th>\n","      <th>oecd_eps</th>\n","      <th>annual_transport_trends</th>\n","      <th>electoral_democracy_index</th>\n","      <th>total_population</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>environmental_awareness</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","      <th>IV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BEL</td>\n","      <td>2002</td>\n","      <td>1.212500</td>\n","      <td>109420000000</td>\n","      <td>0.885</td>\n","      <td>10332973.0</td>\n","      <td>10.589402</td>\n","      <td>25.006191</td>\n","      <td>97.241</td>\n","      <td>2.075188</td>\n","      <td>7.1</td>\n","      <td>23.787336</td>\n","      <td>462.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BEL</td>\n","      <td>2003</td>\n","      <td>1.170833</td>\n","      <td>108380000000</td>\n","      <td>0.886</td>\n","      <td>10376260.0</td>\n","      <td>10.444997</td>\n","      <td>30.655209</td>\n","      <td>97.296</td>\n","      <td>2.073389</td>\n","      <td>7.6</td>\n","      <td>23.226655</td>\n","      <td>464.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BEL</td>\n","      <td>2004</td>\n","      <td>1.983333</td>\n","      <td>109690000000</td>\n","      <td>0.864</td>\n","      <td>10421292.0</td>\n","      <td>10.525566</td>\n","      <td>35.429408</td>\n","      <td>97.350</td>\n","      <td>2.071590</td>\n","      <td>7.5</td>\n","      <td>22.959999</td>\n","      <td>467.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BEL</td>\n","      <td>2005</td>\n","      <td>2.445833</td>\n","      <td>109420000000</td>\n","      <td>0.881</td>\n","      <td>10478886.0</td>\n","      <td>10.441950</td>\n","      <td>36.809701</td>\n","      <td>97.403</td>\n","      <td>2.046368</td>\n","      <td>7.4</td>\n","      <td>22.573778</td>\n","      <td>468.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BEL</td>\n","      <td>2006</td>\n","      <td>2.404167</td>\n","      <td>109920000000</td>\n","      <td>0.886</td>\n","      <td>10548442.0</td>\n","      <td>10.420496</td>\n","      <td>38.705107</td>\n","      <td>97.454</td>\n","      <td>2.021146</td>\n","      <td>7.3</td>\n","      <td>22.139926</td>\n","      <td>470.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1fbcadae-6e7b-4dff-bce8-0b909ce5c199')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1fbcadae-6e7b-4dff-bce8-0b909ce5c199 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1fbcadae-6e7b-4dff-bce8-0b909ce5c199');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1e56c021-1f99-4d4e-a369-48781d2ee124\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1e56c021-1f99-4d4e-a369-48781d2ee124')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1e56c021-1f99-4d4e-a369-48781d2ee124 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_data_from_2002","summary":"{\n  \"name\": \"final_data_from_2002\",\n  \"rows\": 143,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"CHE\",\n          \"ESP\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2002,\n        \"max\": 2012,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          2007,\n          2002,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6277038900901689,\n        \"min\": 1.1041666269302,\n        \"max\": 4.0749998092651,\n        \"num_unique_values\": 110,\n        \"samples\": [\n          2.0791666507721,\n          2.4666666984558,\n          2.4041666984558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"annual_transport_trends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 285251186411,\n        \"min\": 46300000000,\n        \"max\": 896300000000,\n        \"num_unique_values\": 140,\n        \"samples\": [\n          107322000000,\n          52315000000,\n          58300000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"electoral_democracy_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.022992800315423147,\n        \"min\": 0.773,\n        \"max\": 0.922,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          0.916,\n          0.887,\n          0.857\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26141299.928702034,\n        \"min\": 4538014.0,\n        \"max\": 82111616.0,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          9298740.0,\n          10464036.0,\n          4709010.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.590167287229226,\n        \"min\": 3.55297157622739,\n        \"max\": 12.500892544008156,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          11.71094148239439,\n          6.075093778347092,\n          11.651281267187796\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.018751789092445,\n        \"min\": 5.207129304207,\n        \"max\": 102.175919298374,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          46.9469602719954,\n          19.9600684872157,\n          85.5022677087731\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.667488574995389,\n        \"min\": 60.654,\n        \"max\": 97.744,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          84.902,\n          73.255,\n          78.234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"environmental_awareness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20825761288767994,\n        \"min\": 1.65532199681484,\n        \"max\": 2.51939655172414,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          2.395055247532535,\n          2.34978884919134,\n          2.492083537659095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.791197547340862,\n        \"min\": 3.3,\n        \"max\": 9.7,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          3.4,\n          4.0,\n          6.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.113784842302144,\n        \"min\": 17.84573563,\n        \"max\": 40.81159056,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          22.40298075,\n          33.17075187,\n          37.61926027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.04522272526889,\n        \"min\": 259.0,\n        \"max\": 566.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          399.0,\n          420.0,\n          319.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# Canned method with clustering on country level\n","est_fe_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + corruption_perception_index + industry_composition + environmental_awareness + EntityEffects\",\n","                            data=final_data_from_2002.set_index([\"country_code\", \"year\"]))\n","\n","mlrFE = est_fe_canned.fit(cov_type='clustered', cluster_entity=True)\n","mlrFE.summary.tables[1]\n","\n","# Store the model summary in a variable\n","mlrFE_summary = mlrFE.summary\n","\n","\n","# Print the summary of the regression results\n","print(mlrFE_summary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ThAWsel9XvK","executionInfo":{"status":"ok","timestamp":1734346088622,"user_tz":-60,"elapsed":25,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"78f774e8-02bd-4ef3-b100-3a107caeb66b"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["                          PanelOLS Estimation Summary                           \n","================================================================================\n","Dep. Variable:               oecd_eps   R-squared:                        0.5383\n","Estimator:                   PanelOLS   R-squared (Between):             -12.155\n","No. Observations:                 143   R-squared (Within):               0.5383\n","Date:                Mon, Dec 16 2024   R-squared (Overall):             -11.619\n","Time:                        10:48:08   Log-likelihood                   -61.667\n","Cov. Estimator:             Clustered                                           \n","                                        F-statistic:                      24.100\n","Entities:                          13   P-value                           0.0000\n","Avg Obs:                       11.000   Distribution:                   F(6,124)\n","Min Obs:                       11.000                                           \n","Max Obs:                       11.000   F-statistic (robust):             26.988\n","                                        P-value                           0.0000\n","Time periods:                      11   Distribution:                   F(6,124)\n","Avg Obs:                       13.000                                           \n","Min Obs:                       13.000                                           \n","Max Obs:                       13.000                                           \n","                                                                                \n","                                      Parameter Estimates                                      \n","===============================================================================================\n","                             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n","-----------------------------------------------------------------------------------------------\n","transport_trend_per_person      0.0988     0.2974     0.3324     0.7402     -0.4897      0.6874\n","gdp_per_capita                  0.0351     0.0055     6.4237     0.0000      0.0243      0.0460\n","urbanization_rate               0.1171     0.1240     0.9448     0.3466     -0.1283      0.3625\n","corruption_perception_index     0.0632     0.0633     0.9985     0.3200     -0.0621      0.1886\n","industry_composition           -0.0822     0.0339    -2.4251     0.0167     -0.1494     -0.0151\n","environmental_awareness         0.9597     0.5325     1.8022     0.0739     -0.0943      2.0136\n","===============================================================================================\n","\n","F-test for Poolability: 12.086\n","P-value: 0.0000\n","Distribution: F(12,124)\n","\n","Included effects: Entity\n"]}]},{"cell_type":"code","execution_count":106,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346089017,"user_tz":-60,"elapsed":412,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"eHo6620u5r_Q","colab":{"base_uri":"https://localhost:8080/","height":468},"outputId":"f1fde831-bc7d-4b41-9e32-4a9926857521"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='transport_trend_per_person', ylabel='oecd_eps'>"]},"metadata":{},"execution_count":106},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# estimate ols and store fitted values\n","est_ols = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=final_data_from_2002).fit()\n","final_data_from_2002[\"fitted_values\"] = est_ols.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=final_data_from_2002, color = \"r\", s = 20)\n","\n","# plot ols fit line (crossing fitted values)\n","sns.lineplot(x='transport_trend_per_person', y='fitted_values', data=final_data_from_2002)"]},{"cell_type":"code","execution_count":107,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346090061,"user_tz":-60,"elapsed":1058,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"knrOnvH95r_Q","colab":{"base_uri":"https://localhost:8080/","height":450},"outputId":"2c4809c2-5a85-4e75-c137-a7f943af859d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# get number of countries\n","cou = np.unique(final_data_from_2002.loc[:,\"country_code\"].values)\n","colors = sns.color_palette(n_colors=len(cou)).as_hex()\n","\n","# estimate ols and store fitted values\n","est_ols = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=final_data_from_2002).fit()\n","final_data_from_2002[\"fitted_values\"] = est_ols.fittedvalues\n","\n","# estimate fe with dummies and store fitted values\n","est_fe = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + C(country_code)\", data=final_data_from_2002).fit()\n","final_data_from_2002[\"fitted_values_fe\"] = est_fe.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=final_data_from_2002, hue=\"country_code\", legend = False,\n","                palette = colors)\n","\n","# plot fe fit lines (crossing fitted values)\n","for i in range(len(cou)):\n","    df_temp = final_data_from_2002.query(f\"country_code=='{cou[i]}'\")\n","    sns.lineplot(x='transport_trend_per_person', y='fitted_values_fe', data=df_temp, hue=\"country_code\", legend = False)"]},{"cell_type":"markdown","metadata":{"id":"8ZvvCnro5r_R"},"source":["## Double machine learning without fixe effects"]},{"cell_type":"code","execution_count":108,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346090061,"user_tz":-60,"elapsed":24,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"BZJLzhWa5r_R","colab":{"base_uri":"https://localhost:8080/"},"outputId":"37dd46ac-0ac0-405d-eb45-c7a2f63772c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'environmental_awareness', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 143\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 143 entries, 0 to 142\n","Columns: 15 entries, country_code to fitted_values_fe\n","dtypes: float64(12), int64(2), object(1)\n","memory usage: 16.9+ KB\n","\n"]}],"source":["# Create a DoubleMLClusterData object to prepare the data for Double Machine Learning.\n","# This object specifies the outcome variable ('y'), treatment variable ('x'),\n","# clustering variable ('id'), and confounders ('x_cols').\n","obj_dml_data_from_df = DoubleMLClusterData(final_data_from_2002, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate', 'environmental_awareness',\n","                'corruption_perception_index', 'industry_composition'])\n","\n","# Print the DoubleMLClusterData object to display its properties and data information.\n","print(obj_dml_data_from_df)"]},{"cell_type":"code","execution_count":109,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346090062,"user_tz":-60,"elapsed":19,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"7judJ5L15r_S","colab":{"base_uri":"https://localhost:8080/"},"outputId":"636779f2-e17c-48ce-81b0-829f9c9c7503"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef  std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.041278  0.04624  0.892708  0.372014 -0.049349   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.131906  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_data_from_df,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_summary = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":110,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346094586,"user_tz":-60,"elapsed":4537,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"AN4o5NuI5r_S","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c46a69d5-23da-4f47-cd25-01e6ae16bf7b"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.009289  0.042038 -0.220974  0.825113 -0.091682   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.073104  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_data_from_df,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_summary = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":111,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346095103,"user_tz":-60,"elapsed":525,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"LsaUsKHj5r_T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c106c1f2-f882-4d6e-d4c9-0ee4ee7f3833"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.019695  0.027836 -0.707559  0.479219 -0.074253   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.034862  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(n_jobs=1,  # Number of parallel threads used to run XGBoost\n","                     objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","                     eta=0.1,  # Learning rate\n","                     n_estimators=35)  # Number of boosting rounds (trees)\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR(obj_dml_data_from_df,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_summary = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":112,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346095104,"user_tz":-60,"elapsed":9,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"8pQN-Dgl5r_T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b53158ad-0018-4b16-ab34-8ad318be03a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["            coef     P>|t|     2.5 %    97.5 %\n","slr     0.062819  0.013916  0.015240  0.110398\n","mlr    -0.076463  0.368094 -0.254592  0.101667\n","forest -0.009289  0.825113 -0.091682  0.073104\n","tree    0.041278  0.372014 -0.049349  0.131906\n","xgb    -0.019695  0.479219 -0.074253  0.034862\n"]}],"source":["\n","# Concatenate the summaries and update the index\n","plr_summary = pd.concat([summary_df, forest_summary, tree_summary, boost_summary])\n","plr_summary.index = ['slr', 'mlr','forest', 'tree', 'xgb']\n","\n","# Print the updated summary\n","print(plr_summary[['coef', 'P>|t|','2.5 %', '97.5 %']])"]},{"cell_type":"code","execution_count":122,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346142829,"user_tz":-60,"elapsed":1369,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"GALAc2on5r_U","colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"84ba9742-4f47-4374-bbef-7f6575f651ba"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAlIAAAHICAYAAACFygTLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB3YklEQVR4nO3deXhM1/8H8PdkksxkkYXshMSeEESQhhIlkqBKS2sJEjsVW4rSlggtpap2WkUovrSqqqpRlLaWWmuPtYk1C40kksh+fn/kl6kxScyMmSQT79fzzGPuuefe+zl3bmY+7j33XIkQQoCIiIiINGZU0QEQERERGSomUkRERERaYiJFREREpCUmUkRERERaYiJFREREpCUmUkRERERaYiJFREREpCUmUkRERERaYiJFREREpCUmUkQ68M0336Bx48YwMTGBjY2NxsvHx8dDIpFg4cKFug+uBHfu3IFcLseRI0fKZXuaCAsLg5ubm1bLurm5ISwsTDF96NAhSCQSHDp0SON1vfLKK5g6dara9SUSCWbNmqWYjo6OhkQiQXx8vMbbporxIseLoZs1axYkEolWy77I32xVwESqirhw4QL69OmDOnXqQC6Xo2bNmujSpQuWLVtW0aFVeVeuXEFYWBjq1auHNWvW4Kuvviq17p49e5R+bCvK7Nmz4evri3bt2lXI9u/fv49Zs2bh7NmzFbJ9dbz//vtYsWIFEhMTKzoUIqrEmEhVAUePHkWrVq1w7tw5jBgxAsuXL8fw4cNhZGSEJUuWVHR4Vd6hQ4dQWFiIJUuWICwsDO+8806pdffs2YOoqKhyjE7VgwcPsGHDBowePbrCYrh//z6ioqJKTKTWrFmDq1evln9Qz+jZsyesrKywcuVKrZYfNGgQnjx5gjp16ug4MtKXDh064MmTJ+jQoUNFh0IGxLiiA6AX98knn8Da2honT55UuayUnJxcMUFVICEEsrOzYWZmVi7bK97H2lzSqwibNm2CsbExevToUe7bzs/PR2FhYZl1TExMyimashkZGaFPnz7YuHEjoqKiNL7sIZVKIZVK9RTdiyssLERubi7kcrla9cv77yozMxMWFhblsq1iRkZGau8PomI8I1UF3Lx5E02aNCnxh9zBwUHxvrgfTnR0tEq9Z/t3FF8vv3btGgYOHAhra2vY29tjxowZEELgzp07iv+xOzk54fPP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IqpsmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWmEgRERERaYmJFBEREZGWDCaRSklJQUhICKysrGBjY4Nhw4YhIyOj1Prx8fGQSCQlvr777jtFvZLmb926tTyaRERERAbOuKIDUFdISAgSEhKwb98+5OXlYciQIRg5ciS2bNlSYn1XV1ckJCQolX311Vf47LPP0LVrV6Xy9evXIzg4WDFtY2Oj8/iJiIio6jGIRCo2NhYxMTE4efIkWrVqBQBYtmwZunXrhoULF8LFxUVlGalUCicnJ6WyH374Ae+88w4sLS2Vym1sbFTqEhERET2PQVzaO3bsGGxsbBRJFAAEBATAyMgIx48fV2sdp0+fxtmzZzFs2DCVeWPHjoWdnR3atGmDdevWQQhR5rpycnKQnp6u9CIiIqKXj0GckUpMTISDg4NSmbGxMapXr47ExES11rF27Vp4eHigbdu2SuWzZ89Gp06dYG5ujl9//RXvvvsuMjIyMH78+FLXNW/ePERFRWneECIiIqpSKvSM1LRp00rtEF78unLlygtv58mTJ9iyZUuJZ6NmzJiBdu3awdvbG++//z6mTp2Kzz77rMz1TZ8+HWlpaYrXnTt3XjhGIiIiMjwVekbqvffeQ1hYWJl16tatCycnJyQnJyuV5+fnIyUlRa2+Tdu3b0dWVhYGDx783Lq+vr6YM2cOcnJyIJPJSqwjk8lKnUdEREQvjwpNpOzt7WFvb//cen5+fkhNTcXp06fh4+MDAPjtt99QWFgIX1/f5y6/du1avPHGG2pt6+zZs7C1tWWiRERERM9lEH2kPDw8EBwcjBEjRmD16tXIy8tDeHg4+vXrp7hj7969e+jcuTM2btyINm3aKJa9ceMG/vjjD+zZs0dlvT/99BOSkpLwyiuvQC6XY9++fZg7dy4mT55cbm0jIiIiw2UQ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\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary.shape[0]), np.nan)\n","errors[0, :] = plr_summary['coef'] - plr_summary['2.5 %']\n","errors[1, :] = plr_summary['97.5 %'] - plr_summary['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary.index, plr_summary['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary.index[:2], plr_summary['coef'][:2], yerr=errors[:, :2], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary.index[6:], plr_summary['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FD)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the (partially) linear regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"]},{"cell_type":"markdown","metadata":{"id":"acfzNDsV5r_U"},"source":["### DML Including Fixed Effects"]},{"cell_type":"code","execution_count":114,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346095945,"user_tz":-60,"elapsed":13,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"Mxgn40m35r_X","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9681ddee-350b-4bf0-c91a-a32de3b04868"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'environmental_awareness', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 143\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 143 entries, 0 to 142\n","Columns: 8 entries, country_code to industry_composition\n","dtypes: float64(7), object(1)\n","memory usage: 9.1+ KB\n","\n"]}],"source":["# Reset the index to bring 'country_code' back as a column\n","demeaned_final_data = demeaned_final_data.reset_index()\n","\n","obj_dml_diff = DoubleMLClusterData(demeaned_final_data, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate', 'environmental_awareness',\n","                'corruption_perception_index', 'industry_composition'])\n","print(obj_dml_diff)"]},{"cell_type":"code","execution_count":115,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346103557,"user_tz":-60,"elapsed":7622,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"CsRWTl1E5r_X","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9da595c4-72be-4299-988c-a21d7c5a5329"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.026579  0.258055 -0.102997  0.917965 -0.532357   \n","\n","                            97.5 %  \n","transport_trend_per_person  0.4792  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_diff,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_diff_summary = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_diff_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":116,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346103559,"user_tz":-60,"elapsed":45,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"yExablZs5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"eb5813ea-9d8b-40cf-c5f3-589b6a05bb11"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.062632  0.257911  0.242841  0.808128 -0.442866   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.568129  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_diff,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_diff_summary = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":117,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346104314,"user_tz":-60,"elapsed":790,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"6q3EMm6n5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"32df6221-32f1-4cf8-a954-326fbdd27e10"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.059846  0.229663 -0.260583  0.794414 -0.509978   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.390286  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(\n","    n_jobs=1,  # Number of parallel threads used to run XGBoost\n","    objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","    eta=0.1,  # Learning rate\n","    n_estimators=50,  # Increased number of boosting rounds (trees)\n","    max_depth=7,  # Limit tree depth to prevent overfitting\n","    subsample=0.8,  # Use 80% of data for each tree to add robustness\n","    colsample_bytree=0.8  # Use 80% of features for each tree to reduce complexity\n",")\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR( obj_dml_diff,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_diff_summary = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_diff_summary)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","source":["#Instead, extract the table as HTML and read it into a DataFrame\n","mlrFE_summary = mlrFE_summary.tables[1].as_html() # Get the desired table as HTML\n","mlrFE_summary = pd.read_html(mlrFE_summary, header=0, index_col=0)[0] # Read HTML into DataFrame\n","\n","mlrFE_summary = pd.DataFrame(mlrFE_summary)\n","# Set first row as index and rename columns\n","mlrFE_summary = mlrFE_summary.rename(columns={\n","    'Parameter': 'coef',\n","    'Std. Err.': 'std err',\n","    'T-stat': 't',\n","    'P-value': 'P>|t|',\n","    'Lower CI': '2.5 %',\n","    'Upper CI': '97.5 %'\n","})\n","\n","# Keep only the transport_trend_per_person row\n","mlrFE_summary"],"metadata":{"id":"Ot1d_zhxR1uK","executionInfo":{"status":"ok","timestamp":1734346104315,"user_tz":-60,"elapsed":29,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":294},"outputId":"52c58545-be46-4767-db9a-d8c5cb4c74de"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-118-5d477da437d5>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlrFE_summary = pd.read_html(mlrFE_summary, header=0, index_col=0)[0] # Read HTML into DataFrame\n"]},{"output_type":"execute_result","data":{"text/plain":["                               coef  std err       t   P>|t|   2.5 %  97.5 %\n","transport_trend_per_person   0.0988   0.2974  0.3324  0.7402 -0.4897  0.6874\n","gdp_per_capita               0.0351   0.0055  6.4237  0.0000  0.0243  0.0460\n","urbanization_rate            0.1171   0.1240  0.9448  0.3466 -0.1283  0.3625\n","corruption_perception_index  0.0632   0.0633  0.9985  0.3200 -0.0621  0.1886\n","industry_composition        -0.0822   0.0339 -2.4251  0.0167 -0.1494 -0.0151\n","environmental_awareness      0.9597   0.5325  1.8022  0.0739 -0.0943  2.0136"],"text/html":["\n","  <div id=\"df-e7c639c8-d982-494a-a810-1b43cff5639e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.0988</td>\n","      <td>0.2974</td>\n","      <td>0.3324</td>\n","      <td>0.7402</td>\n","      <td>-0.4897</td>\n","      <td>0.6874</td>\n","    </tr>\n","    <tr>\n","      <th>gdp_per_capita</th>\n","      <td>0.0351</td>\n","      <td>0.0055</td>\n","      <td>6.4237</td>\n","      <td>0.0000</td>\n","      <td>0.0243</td>\n","      <td>0.0460</td>\n","    </tr>\n","    <tr>\n","      <th>urbanization_rate</th>\n","      <td>0.1171</td>\n","      <td>0.1240</td>\n","      <td>0.9448</td>\n","      <td>0.3466</td>\n","      <td>-0.1283</td>\n","      <td>0.3625</td>\n","    </tr>\n","    <tr>\n","      <th>corruption_perception_index</th>\n","      <td>0.0632</td>\n","      <td>0.0633</td>\n","      <td>0.9985</td>\n","      <td>0.3200</td>\n","      <td>-0.0621</td>\n","      <td>0.1886</td>\n","    </tr>\n","    <tr>\n","      <th>industry_composition</th>\n","      <td>-0.0822</td>\n","      <td>0.0339</td>\n","      <td>-2.4251</td>\n","      <td>0.0167</td>\n","      <td>-0.1494</td>\n","      <td>-0.0151</td>\n","    </tr>\n","    <tr>\n","      <th>environmental_awareness</th>\n","      <td>0.9597</td>\n","      <td>0.5325</td>\n","      <td>1.8022</td>\n","      <td>0.0739</td>\n","      <td>-0.0943</td>\n","      <td>2.0136</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7c639c8-d982-494a-a810-1b43cff5639e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e7c639c8-d982-494a-a810-1b43cff5639e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e7c639c8-d982-494a-a810-1b43cff5639e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d9ba5b57-6a8b-4a54-8f0c-baac721a1ad3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9ba5b57-6a8b-4a54-8f0c-baac721a1ad3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d9ba5b57-6a8b-4a54-8f0c-baac721a1ad3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b182e356-d3e5-4f8a-9b21-ce164997eaaa\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlrFE_summary')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b182e356-d3e5-4f8a-9b21-ce164997eaaa button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlrFE_summary');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlrFE_summary","summary":"{\n  \"name\": \"mlrFE_summary\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3794178562833682,\n        \"min\": -0.0822,\n        \"max\": 0.9597,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0988,\n          0.0351,\n          0.9597\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2032230793979857,\n        \"min\": 0.0055,\n        \"max\": 0.5325,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.2974,\n          0.0055,\n          0.5325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8817166254971474,\n        \"min\": -2.4251,\n        \"max\": 6.4237,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.3324,\n          6.4237,\n          1.8022\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28371343758565026,\n        \"min\": 0.0,\n        \"max\": 0.7402,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.7402,\n          0.0,\n          0.0739\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17724372391333543,\n        \"min\": -0.4897,\n        \"max\": 0.0243,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.4897,\n          0.0243,\n          -0.0943\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7615872600475054,\n        \"min\": -0.0151,\n        \"max\": 2.0136,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6874,\n          0.046,\n          2.0136\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":118}]},{"cell_type":"code","source":["mlrFE_summary = mlrFE_summary.iloc[0:1] # Select the row with the coefficient for 'transport_trend_per_person'"],"metadata":{"id":"hiyjDAIeDzLr","executionInfo":{"status":"ok","timestamp":1734346104316,"user_tz":-60,"elapsed":22,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}}},"execution_count":119,"outputs":[]},{"cell_type":"code","execution_count":120,"metadata":{"executionInfo":{"status":"ok","timestamp":1734346104316,"user_tz":-60,"elapsed":21,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"id":"oJQpii6x5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"041163ca-a8c3-4a68-f768-2eb08e9c73b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["                 coef     2.5 %    97.5 %\n","slr          0.062819  0.015240  0.110398\n","mlr         -0.076463 -0.254592  0.101667\n","mlrFE        0.098800 -0.489700  0.687400\n","forest      -0.009289 -0.091682  0.073104\n","tree         0.041278 -0.049349  0.131906\n","xgb         -0.019695 -0.074253  0.034862\n","forest (FE) -0.026579 -0.532357  0.479200\n","tree (FE)    0.062632 -0.442866  0.568129\n","xgb (FE)    -0.059846 -0.509978  0.390286\n"]}],"source":["# Concatenate the summaries, reset the index, and then rename\n","plr_summary = pd.concat([summary_df, mlrFE_summary, forest_summary, tree_summary, boost_summary, forest_diff_summary, tree_diff_summary, boost_diff_summary])\n","plr_summary.index = ['slr', 'mlr', 'mlrFE', 'forest', 'tree', 'xgb', 'forest (FE)', 'tree (FE)', 'xgb (FE)']  # Assign the desired labels\n","\n","# Print the updated summary\n","print(plr_summary[['coef', '2.5 %', '97.5 %']])"]},{"cell_type":"code","source":["errors = np.full((2, plr_summary.shape[0]), np.nan)\n","errors[0, :] = plr_summary['coef'] - plr_summary['2.5 %']\n","errors[1, :] = plr_summary['97.5 %'] - plr_summary['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary.index, plr_summary['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary.index[:3], plr_summary['coef'][:3], yerr=errors[:, :3], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary.index[6:], plr_summary['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FD)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"],"metadata":{"id":"9pCbBLhG7VUw","executionInfo":{"status":"ok","timestamp":1734346104946,"user_tz":-60,"elapsed":644,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"3eb86f70-399d-4bb5-afae-e2be074a1d91"},"execution_count":121,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"collapsed_sections":["qyOtuY7yAe8b"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}