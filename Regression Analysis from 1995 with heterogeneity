{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22787,"status":"ok","timestamp":1734352190501,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"14ZP-C4vyHDl","outputId":"924b7ad4-3903-47a7-cd67-a06cd84ccf8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":30599,"status":"ok","timestamp":1734352221093,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"aMNtKOuPUrJF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e450d3a2-3e23-4d2f-961f-6c4ae5f6bfc3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting linearmodels\n","  Downloading linearmodels-6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.9 kB)\n","Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.26.4)\n","Requirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (2.2.2)\n","Requirement already satisfied: scipy>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (1.13.1)\n","Requirement already satisfied: statsmodels>=0.13.0 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (0.14.4)\n","Collecting mypy-extensions>=0.4 (from linearmodels)\n","  Downloading mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n","Requirement already satisfied: Cython>=3.0.10 in /usr/local/lib/python3.10/dist-packages (from linearmodels) (3.0.11)\n","Collecting pyhdfe>=0.1 (from linearmodels)\n","  Downloading pyhdfe-0.2.0-py3-none-any.whl.metadata (4.0 kB)\n","Collecting formulaic>=1.0.0 (from linearmodels)\n","  Downloading formulaic-1.1.0-py3-none-any.whl.metadata (6.9 kB)\n","Collecting setuptools-scm<9.0.0,>=8.0.0 (from setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels)\n","  Downloading setuptools_scm-8.1.0-py3-none-any.whl.metadata (6.6 kB)\n","Collecting interface-meta>=1.2.0 (from formulaic>=1.0.0->linearmodels)\n","  Downloading interface_meta-1.3.0-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (4.12.2)\n","Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.10/dist-packages (from formulaic>=1.0.0->linearmodels) (1.17.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->linearmodels) (2024.2)\n","Requirement already satisfied: packaging>=20 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (24.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (75.1.0)\n","Requirement already satisfied: tomli>=1 in /usr/local/lib/python3.10/dist-packages (from setuptools-scm<9.0.0,>=8.0.0->setuptools-scm[toml]<9.0.0,>=8.0.0->linearmodels) (2.2.1)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.0->linearmodels) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4.0->linearmodels) (1.17.0)\n","Downloading linearmodels-6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m18.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading formulaic-1.1.0-py3-none-any.whl (115 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.7/115.7 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n","Downloading pyhdfe-0.2.0-py3-none-any.whl (19 kB)\n","Downloading setuptools_scm-8.1.0-py3-none-any.whl (43 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.7/43.7 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n","Installing collected packages: setuptools-scm, mypy-extensions, interface-meta, pyhdfe, formulaic, linearmodels\n","Successfully installed formulaic-1.1.0 interface-meta-1.3.0 linearmodels-6.1 mypy-extensions-1.0.0 pyhdfe-0.2.0 setuptools-scm-8.1.0\n","Collecting stargazer\n","  Downloading stargazer-0.0.7-py3-none-any.whl.metadata (6.3 kB)\n","Downloading stargazer-0.0.7-py3-none-any.whl (15 kB)\n","Installing collected packages: stargazer\n","Successfully installed stargazer-0.0.7\n"]}],"source":["%matplotlib inline\n","!pip install linearmodels\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","from scipy.stats import skew\n","from scipy import interpolate\n","from linearmodels.panel import PanelOLS\n","!pip install stargazer\n","from stargazer.stargazer import Stargazer"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16988,"status":"ok","timestamp":1734352238065,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"Y4hVrNIXAiIP","outputId":"14d0b0aa-ae55-441b-bb39-90db99e42363"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting DoubleML\n","  Downloading DoubleML-0.9.0-py3-none-any.whl.metadata (7.7 kB)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.4.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from DoubleML) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from DoubleML) (1.5.2)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from DoubleML) (0.14.4)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from DoubleML) (5.24.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->DoubleML) (2024.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (9.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly->DoubleML) (24.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->DoubleML) (3.5.0)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->DoubleML) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->DoubleML) (1.17.0)\n","Downloading DoubleML-0.9.0-py3-none-any.whl (318 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m318.1/318.1 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: DoubleML\n","Successfully installed DoubleML-0.9.0\n"]}],"source":["# Install the DoubleML package, upgrading to the latest version if it's already installed.\n","# !: This symbol in a Colab notebook indicates that the following command should be run in the system shell (like a terminal), not within the Python interpreter.\n","!pip install -U DoubleML\n","\n","import graphviz as gr  # For creating and visualizing directed acyclic graphs (DAGs)\n","\n","import statsmodels.formula.api as smf  # For statistical modeling using R-style formulas\n","\n","from matplotlib.colors import ListedColormap  # For creating custom colormaps for visualizations\n","import seaborn as sns  # For statistical data visualization based on matplotlib\n","\n","from sklearn.model_selection import KFold, RepeatedKFold  # For cross-validation techniques\n","from sklearn.base import clone  # For cloning estimator objects\n","\n","from sklearn.tree import DecisionTreeRegressor  # For Decision Tree regression models\n","from sklearn.ensemble import RandomForestRegressor  # For Random Forest regression models\n","from xgboost import XGBRegressor  # For XGBoost regression models\n","\n","import doubleml as dml  # For Double/Debiased Machine Learning\n","from doubleml import DoubleMLClusterData  # For DoubleML data handling with clustered data"]},{"cell_type":"markdown","metadata":{"id":"ig21KQ8v5r_B"},"source":["# Regression Analysis in thousand kilometers"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":662,"status":"ok","timestamp":1734352238720,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"O-kqfYuGoxa1"},"outputs":[],"source":["final_data = pd.read_csv('/content/drive/MyDrive/Data Science project/Data Sets/final_data_with_confounders.csv')"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1734352238722,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"buBjX9Au5r_E","outputId":"1a3e810f-5c5e-42ea-d437-842d436141ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column data types:\n","country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n","\n","Columns with non-numeric values:\n","- country_code\n","  Example non-numeric values: ['BEL' 'CZE' 'DNK' 'FIN' 'FRA']\n","\n","Columns with null values:\n","environmental_awareness    100\n","dtype: int64\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","# Check data types of columns\n","data_types = final_data.dtypes\n","print(\"Column data types:\")\n","print(data_types)\n","\n","# Function to check for non-numeric values\n","def check_non_numeric(column):\n","    return column.apply(lambda x: not pd.api.types.is_numeric_dtype(type(x)))\n","\n","# Check for non-numeric values in each column\n","non_numeric = final_data.apply(check_non_numeric)\n","\n","print(\"\\nColumns with non-numeric values:\")\n","for column, has_non_numeric in non_numeric.items():\n","    if has_non_numeric.any():\n","        print(f\"- {column}\")\n","        non_numeric_values = final_data[column][check_non_numeric(final_data[column])]\n","        print(f\"  Example non-numeric values: {non_numeric_values.unique()[:5]}\")\n","\n","# Check for NaN or null values\n","null_counts = final_data.isnull().sum()\n","print(\"\\nColumns with null values:\")\n","print(null_counts[null_counts > 0])\n"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51,"status":"ok","timestamp":1734352238723,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"bSqA4Tyj5r_F","outputId":"f8047533-6cb8-467d-d351-1c0d106fb923"},"outputs":[{"output_type":"stream","name":"stdout","text":["country_code                    object\n","year                             int64\n","oecd_eps                       float64\n","annual_transport_trends          int64\n","electoral_democracy_index      float64\n","total_population               float64\n","transport_trend_per_person     float64\n","gdp_per_capita                 float64\n","urbanization_rate              float64\n","environmental_awareness        float64\n","corruption_perception_index    float64\n","industry_composition           float64\n","IV                             float64\n","dtype: object\n"]}],"source":["import pandas as pd\n","\n","# Assuming your dataframe is named 'final_data'\n","\n","# Convert 'GDP per capita (current US$)' to numeric\n","final_data['gdp_per_capita'] = pd.to_numeric(final_data['gdp_per_capita'], errors='coerce')\n","\n","# Convert 'Urban population (% of total population)' to numeric\n","final_data['urbanization_rate'] = pd.to_numeric(final_data['urbanization_rate'], errors='coerce')\n","\n","# Verify the data types\n","print(final_data.dtypes)\n"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1734352238724,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"NjSfbrxvVJeK","outputId":"a4533351-008d-4064-bced-4baa55cd5ab0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Below Median DataFrame:\n","  country_code  electoral_democracy_index\n","0          BEL                      0.881\n","1          BEL                      0.882\n","2          BEL                      0.882\n","3          BEL                      0.882\n","4          BEL                      0.883\n","\n","Above Median DataFrame:\n","   country_code  electoral_democracy_index\n","18          CZE                      0.898\n","19          CZE                      0.897\n","20          CZE                      0.897\n","21          CZE                      0.888\n","22          CZE                      0.880\n","\n","Number of countries below median: 8\n","Number of countries above median: 6\n"]}],"source":["# Calculate the median of the electoral democracy index\n","median_value = final_data['electoral_democracy_index'].median()\n","\n","# Calculate the mean electoral democracy index for each country\n","country_means = final_data.groupby('country_code')['electoral_democracy_index'].mean()\n","\n","# Identify countries below and above the median\n","below_median_countries = country_means[country_means < median_value].index\n","above_median_countries = country_means[country_means >= median_value].index\n","\n","# Create DataFrames for countries below and above the median\n","below_median_df = final_data[final_data['country_code'].isin(below_median_countries)]\n","above_median_df = final_data[final_data['country_code'].isin(above_median_countries)]\n","\n","# Display the first few rows of each DataFrame\n","print(\"Below Median DataFrame:\")\n","print(below_median_df[['country_code', 'electoral_democracy_index']].head())\n","print(\"\\nAbove Median DataFrame:\")\n","print(above_median_df[['country_code', 'electoral_democracy_index']].head())\n","\n","# Check the number of unique countries in each DataFrame\n","print(f\"\\nNumber of countries below median: {below_median_df['country_code'].nunique()}\")\n","print(f\"Number of countries above median: {above_median_df['country_code'].nunique()}\")"]},{"cell_type":"markdown","metadata":{"id":"JL3JhJ8kV1qV"},"source":["# Regression Analysis from 2002 with heterogeneity, upper set (above median)"]},{"cell_type":"markdown","metadata":{"id":"wW6xdMZA5r_H"},"source":["### Simple linear regression with environmental awareness (years 2002-2012, excluding Slovakia)"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":254,"status":"ok","timestamp":1734352238945,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"EuAAW19Y5r_I","outputId":"019c0fdd-5b01-4523-afa1-d4ec31be37de"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.152\n","Model:                            OLS   Adj. R-squared:                  0.144\n","Method:                 Least Squares   F-statistic:                     27.56\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):            0.00333\n","Time:                        12:30:38   Log-Likelihood:                -122.43\n","No. Observations:                 108   AIC:                             248.9\n","Df Residuals:                     106   BIC:                             254.2\n","Df Model:                           1                                         \n","Covariance Type:              cluster                                         \n","==============================================================================================\n","                                 coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------------------\n","Intercept                      0.4766      0.230      2.068      0.093      -0.116       1.069\n","transport_trend_per_person     0.1758      0.033      5.250      0.003       0.090       0.262\n","==============================================================================\n","Omnibus:                        2.236   Durbin-Watson:                   0.372\n","Prob(Omnibus):                  0.327   Jarque-Bera (JB):                1.555\n","Skew:                           0.012   Prob(JB):                        0.460\n","Kurtosis:                       2.413   Cond. No.                         58.9\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n"]}],"source":["# Define the model formula without controls\n","model_formula_no_controls = 'oecd_eps ~ transport_trend_per_person'\n","\n","# Fit the model using ordinary least squares (OLS)\n","# Use clustered standard errors\n","slr_u = smf.ols(formula=model_formula_no_controls, data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","slr_summary_u = slr_u.summary\n","\n","\n","# Print the model summary\n","print(slr_u.summary())"]},{"cell_type":"markdown","metadata":{"id":"rVGE4dvW5r_J"},"source":["### Multiple linear regression modell with environmental awareness (years 2002-2012, excluding Slovakia)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1734352238946,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"EJuuL6ui5r_L","outputId":"0c20d6d8-80ab-405d-85b3-695497f9e038"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.566\n","Model:                            OLS   Adj. R-squared:                  0.545\n","Method:                 Least Squares   F-statistic:                     56.87\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):           0.000209\n","Time:                        12:30:38   Log-Likelihood:                -86.225\n","No. Observations:                 108   AIC:                             184.5\n","Df Residuals:                     102   BIC:                             200.5\n","Df Model:                           5                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           3.7177      2.627      1.415      0.216      -3.036      10.472\n","transport_trend_per_person     -0.0628      0.151     -0.417      0.694      -0.450       0.324\n","gdp_per_capita                  0.0293      0.006      4.678      0.005       0.013       0.045\n","urbanization_rate               0.0260      0.030      0.858      0.430      -0.052       0.104\n","corruption_perception_index    -0.1878      0.150     -1.248      0.267      -0.574       0.199\n","industry_composition           -0.0909      0.021     -4.427      0.007      -0.144      -0.038\n","==============================================================================\n","Omnibus:                        1.082   Durbin-Watson:                   0.704\n","Prob(Omnibus):                  0.582   Jarque-Bera (JB):                1.051\n","Skew:                          -0.234   Prob(JB):                        0.591\n","Kurtosis:                       2.878   Cond. No.                     2.26e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 2.26e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}],"source":["import pandas as pd\n","import statsmodels.api as sm\n","\n","# Select the variables for the regression\n","X = above_median_df[['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']]\n","y = above_median_df['oecd_eps']\n","\n","# Add a constant term to the independent variables\n","X = sm.add_constant(X)\n","\n","# Fit the regression model\n","mlr_u = sm.OLS(y, X).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","mlr_summary_u = mlr_u.summary\n","\n","# Print the summary of the regression results\n","print(mlr_u.summary())"]},{"cell_type":"code","source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data = {\n","    'Model': ['Without Controls', 'With Controls'],\n","    'coef': [slr_u.params['transport_trend_per_person'], mlr_u.params['transport_trend_per_person']],\n","    '2.5 %': [slr_u.conf_int().loc['transport_trend_per_person', 0], mlr_u.conf_int().loc['transport_trend_per_person', 0]],\n","    '97.5 %': [slr_u.conf_int().loc['transport_trend_per_person', 1], mlr_u.conf_int().loc['transport_trend_per_person', 1]],\n","    'P>|t|': [slr_u.pvalues['transport_trend_per_person'], mlr_u.pvalues['transport_trend_per_person']]  # Add p-value\n","}\n","summary_df = pd.DataFrame(summary_data).set_index('Model')\n","\n","# Print the summary\n","print(summary_df[['coef', '2.5 %', '97.5 %']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xSZHj0ypnh3r","executionInfo":{"status":"ok","timestamp":1734352238946,"user_tz":-60,"elapsed":15,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"f56966a7-58f3-46dc-b2fe-fd000a7fbc87"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["                      coef     2.5 %    97.5 %\n","Model                                         \n","Without Controls  0.175810  0.089727  0.261893\n","With Controls    -0.062755 -0.449958  0.324447\n"]}]},{"cell_type":"code","source":["#Table 2: Basic OLS table\n","# Creating models with progressive controls\n","model1 = smf.ols('oecd_eps ~ transport_trend_per_person', data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']})\n","model2 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita', data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']})\n","model3 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate', data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']})\n","model4 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition', data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']})\n","model5 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition + corruption_perception_index', data=above_median_df).fit(cov_type='cluster', cov_kwds={'groups': above_median_df['country_code']})\n","\n","# Using Stargazer to create a regression table\n","stargazer = Stargazer([model1, model2, model3, model4, model5])\n","\n","# Displaying the table\n","stargazer.significant_digits(3)\n","stargazer"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":499},"id":"2j1dV42moCYg","executionInfo":{"status":"ok","timestamp":1734352239359,"user_tz":-60,"elapsed":420,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"507140c6-2ddc-4501-e12a-cf5d93e0db7b"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<stargazer.stargazer.Stargazer at 0x7f9df505cc70>"],"text/html":["<table style=\"text-align:center\"><tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align:left\"></td><td colspan=\"5\"><em>Dependent variable: oecd_eps</em></td></tr><tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td><td>(3)</td><td>(4)</td><td>(5)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","\n","<tr><td style=\"text-align:left\">Intercept</td><td>0.477<sup>**</sup></td><td>1.273<sup>***</sup></td><td>-2.159<sup></sup></td><td>3.285<sup></sup></td><td>3.718<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.230)</td><td>(0.294)</td><td>(1.877)</td><td>(3.029)</td><td>(2.627)</td></tr>\n","<tr><td style=\"text-align:left\">corruption_perception_index</td><td></td><td></td><td></td><td></td><td>-0.188<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td></td><td>(0.150)</td></tr>\n","<tr><td style=\"text-align:left\">gdp_per_capita</td><td></td><td>0.020<sup>***</sup></td><td>0.023<sup>***</sup></td><td>0.029<sup>***</sup></td><td>0.029<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td>(0.005)</td><td>(0.008)</td><td>(0.007)</td><td>(0.006)</td></tr>\n","<tr><td style=\"text-align:left\">industry_composition</td><td></td><td></td><td></td><td>-0.080<sup>***</sup></td><td>-0.091<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td>(0.021)</td><td>(0.021)</td></tr>\n","<tr><td style=\"text-align:left\">transport_trend_per_person</td><td>0.176<sup>***</sup></td><td>0.015<sup></sup></td><td>-0.091<sup></sup></td><td>-0.191<sup>*</sup></td><td>-0.063<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.033)</td><td>(0.046)</td><td>(0.117)</td><td>(0.098)</td><td>(0.151)</td></tr>\n","<tr><td style=\"text-align:left\">urbanization_rate</td><td></td><td></td><td>0.056<sup></sup></td><td>0.025<sup></sup></td><td>0.026<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td>(0.034)</td><td>(0.036)</td><td>(0.030)</td></tr>\n","\n","<td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align: left\">Observations</td><td>108</td><td>108</td><td>108</td><td>108</td><td>108</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.152</td><td>0.299</td><td>0.381</td><td>0.526</td><td>0.566</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>0.144</td><td>0.285</td><td>0.363</td><td>0.507</td><td>0.545</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.759 (df=106)</td><td>0.693 (df=105)</td><td>0.655 (df=104)</td><td>0.576 (df=103)</td><td>0.553 (df=102)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>27.562<sup>***</sup> (df=1; 106)</td><td>9.927<sup>***</sup> (df=2; 105)</td><td>26.268<sup>***</sup> (df=3; 104)</td><td>38.675<sup>***</sup> (df=4; 103)</td><td>56.866<sup>***</sup> (df=5; 102)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td><td colspan=\"5\" style=\"text-align: right\"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr></table>"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"2j0EHEbk5r_N"},"source":["### Including fixed effects into Multiple linear regression"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1734352239362,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"A5XvTwRd5r_O","outputId":"4da34fb1-87f3-420b-eefa-c40294c54dba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","CHE           2.341435                   10.487592       57.108660   \n","CZE           1.705787                    6.269252       12.502298   \n","DEU           2.496528                   10.486481       33.998951   \n","DNK           2.836111                   10.705475       45.135722   \n","NOR           1.842361                   11.194821       61.354954   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","CHE                   73.517111                     8.812778   \n","CZE                   73.774833                     4.938889   \n","DEU                   75.652778                     7.906111   \n","DNK                   85.770667                     9.160000   \n","NOR                   77.009222                     8.718889   \n","\n","              industry_composition  \n","country_code                        \n","CHE                      26.100550  \n","CZE                      33.935812  \n","DEU                      27.241305  \n","DNK                      21.967615  \n","NOR                      34.769308  "],"text/html":["\n","  <div id=\"df-634f5ee1-60e6-494e-8840-a225e0d4d666\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>CHE</th>\n","      <td>2.341435</td>\n","      <td>10.487592</td>\n","      <td>57.108660</td>\n","      <td>73.517111</td>\n","      <td>8.812778</td>\n","      <td>26.100550</td>\n","    </tr>\n","    <tr>\n","      <th>CZE</th>\n","      <td>1.705787</td>\n","      <td>6.269252</td>\n","      <td>12.502298</td>\n","      <td>73.774833</td>\n","      <td>4.938889</td>\n","      <td>33.935812</td>\n","    </tr>\n","    <tr>\n","      <th>DEU</th>\n","      <td>2.496528</td>\n","      <td>10.486481</td>\n","      <td>33.998951</td>\n","      <td>75.652778</td>\n","      <td>7.906111</td>\n","      <td>27.241305</td>\n","    </tr>\n","    <tr>\n","      <th>DNK</th>\n","      <td>2.836111</td>\n","      <td>10.705475</td>\n","      <td>45.135722</td>\n","      <td>85.770667</td>\n","      <td>9.160000</td>\n","      <td>21.967615</td>\n","    </tr>\n","    <tr>\n","      <th>NOR</th>\n","      <td>1.842361</td>\n","      <td>11.194821</td>\n","      <td>61.354954</td>\n","      <td>77.009222</td>\n","      <td>8.718889</td>\n","      <td>34.769308</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-634f5ee1-60e6-494e-8840-a225e0d4d666')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-634f5ee1-60e6-494e-8840-a225e0d4d666 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-634f5ee1-60e6-494e-8840-a225e0d4d666');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b67bea1f-8fd4-4c71-9662-7003b5a7556d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b67bea1f-8fd4-4c71-9662-7003b5a7556d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b67bea1f-8fd4-4c71-9662-7003b5a7556d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mean_final_data_u","summary":"{\n  \"name\": \"mean_final_data_u\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"CHE\",\n          \"CZE\",\n          \"SWE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4193045307573376,\n        \"min\": 1.7057870361540113,\n        \"max\": 2.836111108462011,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2.3414351675245446,\n          1.7057870361540113,\n          2.31574072440465\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9375828821412306,\n        \"min\": 6.269251921401571,\n        \"max\": 11.594951076315795,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          10.487591761929497,\n          6.269251921401571,\n          11.594951076315795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.592564542759508,\n        \"min\": 12.502298085065757,\n        \"max\": 61.35495418126042,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          57.10865974630906,\n          12.502298085065757,\n          41.14112618570231\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.386851222133699,\n        \"min\": 73.5171111111111,\n        \"max\": 85.77066666666667,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          73.5171111111111,\n          73.77483333333333,\n          84.405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.628654172493426,\n        \"min\": 4.938888888888889,\n        \"max\": 9.205,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          8.812777777777777,\n          4.938888888888889,\n          9.205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087609917048986,\n        \"min\": 21.967615123333335,\n        \"max\": 34.769308091666666,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          26.10055002,\n          33.93581243388889,\n          25.16781186888889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"source":["# compute means by country\n","y = \"oecd_eps\"\n","X = ['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']\n","mean_final_data_u = above_median_df.groupby(\"country_code\")[[y] + X].mean()\n","mean_final_data_u.head()"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1734352239363,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"Em1B3HRz5r_O","outputId":"0af1f9b5-d3e4-4fe3-9abe-d707b74fe47a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","CHE          -0.278935                   -0.603888       -6.994828   \n","CHE          -0.278935                   -0.479792       -9.016016   \n","CHE          -0.278935                   -0.415035      -15.524218   \n","CHE          -0.278935                   -0.285478      -14.428073   \n","CHE          -0.278935                   -0.195073      -15.412968   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","CHE                    0.136889                    -0.052778   \n","CHE                    0.082889                    -0.052778   \n","CHE                    0.028889                    -0.202778   \n","CHE                   -0.025111                     0.087222   \n","CHE                   -0.079111                     0.087222   \n","\n","              industry_composition  \n","country_code                        \n","CHE                       2.979681  \n","CHE                       1.927851  \n","CHE                       1.186169  \n","CHE                       0.548455  \n","CHE                       0.180788  "],"text/html":["\n","  <div id=\"df-6740d754-29ec-463c-8996-6ad4bf92d46b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>CHE</th>\n","      <td>-0.278935</td>\n","      <td>-0.603888</td>\n","      <td>-6.994828</td>\n","      <td>0.136889</td>\n","      <td>-0.052778</td>\n","      <td>2.979681</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>-0.278935</td>\n","      <td>-0.479792</td>\n","      <td>-9.016016</td>\n","      <td>0.082889</td>\n","      <td>-0.052778</td>\n","      <td>1.927851</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>-0.278935</td>\n","      <td>-0.415035</td>\n","      <td>-15.524218</td>\n","      <td>0.028889</td>\n","      <td>-0.202778</td>\n","      <td>1.186169</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>-0.278935</td>\n","      <td>-0.285478</td>\n","      <td>-14.428073</td>\n","      <td>-0.025111</td>\n","      <td>0.087222</td>\n","      <td>0.548455</td>\n","    </tr>\n","    <tr>\n","      <th>CHE</th>\n","      <td>-0.278935</td>\n","      <td>-0.195073</td>\n","      <td>-15.412968</td>\n","      <td>-0.079111</td>\n","      <td>0.087222</td>\n","      <td>0.180788</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6740d754-29ec-463c-8996-6ad4bf92d46b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6740d754-29ec-463c-8996-6ad4bf92d46b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6740d754-29ec-463c-8996-6ad4bf92d46b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a723bb34-f35e-49ad-a909-3a8c4cf2e09d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a723bb34-f35e-49ad-a909-3a8c4cf2e09d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a723bb34-f35e-49ad-a909-3a8c4cf2e09d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demeaned_final_data_u","summary":"{\n  \"name\": \"demeaned_final_data_u\",\n  \"rows\": 108,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"CHE\",\n          \"CZE\",\n          \"SWE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7246404019507009,\n        \"min\": -1.27407409747445,\n        \"max\": 1.4159721136093502,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.17430555820465532,\n          -0.2789351675245446,\n          -0.6423610448837447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3994370805482316,\n        \"min\": -1.1789737101178854,\n        \"max\": 0.7049207073893706,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          -0.27154089492041855,\n          -0.013176534333252832,\n          -0.19507292021334877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.458659070710667,\n        \"min\": -26.55149077538662,\n        \"max\": 40.82096511711358,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          -23.17671730355282,\n          -0.8657663817451606,\n          -15.412968455106956\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.955214114569554,\n        \"min\": -3.2222222222222143,\n        \"max\": 2.8647777777777748,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          -0.9892222222222244,\n          -0.03911111111111154,\n          -0.07911111111110358\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7925364135296927,\n        \"min\": -5.86,\n        \"max\": 4.561111111111111,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          -0.052777777777777146,\n          -0.31277777777777693,\n          0.16000000000000014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.82954892598691,\n        \"min\": -7.137813951666665,\n        \"max\": 6.042282468333333,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          2.030521218333334,\n          -0.2734757799999983,\n          0.18078755000000157\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}],"source":["# compute demeaned df\n","demeaned_final_data_u = (above_median_df\n","               .set_index(\"country_code\") # set the index as the person indicator\n","               [[y] + X]\n","               - mean_final_data_u) # subtract the mean data\n","\n","demeaned_final_data_u.head()"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":169},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1734352239364,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"CL4GlleK5r_P","outputId":"d318befb-3120-4282-82fe-0e0386931b94"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<tr>\n","               <td></td>                  <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th>                   <td>-7.633e-17</td> <td>    0.036</td> <td>-2.14e-15</td> <td> 1.000</td> <td>   -0.071</td> <td>    0.071</td>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>  <td>    0.6371</td> <td>    0.121</td> <td>    5.268</td> <td> 0.000</td> <td>    0.397</td> <td>    0.877</td>\n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>         <td>    0.0292</td> <td>    0.004</td> <td>    7.202</td> <td> 0.000</td> <td>    0.021</td> <td>    0.037</td>\n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>      <td>    0.0212</td> <td>    0.059</td> <td>    0.358</td> <td> 0.721</td> <td>   -0.096</td> <td>    0.139</td>\n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th> <td>    0.0265</td> <td>    0.045</td> <td>    0.584</td> <td> 0.560</td> <td>   -0.064</td> <td>    0.117</td>\n","</tr>\n","<tr>\n","  <th>industry_composition</th>        <td>   -0.1038</td> <td>    0.021</td> <td>   -4.912</td> <td> 0.000</td> <td>   -0.146</td> <td>   -0.062</td>\n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}                     &   -7.633e-17  &        0.036     & -2.14e-15  &         1.000        &       -0.071    &        0.071     \\\\\n\\textbf{transport\\_trend\\_per\\_person} &       0.6371  &        0.121     &     5.268  &         0.000        &        0.397    &        0.877     \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0292  &        0.004     &     7.202  &         0.000        &        0.021    &        0.037     \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.0212  &        0.059     &     0.358  &         0.721        &       -0.096    &        0.139     \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0265  &        0.045     &     0.584  &         0.560        &       -0.064    &        0.117     \\\\\n\\textbf{industry\\_composition}         &      -0.1038  &        0.021     &    -4.912  &         0.000        &       -0.146    &       -0.062     \\\\\n\\bottomrule\n\\end{tabular}\n\\end{center}"},"metadata":{},"execution_count":15}],"source":["# compute with ols fe estimator\n","est_fe_u = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition\", data=demeaned_final_data_u).fit()\n","est_fe_u.summary().tables[1]"]},{"cell_type":"code","source":["# Canned method with clustering on country level\n","est_fe_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + corruption_perception_index + industry_composition + EntityEffects\",\n","                            data=above_median_df.set_index([\"country_code\", \"year\"]))\n","\n","result = est_fe_canned.fit(cov_type='clustered', cluster_entity=True)\n","result.summary.tables[1]\n","\n","# Store the model summary in a variable\n","mlrFE_summary_u = result.summary\n","\n","\n","# Print the summary of the regression results\n","print(mlrFE_summary_u)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BOPI2ryYqdlz","executionInfo":{"status":"ok","timestamp":1734352239548,"user_tz":-60,"elapsed":212,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"903d246a-c23e-4507-c273-e69114d2bc44"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["                          PanelOLS Estimation Summary                           \n","================================================================================\n","Dep. Variable:               oecd_eps   R-squared:                        0.7498\n","Estimator:                   PanelOLS   R-squared (Between):             -3.1593\n","No. Observations:                 108   R-squared (Within):               0.7498\n","Date:                Mon, Dec 16 2024   R-squared (Overall):             -2.8061\n","Time:                        12:30:39   Log-likelihood                   -43.142\n","Cov. Estimator:             Clustered                                           \n","                                        F-statistic:                      58.137\n","Entities:                           6   P-value                           0.0000\n","Avg Obs:                       18.000   Distribution:                    F(5,97)\n","Min Obs:                       18.000                                           \n","Max Obs:                       18.000   F-statistic (robust):             6018.3\n","                                        P-value                           0.0000\n","Time periods:                      18   Distribution:                    F(5,97)\n","Avg Obs:                       6.0000                                           \n","Min Obs:                       6.0000                                           \n","Max Obs:                       6.0000                                           \n","                                                                                \n","                                      Parameter Estimates                                      \n","===============================================================================================\n","                             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n","-----------------------------------------------------------------------------------------------\n","transport_trend_per_person      0.6371     0.1489     4.2782     0.0000      0.3415      0.9326\n","gdp_per_capita                  0.0292     0.0084     3.4841     0.0007      0.0126      0.0458\n","urbanization_rate               0.0212     0.1470     0.1443     0.8856     -0.2706      0.3130\n","corruption_perception_index     0.0265     0.0359     0.7396     0.4613     -0.0447      0.0978\n","industry_composition           -0.1038     0.0279    -3.7194     0.0003     -0.1591     -0.0484\n","===============================================================================================\n","\n","F-test for Poolability: 23.682\n","P-value: 0.0000\n","Distribution: F(5,97)\n","\n","Included effects: Entity\n"]}]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":579},"executionInfo":{"elapsed":836,"status":"ok","timestamp":1734352240378,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"eHo6620u5r_Q","outputId":"94aff810-800c-4298-d6af-cea405b85ff5"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-17-a8224de186fa>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  above_median_df[\"fitted_values\"] = est_ols_u.fittedvalues\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='transport_trend_per_person', ylabel='oecd_eps'>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# estimate ols and store fitted values\n","est_ols_u = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=above_median_df).fit()\n","above_median_df[\"fitted_values\"] = est_ols_u.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=above_median_df, color = \"r\", s = 20)\n","\n","# plot ols fit line (crossing fitted values)\n","sns.lineplot(x='transport_trend_per_person', y='fitted_values', data=above_median_df)"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":670},"executionInfo":{"elapsed":967,"status":"ok","timestamp":1734352241334,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"knrOnvH95r_Q","outputId":"40592312-529e-4e81-f478-27184bce60eb"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-18-3891010f6028>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  above_median_df[\"fitted_values\"] = est_ols_u.fittedvalues\n","<ipython-input-18-3891010f6028>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  above_median_df[\"fitted_values_fe\"] = est_fe_u.fittedvalues\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# get number of countries\n","cou = np.unique(above_median_df.loc[:,\"country_code\"].values)\n","colors = sns.color_palette(n_colors=len(cou)).as_hex()\n","\n","# estimate ols and store fitted values\n","est_ols_u = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=above_median_df).fit()\n","above_median_df[\"fitted_values\"] = est_ols_u.fittedvalues\n","\n","# estimate fe with dummies and store fitted values\n","est_fe_u = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + C(country_code)\", data=above_median_df).fit()\n","above_median_df[\"fitted_values_fe\"] = est_fe_u.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=above_median_df, hue=\"country_code\", legend = False,\n","                palette = colors)\n","\n","# plot fe fit lines (crossing fitted values)\n","for i in range(len(cou)):\n","    df_temp = above_median_df.query(f\"country_code=='{cou[i]}'\")\n","    sns.lineplot(x='transport_trend_per_person', y='fitted_values_fe', data=df_temp, hue=\"country_code\", legend = False)"]},{"cell_type":"markdown","metadata":{"id":"8ZvvCnro5r_R"},"source":["## Double machine learning without fixe effects"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1734352241335,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"BZJLzhWa5r_R","outputId":"d7763fb8-3f1b-47a0-f209-cc615be0ec79"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 108\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 108 entries, 18 to 233\n","Columns: 15 entries, country_code to fitted_values_fe\n","dtypes: float64(12), int64(2), object(1)\n","memory usage: 13.5+ KB\n","\n"]}],"source":["# Create a DoubleMLClusterData object to prepare the data for Double Machine Learning.\n","# This object specifies the outcome variable ('y'), treatment variable ('x'),\n","# clustering variable ('id'), and confounders ('x_cols').\n","obj_dml_data_from_df_u = DoubleMLClusterData(above_median_df, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","\n","# Print the DoubleMLClusterData object to display its properties and data information.\n","print(obj_dml_data_from_df_u)"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1734352241338,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"7judJ5L15r_S","outputId":"ced7d5ec-94e6-4f48-8674-61d7f1e40190"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.057589  0.064655 -0.890709  0.373085 -0.184309   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.069132  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_data_from_df_u,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_summary_u = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14757,"status":"ok","timestamp":1734352256082,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"AN4o5NuI5r_S","outputId":"e77b1e69-e910-46d4-d8c0-6995022863eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.076977  0.030302  2.540342  0.011074  0.017586   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.136367  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_data_from_df_u,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_summary_u = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_summary_u)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":661,"status":"ok","timestamp":1734352256729,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"LsaUsKHj5r_T","outputId":"b7b3b1b7-215a-4d28-f943-a0b3d653a9fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err        t     P>|t|    2.5 %  \\\n","transport_trend_per_person  0.083905  0.036529  2.29696  0.021621  0.01231   \n","\n","                            97.5 %  \n","transport_trend_per_person  0.1555  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(n_jobs=1,  # Number of parallel threads used to run XGBoost\n","                     objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","                     eta=0.1,  # Learning rate\n","                     n_estimators=35)  # Number of boosting rounds (trees)\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR(obj_dml_data_from_df_u,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_summary_u = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_summary_u)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":146},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1734352257131,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"Fe8ljRAOqptf","outputId":"1688fc11-e28c-4e51-eda2-30b726dea308"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-23-6124e1e76b1b>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlr_summary_u = pd.read_html(mlr_summary_u, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  std err      t  P>|t|  2.5 %  97.5 %\n","transport_trend_per_person -0.0628    0.151 -0.417  0.694  -0.45   0.324"],"text/html":["\n","  <div id=\"df-aa66f568-a06f-4d5b-9c66-5403038bc49a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>-0.0628</td>\n","      <td>0.151</td>\n","      <td>-0.417</td>\n","      <td>0.694</td>\n","      <td>-0.45</td>\n","      <td>0.324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa66f568-a06f-4d5b-9c66-5403038bc49a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa66f568-a06f-4d5b-9c66-5403038bc49a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa66f568-a06f-4d5b-9c66-5403038bc49a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_95e5351e-0c35-4ee8-a180-7320fe0dfd6f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlr_summary_u')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_95e5351e-0c35-4ee8-a180-7320fe0dfd6f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlr_summary_u');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlr_summary_u","summary":"{\n  \"name\": \"mlr_summary_u\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.0628,\n        \"max\": -0.0628,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.0628\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.151,\n        \"max\": 0.151,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.417,\n        \"max\": -0.417,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.417\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.694,\n        \"max\": 0.694,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.694\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.45,\n        \"max\": -0.45,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.324,\n        \"max\": 0.324,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.324\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}],"source":["# Assuming mlrFE is your regression model object\n","mlr_summary_u = mlr_u.summary().tables[1].as_html()\n","mlr_summary_u = pd.read_html(mlr_summary_u, header=0, index_col=0)[0]\n","mlr_summary_u = mlr_summary_u.iloc[[1]]\n","mlr_summary_u = mlr_summary_u.rename(columns={'[0.025': '2.5 %', '0.975]': '97.5 %'})\n","mlr_summary_u"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":146},"executionInfo":{"elapsed":259,"status":"ok","timestamp":1734352257377,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"fU8DQdmQq4bt","outputId":"045c2a32-ee30-468d-d475-2eb9d6d8c080"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-24-f66cfbe7b7ab>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  slr_summary_u = pd.read_html(slr_summary_u, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  std err     t  P>|t|  2.5 %  97.5 %\n","transport_trend_per_person  0.1758    0.033  5.25  0.003   0.09   0.262"],"text/html":["\n","  <div id=\"df-551318e7-e5b1-454a-a899-e7bdfeaa249e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.1758</td>\n","      <td>0.033</td>\n","      <td>5.25</td>\n","      <td>0.003</td>\n","      <td>0.09</td>\n","      <td>0.262</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-551318e7-e5b1-454a-a899-e7bdfeaa249e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-551318e7-e5b1-454a-a899-e7bdfeaa249e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-551318e7-e5b1-454a-a899-e7bdfeaa249e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_6af4b83e-867f-4eb5-b041-adafc7d8cbfb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('slr_summary_u')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6af4b83e-867f-4eb5-b041-adafc7d8cbfb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('slr_summary_u');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"slr_summary_u","summary":"{\n  \"name\": \"slr_summary_u\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1758,\n        \"max\": 0.1758,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1758\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.033,\n        \"max\": 0.033,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.033\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.25,\n        \"max\": 5.25,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.003,\n        \"max\": 0.003,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.09,\n        \"max\": 0.09,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.262,\n        \"max\": 0.262,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}],"source":["# Assuming mlrFE is your regression model object\n","slr_summary_u = slr_u.summary().tables[1].as_html()\n","slr_summary_u = pd.read_html(slr_summary_u, header=0, index_col=0)[0]\n","slr_summary_u = slr_summary_u.iloc[[1]]\n","slr_summary_u = slr_summary_u.rename(columns={'[0.025': '2.5 %', '0.975]': '97.5 %'})\n","slr_summary_u"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":22,"status":"ok","timestamp":1734352257377,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"8pQN-Dgl5r_T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e973952f-a32e-4622-e6bf-0df97ae0da5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["              coef     2.5 %    97.5 %\n","slr_u     0.175800  0.090000  0.262000\n","mlr_u    -0.062800 -0.450000  0.324000\n","forest_u  0.076977  0.017586  0.136367\n","tree_u   -0.057589 -0.184309  0.069132\n","xgb_u     0.083905  0.012310  0.155500\n"]}],"source":["\n","# Concatenate the summaries and update the index\n","plr_summary_u = pd.concat([slr_summary_u, mlr_summary_u, forest_summary_u, tree_summary_u, boost_summary_u])\n","plr_summary_u.index = ['slr_u', 'mlr_u','forest_u', 'tree_u', 'xgb_u']\n","\n","# Print the updated summary\n","print(plr_summary_u[['coef', '2.5 %', '97.5 %']])"]},{"cell_type":"code","execution_count":26,"metadata":{"executionInfo":{"elapsed":1463,"status":"ok","timestamp":1734352258829,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"GALAc2on5r_U","colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"49e7449d-5c47-4ad7-dda2-dd0dddba0089"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary_u.shape[0]), np.nan)\n","errors[0, :] = plr_summary_u['coef'] - plr_summary_u['2.5 %']\n","errors[1, :] = plr_summary_u['97.5 %'] - plr_summary_u['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary_u.index, plr_summary_u['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary_u.index[:2], plr_summary_u['coef'][:2], yerr=errors[:, :2], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary_u.index[6:], plr_summary_u['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FD)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the (partially) linear regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"]},{"cell_type":"markdown","metadata":{"id":"acfzNDsV5r_U"},"source":["### DML Including Fixed Effects"]},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1734352258829,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"Mxgn40m35r_X","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8558d020-4dea-4da0-acab-13f7f403e409"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 108\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 108 entries, 0 to 107\n","Columns: 7 entries, country_code to industry_composition\n","dtypes: float64(6), object(1)\n","memory usage: 6.0+ KB\n","\n"]}],"source":["# Reset the index to bring 'country_code' back as a column\n","demeaned_final_data_u = demeaned_final_data_u.reset_index()\n","\n","obj_dml_diff_u = DoubleMLClusterData(demeaned_final_data_u, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","print(obj_dml_diff_u)"]},{"cell_type":"code","execution_count":28,"metadata":{"executionInfo":{"elapsed":26241,"status":"ok","timestamp":1734352285064,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"CsRWTl1E5r_X","colab":{"base_uri":"https://localhost:8080/"},"outputId":"90d142be-1632-41eb-fba0-33994af820f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.697952  0.177067  3.941747  0.000081  0.350908   \n","\n","                              97.5 %  \n","transport_trend_per_person  1.044997  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_diff_u,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_diff_summary_u = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_diff_summary_u)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1734352285064,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"yExablZs5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2924bb17-6d63-43c4-dc17-dfe23c055dc7"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.390652  0.114616  3.408349  0.000654  0.166008   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.615295  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_diff_u,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_diff_summary_u = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":1124,"status":"ok","timestamp":1734352286181,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"6q3EMm6n5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3ad3ad3b-476a-4148-ca76-ab3288627de6"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t         P>|t|  \\\n","transport_trend_per_person  0.761629  0.139544  5.457999  4.815304e-08   \n","\n","                               2.5 %    97.5 %  \n","transport_trend_per_person  0.488128  1.035129  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(\n","    n_jobs=1,  # Number of parallel threads used to run XGBoost\n","    objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","    eta=0.1,  # Learning rate\n","    n_estimators=50,  # Increased number of boosting rounds (trees)\n","    max_depth=7,  # Limit tree depth to prevent overfitting\n","    subsample=0.8,  # Use 80% of data for each tree to add robustness\n","    colsample_bytree=0.8  # Use 80% of features for each tree to reduce complexity\n",")\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR( obj_dml_diff_u,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_diff_summary_u = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_diff_summary_u)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1734352286182,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"Ot1d_zhxR1uK","colab":{"base_uri":"https://localhost:8080/","height":146},"outputId":"9d00ea96-363a-4ad6-ec60-2160038207ad"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-31-592f3d3c4c36>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlrFE_summary_u = pd.read_html(mlrFE_summary_u, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  Std. Err.       t  P>|t|   2.5 %  97.5 %\n","transport_trend_per_person  0.6371     0.1489  4.2782    0.0  0.3415  0.9326"],"text/html":["\n","  <div id=\"df-ec1a5fc8-4f75-48fb-a398-4b1e7cee574d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>Std. Err.</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.6371</td>\n","      <td>0.1489</td>\n","      <td>4.2782</td>\n","      <td>0.0</td>\n","      <td>0.3415</td>\n","      <td>0.9326</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec1a5fc8-4f75-48fb-a398-4b1e7cee574d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec1a5fc8-4f75-48fb-a398-4b1e7cee574d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec1a5fc8-4f75-48fb-a398-4b1e7cee574d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_28529a81-18f0-4e47-b765-2d67465fb192\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlrFE_summary_u')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_28529a81-18f0-4e47-b765-2d67465fb192 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlrFE_summary_u');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlrFE_summary_u","summary":"{\n  \"name\": \"mlrFE_summary_u\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6371,\n        \"max\": 0.6371,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6371\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Std. Err.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1489,\n        \"max\": 0.1489,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.2782,\n        \"max\": 4.2782,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.2782\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.3415,\n        \"max\": 0.3415,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3415\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9326,\n        \"max\": 0.9326,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}],"source":["# Assuming mlrFE is your regression model object\n","mlrFE_summary_u = mlrFE_summary_u.tables[1].as_html()\n","mlrFE_summary_u = pd.read_html(mlrFE_summary_u, header=0, index_col=0)[0]\n","mlrFE_summary_u = mlrFE_summary_u.iloc[[0]]\n","mlrFE_summary_u = mlrFE_summary_u.rename(columns={'Parameter': 'coef', 'T-stat': 't', 'P-value': 'P>|t|', 'Lower CI': '2.5 %', 'Upper CI': '97.5 %'})\n","mlrFE_summary_u"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1734352286182,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"oJQpii6x5r_Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3298d319-8fc2-481f-8ca2-3c009cfb2255"},"outputs":[{"output_type":"stream","name":"stdout","text":["             coef  P>|t|  2.5 %  97.5 %\n","slr_u       0.176  0.003  0.090   0.262\n","mlr_u      -0.063  0.694 -0.450   0.324\n","mlrFE_u     0.637  0.000  0.342   0.933\n","forest_u    0.077  0.011  0.018   0.136\n","tree_u     -0.058  0.373 -0.184   0.069\n","xgb_u       0.084  0.022  0.012   0.156\n","forestFE_u  0.698  0.000  0.351   1.045\n","treeFE_u    0.391  0.001  0.166   0.615\n","xgbFE_u     0.762  0.000  0.488   1.035\n"]}],"source":["# Concatenate the summaries, reset the index, and then rename\n","plr_summary_u = pd.concat([slr_summary_u,mlr_summary_u, mlrFE_summary_u, forest_summary_u, tree_summary_u, boost_summary_u, forest_diff_summary_u, tree_diff_summary_u, boost_diff_summary_u])\n","plr_summary_u.index = ['slr_u', 'mlr_u', 'mlrFE_u', 'forest_u', 'tree_u', 'xgb_u', 'forestFE_u', 'treeFE_u', 'xgbFE_u']  # Assign the desired labels\n","\n","# Print the updated summary\n","print(plr_summary_u[['coef', 'P>|t|', '2.5 %', '97.5 %']].to_string(float_format='{:.3f}'.format))"]},{"cell_type":"code","source":["\n","# Extract the coefficients into a list\n","coefficients_u = plr_summary_u['coef'].tolist()\n","\n","# Create the boxplot using seaborn\n","plt.figure(figsize=(10, 6))  # Adjust figure size if needed\n","sns.boxplot(x=coefficients_u)\n","plt.xlabel(\"Coefficients\")\n","plt.title(\"Distribution of Coefficients from Regression Models\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"l6tSiPFJKyoV","executionInfo":{"status":"ok","timestamp":1734352287223,"user_tz":-60,"elapsed":1050,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"e842e521-ae77-463a-ac79-13a73fc19c9f"},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":1224,"status":"ok","timestamp":1734352288442,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"9pCbBLhG7VUw","colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"7e1e2382-c1f9-400c-e9bb-1a3863b64fed"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary_u.shape[0]), np.nan)\n","errors[0, :] = plr_summary_u['coef'] - plr_summary_u['2.5 %']\n","errors[1, :] = plr_summary_u['97.5 %'] - plr_summary_u['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary_u.index, plr_summary_u['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary_u.index[:3], plr_summary_u['coef'][:3], yerr=errors[:, :3], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary_u.index[6:], plr_summary_u['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1.5])\n","\n","plt.legend(['DML', 'No ML', 'ML (FE)'], loc='lower right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the (partially) linear regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')\n","plt.rcParams['figure.figsize'] = [8, 4]"]},{"cell_type":"markdown","metadata":{"id":"QnYM33tViH96"},"source":["# Regression Analysis from 1995 with heterogeneity, lower set (below median)"]},{"cell_type":"markdown","metadata":{"id":"x-d8E1CQiH-E"},"source":["### Simple linear regression with environmental awareness (years 1995-2012)"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":42,"status":"ok","timestamp":1734352288443,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"XghMbw86iH-N","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2d740847-1b1f-4c81-9d85-8b126e73bc16"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.078\n","Model:                            OLS   Adj. R-squared:                  0.072\n","Method:                 Least Squares   F-statistic:                     8.044\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):             0.0252\n","Time:                        12:31:28   Log-Likelihood:                -179.85\n","No. Observations:                 144   AIC:                             363.7\n","Df Residuals:                     142   BIC:                             369.6\n","Df Model:                           1                                         \n","Covariance Type:              cluster                                         \n","==============================================================================================\n","                                 coef    std err          t      P>|t|      [0.025      0.975]\n","----------------------------------------------------------------------------------------------\n","Intercept                      1.2809      0.210      6.087      0.000       0.783       1.778\n","transport_trend_per_person     0.0785      0.028      2.836      0.025       0.013       0.144\n","==============================================================================\n","Omnibus:                       86.281   Durbin-Watson:                   0.372\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):                9.784\n","Skew:                           0.044   Prob(JB):                      0.00751\n","Kurtosis:                       1.726   Cond. No.                         23.9\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n"]}],"source":["# Define the model formula without controls\n","model_formula_no_controls = 'oecd_eps ~ transport_trend_per_person'\n","\n","# Fit the model using ordinary least squares (OLS)\n","# Use clustered standard errors\n","slr_l = smf.ols(formula=model_formula_no_controls, data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","slr_summary_l = slr_l.summary\n","\n","\n","# Print the model summary\n","print(slr_l.summary())"]},{"cell_type":"markdown","metadata":{"id":"7Zdqsc3xiH-S"},"source":["### Multiple linear regression modell with environmental awareness (years 1995-2012)"]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":36,"status":"ok","timestamp":1734352288444,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"X75UlkxBiH-W","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c434ec4c-25a8-4f3c-fb42-15a528ffb194"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:               oecd_eps   R-squared:                       0.533\n","Model:                            OLS   Adj. R-squared:                  0.516\n","Method:                 Least Squares   F-statistic:                     109.4\n","Date:                Mon, 16 Dec 2024   Prob (F-statistic):           1.73e-06\n","Time:                        12:31:28   Log-Likelihood:                -130.83\n","No. Observations:                 144   AIC:                             273.7\n","Df Residuals:                     138   BIC:                             291.5\n","Df Model:                           5                                         \n","Covariance Type:              cluster                                         \n","===============================================================================================\n","                                  coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------------------\n","const                           3.4372      1.333      2.579      0.037       0.286       6.589\n","transport_trend_per_person     -0.2116      0.064     -3.303      0.013      -0.363      -0.060\n","gdp_per_capita                  0.0838      0.007     12.846      0.000       0.068       0.099\n","urbanization_rate              -0.0250      0.013     -1.882      0.102      -0.056       0.006\n","corruption_perception_index     0.0645      0.137      0.472      0.651      -0.258       0.387\n","industry_composition           -0.0143      0.035     -0.407      0.696      -0.097       0.069\n","==============================================================================\n","Omnibus:                       10.621   Durbin-Watson:                   0.546\n","Prob(Omnibus):                  0.005   Jarque-Bera (JB):                4.142\n","Skew:                           0.019   Prob(JB):                        0.126\n","Kurtosis:                       2.170   Cond. No.                     1.12e+03\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are robust to cluster correlation (cluster)\n","[2] The condition number is large, 1.12e+03. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}],"source":["import pandas as pd\n","import statsmodels.api as sm\n","\n","# Select the variables for the regression\n","X = below_median_df[['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']]\n","y = below_median_df['oecd_eps']\n","\n","# Add a constant term to the independent variables\n","X = sm.add_constant(X)\n","\n","# Fit the regression model\n","mlr_l = sm.OLS(y, X).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']}, use_t=True)\n","\n","# Store the model summary in a variable\n","mlr_summary_l = mlr_l.summary\n","\n","# Print the summary of the regression results\n","print(mlr_l.summary())"]},{"cell_type":"code","source":["# Create a DataFrame to store the coefficients and confidence intervals\n","summary_data = {\n","    'Model': ['Without Controls', 'With Controls'],\n","    'coef': [slr_l.params['transport_trend_per_person'], mlr_l.params['transport_trend_per_person']],\n","    '2.5 %': [slr_l.conf_int().loc['transport_trend_per_person', 0], mlr_l.conf_int().loc['transport_trend_per_person', 0]],\n","    '97.5 %': [slr_l.conf_int().loc['transport_trend_per_person', 1], mlr_l.conf_int().loc['transport_trend_per_person', 1]],\n","    'P>|t|': [slr_l.pvalues['transport_trend_per_person'], mlr_l.pvalues['transport_trend_per_person']]  # Add p-value\n","}\n","summary_df = pd.DataFrame(summary_data).set_index('Model')\n","\n","# Print the summary\n","print(summary_df[['coef', '2.5 %', '97.5 %']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M-51dJryuRjf","executionInfo":{"status":"ok","timestamp":1734352288444,"user_tz":-60,"elapsed":21,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"a0ce2433-94b3-44d7-d829-6de867075d6f"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["                      coef     2.5 %    97.5 %\n","Model                                         \n","Without Controls  0.078505  0.013053  0.143957\n","With Controls    -0.211593 -0.363062 -0.060124\n"]}]},{"cell_type":"code","source":["#Table 2: Basic OLS table\n","# Creating models with progressive controls\n","model1 = smf.ols('oecd_eps ~ transport_trend_per_person', data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']})\n","model2 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita', data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']})\n","model3 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate', data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']})\n","model4 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition', data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']})\n","model5 = smf.ols('oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + industry_composition + corruption_perception_index', data=below_median_df).fit(cov_type='cluster', cov_kwds={'groups': below_median_df['country_code']})\n","\n","# Using Stargazer to create a regression table\n","stargazer = Stargazer([model1, model2, model3, model4, model5])\n","\n","# Displaying the table\n","stargazer.significant_digits(3)\n","stargazer"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":499},"id":"IPNbxh1hudBn","executionInfo":{"status":"ok","timestamp":1734352289001,"user_tz":-60,"elapsed":568,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"163e7b6e-87ae-404f-fe07-cb4bf8d0ce19"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<stargazer.stargazer.Stargazer at 0x7f9df4893880>"],"text/html":["<table style=\"text-align:center\"><tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align:left\"></td><td colspan=\"5\"><em>Dependent variable: oecd_eps</em></td></tr><tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td><td>(3)</td><td>(4)</td><td>(5)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","\n","<tr><td style=\"text-align:left\">Intercept</td><td>1.281<sup>***</sup></td><td>1.852<sup>***</sup></td><td>3.141<sup>***</sup></td><td>3.282<sup>***</sup></td><td>3.437<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.210)</td><td>(0.273)</td><td>(0.827)</td><td>(1.248)</td><td>(1.333)</td></tr>\n","<tr><td style=\"text-align:left\">corruption_perception_index</td><td></td><td></td><td></td><td></td><td>0.064<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td></td><td>(0.137)</td></tr>\n","<tr><td style=\"text-align:left\">gdp_per_capita</td><td></td><td>0.080<sup>***</sup></td><td>0.086<sup>***</sup></td><td>0.086<sup>***</sup></td><td>0.084<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td>(0.007)</td><td>(0.004)</td><td>(0.004)</td><td>(0.007)</td></tr>\n","<tr><td style=\"text-align:left\">industry_composition</td><td></td><td></td><td></td><td>-0.004<sup></sup></td><td>-0.014<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td></td><td>(0.024)</td><td>(0.035)</td></tr>\n","<tr><td style=\"text-align:left\">transport_trend_per_person</td><td>0.079<sup>***</sup></td><td>-0.228<sup>***</sup></td><td>-0.176<sup>***</sup></td><td>-0.178<sup>***</sup></td><td>-0.212<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.028)</td><td>(0.044)</td><td>(0.059)</td><td>(0.058)</td><td>(0.064)</td></tr>\n","<tr><td style=\"text-align:left\">urbanization_rate</td><td></td><td></td><td>-0.025<sup>*</sup></td><td>-0.025<sup>*</sup></td><td>-0.025<sup>*</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td></td><td></td><td>(0.014)</td><td>(0.014)</td><td>(0.013)</td></tr>\n","\n","<td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align: left\">Observations</td><td>144</td><td>144</td><td>144</td><td>144</td><td>144</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.078</td><td>0.484</td><td>0.530</td><td>0.530</td><td>0.533</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>0.072</td><td>0.477</td><td>0.520</td><td>0.516</td><td>0.516</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.850 (df=142)</td><td>0.638 (df=141)</td><td>0.611 (df=140)</td><td>0.613 (df=139)</td><td>0.613 (df=138)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>8.044<sup>***</sup> (df=1; 142)</td><td>68.643<sup>***</sup> (df=2; 141)</td><td>132.564<sup>***</sup> (df=3; 140)</td><td>143.079<sup>***</sup> (df=4; 139)</td><td>109.433<sup>***</sup> (df=5; 138)</td></tr>\n","<tr><td colspan=\"6\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td><td colspan=\"5\" style=\"text-align: right\"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr></table>"]},"metadata":{},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"KsvarCTTiH-Z"},"source":["### Including fixed effects into Multiple linear regression"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1734352289002,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"_S-AWyZ3iH-d","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"5ab5babf-68a7-4c19-c8fc-cfef0f561fa2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL           1.652546                   10.103135       34.315782   \n","ESP           2.332639                    6.992972       23.149621   \n","FIN           2.353704                   11.262301       36.184673   \n","FRA           2.210880                   11.584645       32.536600   \n","GBR           1.796296                   10.808681       35.545216   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","BEL                   97.301556                     6.647222   \n","ESP                   77.096667                     6.350000   \n","FIN                   82.696167                     9.456667   \n","FRA                   76.786111                     6.920000   \n","GBR                   79.714889                     8.303333   \n","\n","              industry_composition  \n","country_code                        \n","BEL                      23.246218  \n","ESP                      26.454275  \n","FIN                      28.879248  \n","FRA                      20.001753  \n","GBR                      21.035715  "],"text/html":["\n","  <div id=\"df-bf03b575-9986-4b14-9efb-698561b1c28a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>1.652546</td>\n","      <td>10.103135</td>\n","      <td>34.315782</td>\n","      <td>97.301556</td>\n","      <td>6.647222</td>\n","      <td>23.246218</td>\n","    </tr>\n","    <tr>\n","      <th>ESP</th>\n","      <td>2.332639</td>\n","      <td>6.992972</td>\n","      <td>23.149621</td>\n","      <td>77.096667</td>\n","      <td>6.350000</td>\n","      <td>26.454275</td>\n","    </tr>\n","    <tr>\n","      <th>FIN</th>\n","      <td>2.353704</td>\n","      <td>11.262301</td>\n","      <td>36.184673</td>\n","      <td>82.696167</td>\n","      <td>9.456667</td>\n","      <td>28.879248</td>\n","    </tr>\n","    <tr>\n","      <th>FRA</th>\n","      <td>2.210880</td>\n","      <td>11.584645</td>\n","      <td>32.536600</td>\n","      <td>76.786111</td>\n","      <td>6.920000</td>\n","      <td>20.001753</td>\n","    </tr>\n","    <tr>\n","      <th>GBR</th>\n","      <td>1.796296</td>\n","      <td>10.808681</td>\n","      <td>35.545216</td>\n","      <td>79.714889</td>\n","      <td>8.303333</td>\n","      <td>21.035715</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf03b575-9986-4b14-9efb-698561b1c28a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bf03b575-9986-4b14-9efb-698561b1c28a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bf03b575-9986-4b14-9efb-698561b1c28a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9d1873ce-7e6c-4f63-bb08-e1c048217873\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d1873ce-7e6c-4f63-bb08-e1c048217873')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9d1873ce-7e6c-4f63-bb08-e1c048217873 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mean_final_data_l","summary":"{\n  \"name\": \"mean_final_data_l\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"ESP\",\n          \"HUN\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3443284013217884,\n        \"min\": 1.4368055595291833,\n        \"max\": 2.3537037240134335,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.3326388994852723,\n          1.80185184544987,\n          1.6525462865829432\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.286518280644483,\n        \"min\": 3.969895001484197,\n        \"max\": 11.584644785854346,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.992971620517307,\n          4.867046106559398,\n          10.103134991493668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.64870057605638,\n        \"min\": 7.837828318311919,\n        \"max\": 36.184673410309465,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.149621157703212,\n          9.131706666387789,\n          34.31578154709006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.194761834102426,\n        \"min\": 55.653055555555554,\n        \"max\": 97.30155555555555,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          77.09666666666666,\n          66.41783333333333,\n          97.30155555555555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8605336450126309,\n        \"min\": 4.122222222222223,\n        \"max\": 9.456666666666667,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.35,\n          4.9511111111111115,\n          6.647222222222222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9169475539273897,\n        \"min\": 20.001752786111112,\n        \"max\": 30.281872896666666,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          26.454274780000002,\n          26.450135469444447,\n          23.246217850555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}],"source":["# compute means by country\n","y = \"oecd_eps\"\n","X = ['transport_trend_per_person', 'gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition']\n","mean_final_data_l = below_median_df.groupby(\"country_code\")[[y] + X].mean()\n","mean_final_data_l.head()"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":373,"status":"ok","timestamp":1734352289365,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"xG0-kl3ViH-f","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"149e351e-bea6-4a7f-9e0e-f8e85b8b119d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              oecd_eps  transport_trend_per_person  gdp_per_capita  \\\n","country_code                                                         \n","BEL          -0.881713                   -1.110769       -5.901955   \n","BEL          -0.881713                   -1.004358       -6.826226   \n","BEL          -0.881713                   -0.867430       -9.494843   \n","BEL          -0.881713                   -0.372837       -8.977338   \n","BEL          -0.881713                   -0.048065       -9.062980   \n","\n","              urbanization_rate  corruption_perception_index  \\\n","country_code                                                   \n","BEL                   -0.524556                    -1.397222   \n","BEL                   -0.450556                    -1.397222   \n","BEL                   -0.377556                    -1.397222   \n","BEL                   -0.305556                    -1.247222   \n","BEL                   -0.236556                    -1.347222   \n","\n","              industry_composition  \n","country_code                        \n","BEL                       2.799596  \n","BEL                       2.564669  \n","BEL                       2.863648  \n","BEL                       2.324468  \n","BEL                       1.479626  "],"text/html":["\n","  <div id=\"df-81ed4885-f47e-4ce0-b8e6-54594043aad0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oecd_eps</th>\n","      <th>transport_trend_per_person</th>\n","      <th>gdp_per_capita</th>\n","      <th>urbanization_rate</th>\n","      <th>corruption_perception_index</th>\n","      <th>industry_composition</th>\n","    </tr>\n","    <tr>\n","      <th>country_code</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-1.110769</td>\n","      <td>-5.901955</td>\n","      <td>-0.524556</td>\n","      <td>-1.397222</td>\n","      <td>2.799596</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-1.004358</td>\n","      <td>-6.826226</td>\n","      <td>-0.450556</td>\n","      <td>-1.397222</td>\n","      <td>2.564669</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.867430</td>\n","      <td>-9.494843</td>\n","      <td>-0.377556</td>\n","      <td>-1.397222</td>\n","      <td>2.863648</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.372837</td>\n","      <td>-8.977338</td>\n","      <td>-0.305556</td>\n","      <td>-1.247222</td>\n","      <td>2.324468</td>\n","    </tr>\n","    <tr>\n","      <th>BEL</th>\n","      <td>-0.881713</td>\n","      <td>-0.048065</td>\n","      <td>-9.062980</td>\n","      <td>-0.236556</td>\n","      <td>-1.347222</td>\n","      <td>1.479626</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81ed4885-f47e-4ce0-b8e6-54594043aad0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-81ed4885-f47e-4ce0-b8e6-54594043aad0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-81ed4885-f47e-4ce0-b8e6-54594043aad0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ff13ab6c-2963-4dc0-8e56-19b2e8184f33\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff13ab6c-2963-4dc0-8e56-19b2e8184f33')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ff13ab6c-2963-4dc0-8e56-19b2e8184f33 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demeaned_final_data_l","summary":"{\n  \"name\": \"demeaned_final_data_l\",\n  \"rows\": 144,\n  \"fields\": [\n    {\n      \"column\": \"country_code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"ESP\",\n          \"HUN\",\n          \"BEL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oecd_eps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.820365658950734,\n        \"min\": -1.3983796437581386,\n        \"max\": 1.8203704953193334,\n        \"num_unique_values\": 105,\n        \"samples\": [\n          -0.5828703509436335,\n          0.6078703999519333,\n          0.15787035226823343\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transport_trend_per_person\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5710712591258825,\n        \"min\": -1.7114100953102156,\n        \"max\": 0.9863528094363536,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          -0.12299061888422402,\n          -1.5465423656444983,\n          0.1939069157315121\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gdp_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.427862580608064,\n        \"min\": -12.376263321817433,\n        \"max\": 17.58812082869244,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          -1.156518567438039,\n          -7.040536759174813,\n          6.559572157667866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanization_rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0397610216434263,\n        \"min\": -1.8741111111111053,\n        \"max\": 3.260166666666663,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.18149999999999977,\n          -1.1586666666666616,\n          0.20011111111112712\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"corruption_perception_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5802834355544413,\n        \"min\": -2.0,\n        \"max\": 1.3088888888888883,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          1.3088888888888883,\n          -1.3972222222222221,\n          0.44333333333333336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry_composition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8453085007437444,\n        \"min\": -5.500466983888888,\n        \"max\": 4.004369863333334,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          -0.7984894022222235,\n          1.6248661899999988,\n          -0.7689622744444442\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}],"source":["# compute demeaned df\n","demeaned_final_data_l = (below_median_df\n","               .set_index(\"country_code\") # set the index as the person indicator\n","               [[y] + X]\n","               - mean_final_data_l) # subtract the mean data\n","\n","demeaned_final_data_l.head()"]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":438,"status":"ok","timestamp":1734352289793,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"MsY7x_CyiH-j","colab":{"base_uri":"https://localhost:8080/","height":169},"outputId":"2c199247-722c-4996-c09a-a57233dce8cb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"],"text/html":["<table class=\"simpletable\">\n","<tr>\n","               <td></td>                  <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>Intercept</th>                   <td>         0</td> <td>    0.037</td> <td>        0</td> <td> 1.000</td> <td>   -0.073</td> <td>    0.073</td>\n","</tr>\n","<tr>\n","  <th>transport_trend_per_person</th>  <td>    0.2153</td> <td>    0.082</td> <td>    2.612</td> <td> 0.010</td> <td>    0.052</td> <td>    0.378</td>\n","</tr>\n","<tr>\n","  <th>Q('gdp_per_capita')</th>         <td>    0.0689</td> <td>    0.007</td> <td>    9.253</td> <td> 0.000</td> <td>    0.054</td> <td>    0.084</td>\n","</tr>\n","<tr>\n","  <th>Q('urbanization_rate')</th>      <td>    0.1268</td> <td>    0.051</td> <td>    2.478</td> <td> 0.014</td> <td>    0.026</td> <td>    0.228</td>\n","</tr>\n","<tr>\n","  <th>corruption_perception_index</th> <td>    0.0724</td> <td>    0.074</td> <td>    0.981</td> <td> 0.328</td> <td>   -0.073</td> <td>    0.218</td>\n","</tr>\n","<tr>\n","  <th>industry_composition</th>        <td>   -0.0164</td> <td>    0.028</td> <td>   -0.577</td> <td> 0.565</td> <td>   -0.073</td> <td>    0.040</td>\n","</tr>\n","</table>"],"text/latex":"\\begin{center}\n\\begin{tabular}{lcccccc}\n\\toprule\n                                       & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}                     &            0  &        0.037     &         0  &         1.000        &       -0.073    &        0.073     \\\\\n\\textbf{transport\\_trend\\_per\\_person} &       0.2153  &        0.082     &     2.612  &         0.010        &        0.052    &        0.378     \\\\\n\\textbf{Q('gdp\\_per\\_capita')}         &       0.0689  &        0.007     &     9.253  &         0.000        &        0.054    &        0.084     \\\\\n\\textbf{Q('urbanization\\_rate')}       &       0.1268  &        0.051     &     2.478  &         0.014        &        0.026    &        0.228     \\\\\n\\textbf{corruption\\_perception\\_index} &       0.0724  &        0.074     &     0.981  &         0.328        &       -0.073    &        0.218     \\\\\n\\textbf{industry\\_composition}         &      -0.0164  &        0.028     &    -0.577  &         0.565        &       -0.073    &        0.040     \\\\\n\\bottomrule\n\\end{tabular}\n\\end{center}"},"metadata":{},"execution_count":41}],"source":["# compute with ols fe estimator\n","est_fe_l = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + Q('gdp_per_capita') + Q('urbanization_rate') + corruption_perception_index + industry_composition\", data=demeaned_final_data_l).fit()\n","est_fe_l.summary().tables[1]"]},{"cell_type":"code","source":["# Canned method with clustering on country level\n","est_fe_canned = PanelOLS.from_formula(\"oecd_eps ~ transport_trend_per_person + gdp_per_capita + urbanization_rate + corruption_perception_index + industry_composition + EntityEffects\",\n","                            data=below_median_df.set_index([\"country_code\", \"year\"]))\n","\n","result = est_fe_canned.fit(cov_type='clustered', cluster_entity=True)\n","result.summary.tables[1]\n","\n","# Store the model summary in a variable\n","mlrFE_summary_l = result.summary\n","\n","\n","# Print the summary of the regression results\n","print(mlrFE_summary_l)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZdHEkVQu83B","executionInfo":{"status":"ok","timestamp":1734352290357,"user_tz":-60,"elapsed":575,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"f1922a67-e550-40ae-962a-a217c53ecd04"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["                          PanelOLS Estimation Summary                           \n","================================================================================\n","Dep. Variable:               oecd_eps   R-squared:                        0.7222\n","Estimator:                   PanelOLS   R-squared (Between):             -33.240\n","No. Observations:                 144   R-squared (Within):               0.7222\n","Date:                Mon, Dec 16 2024   R-squared (Overall):             -28.101\n","Time:                        12:31:29   Log-likelihood                   -83.101\n","Cov. Estimator:             Clustered                                           \n","                                        F-statistic:                      68.100\n","Entities:                           8   P-value                           0.0000\n","Avg Obs:                       18.000   Distribution:                   F(5,131)\n","Min Obs:                       18.000                                           \n","Max Obs:                       18.000   F-statistic (robust):             22.756\n","                                        P-value                           0.0000\n","Time periods:                      18   Distribution:                   F(5,131)\n","Avg Obs:                       8.0000                                           \n","Min Obs:                       8.0000                                           \n","Max Obs:                       8.0000                                           \n","                                                                                \n","                                      Parameter Estimates                                      \n","===============================================================================================\n","                             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n","-----------------------------------------------------------------------------------------------\n","transport_trend_per_person      0.2153     0.1601     1.3446     0.1811     -0.1015      0.5321\n","gdp_per_capita                  0.0689     0.0112     6.1538     0.0000      0.0467      0.0910\n","urbanization_rate               0.1268     0.1269     0.9994     0.3195     -0.1242      0.3778\n","corruption_perception_index     0.0724     0.0945     0.7659     0.4451     -0.1145      0.2592\n","industry_composition           -0.0164     0.0300    -0.5472     0.5851     -0.0758      0.0429\n","===============================================================================================\n","\n","F-test for Poolability: 17.597\n","P-value: 0.0000\n","Distribution: F(7,131)\n","\n","Included effects: Entity\n"]}]},{"cell_type":"code","execution_count":43,"metadata":{"executionInfo":{"elapsed":838,"status":"ok","timestamp":1734352291186,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"dtk9-V9SiH-o","colab":{"base_uri":"https://localhost:8080/","height":517},"outputId":"d865fd69-7607-4532-ce8c-8a79bbbb52b4"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-43-3f00fbf740ac>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  below_median_df[\"fitted_values\"] = est_ols_l.fittedvalues\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='transport_trend_per_person', ylabel='oecd_eps'>"]},"metadata":{},"execution_count":43},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# estimate ols and store fitted values\n","est_ols_l = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=below_median_df).fit()\n","below_median_df[\"fitted_values\"] = est_ols_l.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=below_median_df, color = \"r\", s = 20)\n","\n","# plot ols fit line (crossing fitted values)\n","sns.lineplot(x='transport_trend_per_person', y='fitted_values', data=below_median_df)"]},{"cell_type":"code","execution_count":44,"metadata":{"executionInfo":{"elapsed":1997,"status":"ok","timestamp":1734352293175,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"GsPa4CmiiH-s","colab":{"base_uri":"https://localhost:8080/","height":608},"outputId":"6bc9aac4-dd3a-4ee5-da1f-741f74861d22"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-44-2a70bc38633e>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  below_median_df[\"fitted_values\"] = est_ols_l.fittedvalues\n","<ipython-input-44-2a70bc38633e>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  below_median_df[\"fitted_values_fe\"] = est_fe_l.fittedvalues\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# get number of countries\n","cou = np.unique(below_median_df.loc[:,\"country_code\"].values)\n","colors = sns.color_palette(n_colors=len(cou)).as_hex()\n","\n","# estimate ols and store fitted values\n","est_ols_l = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person\", data=below_median_df).fit()\n","below_median_df[\"fitted_values\"] = est_ols_l.fittedvalues\n","\n","# estimate fe with dummies and store fitted values\n","est_fe_l = sm.OLS.from_formula(\"oecd_eps ~ transport_trend_per_person + C(country_code)\", data=below_median_df).fit()\n","below_median_df[\"fitted_values_fe\"] = est_fe_l.fittedvalues\n","\n","# plot observations\n","sns.scatterplot(x='transport_trend_per_person', y='oecd_eps', data=below_median_df, hue=\"country_code\", legend = False,\n","                palette = colors)\n","\n","# plot fe fit lines (crossing fitted values)\n","for i in range(len(cou)):\n","    df_temp = below_median_df.query(f\"country_code=='{cou[i]}'\")\n","    sns.lineplot(x='transport_trend_per_person', y='fitted_values_fe', data=df_temp, hue=\"country_code\", legend = False)"]},{"cell_type":"markdown","metadata":{"id":"H5PQ8uAiiH-z"},"source":["## Double machine learning without fixed effects"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1734352293176,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"0I1HX4QbiH-2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ed2c9a8a-1bd9-4da5-b7c2-d73257855d36"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 144\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 144 entries, 0 to 251\n","Columns: 15 entries, country_code to fitted_values_fe\n","dtypes: float64(12), int64(2), object(1)\n","memory usage: 18.0+ KB\n","\n"]}],"source":["# Create a DoubleMLClusterData object to prepare the data for Double Machine Learning.\n","# This object specifies the outcome variable ('y'), treatment variable ('x'),\n","# clustering variable ('id'), and confounders ('x_cols').\n","obj_dml_data_from_df_l = DoubleMLClusterData(below_median_df, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","\n","# Print the DoubleMLClusterData object to display its properties and data information.\n","print(obj_dml_data_from_df_l)"]},{"cell_type":"code","execution_count":46,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1734352293176,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"3gD7vl2JiH-3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ee6f83e7-e590-4649-9ae1-aae9d1341adf"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|   2.5 %  \\\n","transport_trend_per_person  0.031109  0.092608  0.335921  0.736931 -0.1504   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.212618  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_data_from_df_l,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_summary_l = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":47,"metadata":{"executionInfo":{"elapsed":7351,"status":"ok","timestamp":1734352300519,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"cV2eeqHOiH-_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a98bcb6e-b458-49c1-d50f-19672b992626"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t    P>|t|     2.5 %  \\\n","transport_trend_per_person -0.115744  0.157647 -0.734195  0.46283 -0.424726   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.193239  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_data_from_df_l,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_summary_l = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_summary_l)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":48,"metadata":{"executionInfo":{"elapsed":262,"status":"ok","timestamp":1734352300770,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"9vovkZwpiH_G","colab":{"base_uri":"https://localhost:8080/"},"outputId":"48092257-a889-404e-c2e7-354b7e56d07d"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person -0.022482  0.116206 -0.193469  0.846592 -0.250241   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.205277  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(n_jobs=1,  # Number of parallel threads used to run XGBoost\n","                     objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","                     eta=0.1,  # Learning rate\n","                     n_estimators=35)  # Number of boosting rounds (trees)\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR(obj_dml_data_from_df_l,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_summary_l = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_summary_l)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","source":["mlr_summary_l"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDiYmUz2xvN0","executionInfo":{"status":"ok","timestamp":1734352300771,"user_tz":-60,"elapsed":42,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d5e031b6-f755-486b-e1ed-6a3136798166"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method RegressionResults.summary of <statsmodels.regression.linear_model.OLSResults object at 0x7f9e03861660>>"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","execution_count":50,"metadata":{"executionInfo":{"elapsed":35,"status":"ok","timestamp":1734352300771,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"hR2ntenGlHmh","colab":{"base_uri":"https://localhost:8080/","height":146},"outputId":"7395866d-2080-42ab-99e1-6003ab53d8fb"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-50-de2877ed1538>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlr_summary_l = pd.read_html(mlr_summary_l, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  std err      t  P>|t|  2.5 %  97.5 %\n","transport_trend_per_person -0.2116    0.064 -3.303  0.013 -0.363   -0.06"],"text/html":["\n","  <div id=\"df-386916ab-036e-4145-8e02-4c9615dcc881\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>-0.2116</td>\n","      <td>0.064</td>\n","      <td>-3.303</td>\n","      <td>0.013</td>\n","      <td>-0.363</td>\n","      <td>-0.06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-386916ab-036e-4145-8e02-4c9615dcc881')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-386916ab-036e-4145-8e02-4c9615dcc881 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-386916ab-036e-4145-8e02-4c9615dcc881');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_78683cc7-b912-429a-9ab5-09d63e67cc6a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlr_summary_l')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_78683cc7-b912-429a-9ab5-09d63e67cc6a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlr_summary_l');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlr_summary_l","summary":"{\n  \"name\": \"mlr_summary_l\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.2116,\n        \"max\": -0.2116,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.2116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.064,\n        \"max\": 0.064,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.064\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -3.303,\n        \"max\": -3.303,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -3.303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.013,\n        \"max\": 0.013,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.363,\n        \"max\": -0.363,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.06,\n        \"max\": -0.06,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":50}],"source":["# Assuming mlrFE is your regression model object\n","mlr_summary_l = mlr_l.summary().tables[1].as_html()\n","mlr_summary_l = pd.read_html(mlr_summary_l, header=0, index_col=0)[0]\n","mlr_summary_l = mlr_summary_l.iloc[[1]]\n","mlr_summary_l = mlr_summary_l.rename(columns={'[0.025': '2.5 %', '0.975]': '97.5 %'})\n","mlr_summary_l"]},{"cell_type":"code","execution_count":51,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1734352300772,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"P4l1iD0Bl5hQ","colab":{"base_uri":"https://localhost:8080/","height":146},"outputId":"0148dbd7-a924-4a40-fd18-792c8fb41327"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-51-98b7d4f65c8e>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  slr_summary_l = pd.read_html(slr_summary_l, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  std err      t  P>|t|  2.5 %  97.5 %\n","transport_trend_per_person  0.0785    0.028  2.836  0.025  0.013   0.144"],"text/html":["\n","  <div id=\"df-156c7f51-0b30-4915-bd61-50309c506e85\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>std err</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.0785</td>\n","      <td>0.028</td>\n","      <td>2.836</td>\n","      <td>0.025</td>\n","      <td>0.013</td>\n","      <td>0.144</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-156c7f51-0b30-4915-bd61-50309c506e85')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-156c7f51-0b30-4915-bd61-50309c506e85 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-156c7f51-0b30-4915-bd61-50309c506e85');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_f1a5902d-5609-49a1-b3f0-6c577895f818\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('slr_summary_l')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f1a5902d-5609-49a1-b3f0-6c577895f818 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('slr_summary_l');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"slr_summary_l","summary":"{\n  \"name\": \"slr_summary_l\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0785,\n        \"max\": 0.0785,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0785\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std err\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.028,\n        \"max\": 0.028,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.836,\n        \"max\": 2.836,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.025,\n        \"max\": 0.025,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.013,\n        \"max\": 0.013,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.144,\n        \"max\": 0.144,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}],"source":["# Assuming mlrFE is your regression model object\n","slr_summary_l = slr_l.summary().tables[1].as_html()\n","slr_summary_l = pd.read_html(slr_summary_l, header=0, index_col=0)[0]\n","slr_summary_l = slr_summary_l.iloc[[1]]\n","slr_summary_l = slr_summary_l.rename(columns={'Parameter': 'coef', 'T-stat': 't', 'P-value': 'P>|t|', '[0.025': '2.5 %', '0.975]': '97.5 %'})\n","slr_summary_l"]},{"cell_type":"code","execution_count":52,"metadata":{"executionInfo":{"elapsed":225,"status":"ok","timestamp":1734352300977,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"IqMdlNsJiH_I","colab":{"base_uri":"https://localhost:8080/"},"outputId":"29f9deb4-c61d-4e29-9324-9e1c99da84bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["              coef     2.5 %    97.5 %\n","slr_l     0.078500  0.013000  0.144000\n","mlr_l    -0.211600 -0.363000 -0.060000\n","forest_l -0.115744 -0.424726  0.193239\n","tree_l    0.031109 -0.150400  0.212618\n","xgb_l    -0.022482 -0.250241  0.205277\n"]}],"source":["# Concatenate the summaries and update the index\n","plr_summary_l = pd.concat([slr_summary_l, mlr_summary_l, forest_summary_l, tree_summary_l, boost_summary_l])\n","plr_summary_l.index = ['slr_l', 'mlr_l','forest_l', 'tree_l', 'xgb_l']\n","\n","# Print the updated summary\n","print(plr_summary_l[['coef', '2.5 %', '97.5 %']])"]},{"cell_type":"code","execution_count":53,"metadata":{"executionInfo":{"elapsed":625,"status":"ok","timestamp":1734352301382,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"AGTflVOmiH_N","colab":{"base_uri":"https://localhost:8080/","height":411},"outputId":"f1f7c218-7fef-48cf-b950-0912c2d5eec4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary_l.shape[0]), np.nan)\n","errors[0, :] = plr_summary_l['coef'] - plr_summary_l['2.5 %']\n","errors[1, :] = plr_summary_l['97.5 %'] - plr_summary_l['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary_l.index, plr_summary_l['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary_l.index[:2], plr_summary_l['coef'][:2], yerr=errors[:, :2], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary_l.index[6:], plr_summary_l['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FD)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the (partially) linear regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')"]},{"cell_type":"markdown","metadata":{"id":"BceAQH-EiH_O"},"source":["### DML Including Fixed Effects"]},{"cell_type":"code","execution_count":54,"metadata":{"executionInfo":{"elapsed":20,"status":"ok","timestamp":1734352301383,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"MCAC2Mu5iH_Q","colab":{"base_uri":"https://localhost:8080/"},"outputId":"391d9b91-c600-40d6-df01-7a5ccb729fb2"},"outputs":[{"output_type":"stream","name":"stdout","text":["================== DoubleMLClusterData Object ==================\n","\n","------------------ Data summary      ------------------\n","Outcome variable: oecd_eps\n","Treatment variable(s): ['transport_trend_per_person']\n","Cluster variable(s): ['country_code']\n","Covariates: ['gdp_per_capita', 'urbanization_rate', 'corruption_perception_index', 'industry_composition']\n","Instrument variable(s): None\n","No. Observations: 144\n","\n","------------------ DataFrame info    ------------------\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 144 entries, 0 to 143\n","Columns: 7 entries, country_code to industry_composition\n","dtypes: float64(6), object(1)\n","memory usage: 8.0+ KB\n","\n"]}],"source":["# Reset the index to bring 'country_code' back as a column\n","demeaned_final_data_l = demeaned_final_data_l.reset_index()\n","\n","obj_dml_diff_l = DoubleMLClusterData(demeaned_final_data_l, 'oecd_eps', 'transport_trend_per_person', ['country_code'], x_cols=['gdp_per_capita',\n","                'urbanization_rate',\n","                'corruption_perception_index', 'industry_composition'])\n","print(obj_dml_diff_l)"]},{"cell_type":"code","execution_count":55,"metadata":{"executionInfo":{"elapsed":4106,"status":"ok","timestamp":1734352305478,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"MQ8GkQ14iH_V","colab":{"base_uri":"https://localhost:8080/"},"outputId":"90e8138c-14b8-4207-fd5a-c105961badf0"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|    2.5 %  \\\n","transport_trend_per_person  0.166986  0.170154  0.981382  0.326404 -0.16651   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.500483  \n"]}],"source":["# Estimate the ATE using Random Forest as the machine learning model\n","\n","# randomForest: Initialize a Random Forest Regressor for outcome regression\n","randomForest = RandomForestRegressor(\n","    n_estimators=500,  # Number of trees in the forest\n","    max_depth=7,  # Maximum depth of each tree\n","    max_features=3,  # Number of features to consider when looking for the best split\n","    min_samples_leaf=3)  # Minimum number of samples required to be at a leaf node\n","\n","# Initialize the DoubleMLPLR model with Random Forest learners\n","dml_plr_forest = dml.DoubleMLPLR(obj_dml_diff_l,  # Uses the 'data_dml_base' DoubleMLData object\n","                                 ml_l=randomForest,  # Specifies the Random Forest Regressor for outcome regression\n","                                 ml_m=randomForest,  # Specifies the Random Forest Classifier for treatment regression\n","                                 n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_forest.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","forest_diff_summary_l = dml_plr_forest.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","# Print the model summary\n","print(forest_diff_summary_l)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":56,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1734352305479,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"8lMy_AcdiH_d","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c7763782-1d05-41d1-efe6-83c0c5ec8979"},"outputs":[{"output_type":"stream","name":"stdout","text":["                               coef   std err         t    P>|t|    2.5 %  \\\n","transport_trend_per_person  0.04189  0.084726  0.494419  0.62101 -0.12417   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.207951  \n"]}],"source":["# Estimate the ATE using Decision Trees as the machine learning model\n","\n","\n","# Define a Decision Tree Regressor with simple, fixed parameters\n","tree_model = DecisionTreeRegressor(\n","    max_depth=10,  # Limit the depth of the tree to prevent overfitting\n","    min_samples_split=50,  # Minimum samples required to split a node\n","    min_samples_leaf=20  # Minimum samples required to be at a leaf node\n",")\n","\n","# Initialize DoubleMLPLR with the Decision Tree model for both outcome and treatment models\n","dml_tree= dml.DoubleMLPLR(\n","    obj_dml_diff_l,   # This is the DoubleML data object\n","    ml_l=tree_model,  # Decision Tree model for outcome regression\n","    ml_m=tree_model,  # Decision Tree model for treatment regression\n","    n_folds=3         # Use 3-fold cross-fitting (simpler for students to understand)\n",")\n","\n","# Fit the DoubleMLPLR model\n","dml_tree.fit(store_predictions=True)\n","\n","# Store the model summary in a variable\n","tree_diff_summary_l = dml_tree.summary  # Assigns the model summary to the 'forest_summary' variable\n","\n","\n","# Display the summary of the estimated Average Treatment Effect (ATE)\n","print(dml_tree.summary)"]},{"cell_type":"code","execution_count":57,"metadata":{"executionInfo":{"elapsed":231,"status":"ok","timestamp":1734352305700,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"h3OJxOJViH_g","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fb49b3e4-861a-4abd-8aa6-7c8a73fce59e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                                coef   std err         t     P>|t|     2.5 %  \\\n","transport_trend_per_person  0.115454  0.125782  0.917897  0.358673 -0.131073   \n","\n","                              97.5 %  \n","transport_trend_per_person  0.361982  \n"]}],"source":["# Estimate the ATE using Boosted Trees (XGBoost) as the machine learning model\n","\n","# boost: Initialize an XGBoost Regressor for outcome regression\n","boost = XGBRegressor(\n","    n_jobs=1,  # Number of parallel threads used to run XGBoost\n","    objective=\"reg:squarederror\",  # Objective function for regression (squared error)\n","    eta=0.1,  # Learning rate\n","    n_estimators=50,  # Increased number of boosting rounds (trees)\n","    max_depth=7,  # Limit tree depth to prevent overfitting\n","    subsample=0.8,  # Use 80% of data for each tree to add robustness\n","    colsample_bytree=0.8  # Use 80% of features for each tree to reduce complexity\n",")\n","\n","\n","# Set the random seed for reproducibility\n","np.random.seed(123)  # Ensures consistent results\n","\n","# Initialize the DoubleMLPLR model with XGBoost learners\n","dml_plr_boost = dml.DoubleMLPLR( obj_dml_diff_l,  # Uses the 'data_dml_base' DoubleMLData object\n","                                ml_l=boost,  # Specifies the XGBoost Regressor for outcome regression\n","                                ml_m=boost,  # Specifies the XGBoost Classifier for treatment regression\n","                                n_folds=3)  # Sets the number of folds for cross-fitting to 3\n","\n","# Fit the DoubleMLPLR model to the data\n","dml_plr_boost.fit(store_predictions=True)  # Fits the model and stores predictions\n","\n","# Store the model summary in a variable\n","boost_diff_summary_l = dml_plr_boost.summary  # Assigns the model summary to the 'boost_summary' variable\n","\n","# Print the model summary\n","print(boost_diff_summary_l)  # Displays the estimated ATE and other model information"]},{"cell_type":"code","execution_count":58,"metadata":{"executionInfo":{"elapsed":24,"status":"ok","timestamp":1734352305701,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"HTmd7VeziH_i","colab":{"base_uri":"https://localhost:8080/","height":146},"outputId":"f43ff6ca-c046-4daa-8a01-0d85e40a9ce0"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-58-e552e67b6db7>:3: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n","  mlrFE_summary_l = pd.read_html(mlrFE_summary_l, header=0, index_col=0)[0]\n"]},{"output_type":"execute_result","data":{"text/plain":["                              coef  Std. Err.       t   P>|t|   2.5 %  97.5 %\n","transport_trend_per_person  0.2153     0.1601  1.3446  0.1811 -0.1015  0.5321"],"text/html":["\n","  <div id=\"df-35a6a28e-6a15-45f0-be3e-b9be2bd507b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>coef</th>\n","      <th>Std. Err.</th>\n","      <th>t</th>\n","      <th>P&gt;|t|</th>\n","      <th>2.5 %</th>\n","      <th>97.5 %</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>transport_trend_per_person</th>\n","      <td>0.2153</td>\n","      <td>0.1601</td>\n","      <td>1.3446</td>\n","      <td>0.1811</td>\n","      <td>-0.1015</td>\n","      <td>0.5321</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35a6a28e-6a15-45f0-be3e-b9be2bd507b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35a6a28e-6a15-45f0-be3e-b9be2bd507b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35a6a28e-6a15-45f0-be3e-b9be2bd507b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_8ea8ae4e-9d95-4c25-aeaf-4e2d6e0fa118\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlrFE_summary_l')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8ea8ae4e-9d95-4c25-aeaf-4e2d6e0fa118 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mlrFE_summary_l');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mlrFE_summary_l","summary":"{\n  \"name\": \"mlrFE_summary_l\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2153,\n        \"max\": 0.2153,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2153\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Std. Err.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1601,\n        \"max\": 0.1601,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1601\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.3446,\n        \"max\": 1.3446,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.3446\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P>|t|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1811,\n        \"max\": 0.1811,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1811\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.1015,\n        \"max\": -0.1015,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.1015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"97.5 %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.5321,\n        \"max\": 0.5321,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5321\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}],"source":["# Assuming mlrFE is your regression model object\n","mlrFE_summary_l = mlrFE_summary_l.tables[1].as_html()\n","mlrFE_summary_l = pd.read_html(mlrFE_summary_l, header=0, index_col=0)[0]\n","mlrFE_summary_l = mlrFE_summary_l.iloc[[0]]\n","mlrFE_summary_l = mlrFE_summary_l.rename(columns={'Parameter': 'coef', 'T-stat': 't', 'P-value': 'P>|t|', 'Lower CI': '2.5 %', 'Upper CI': '97.5 %'})\n","mlrFE_summary_l"]},{"cell_type":"code","execution_count":59,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1734352305701,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"ulSbUj--iH_j","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5cf564cc-110e-4105-d0d3-9d0a6a02ad8b"},"outputs":[{"output_type":"stream","name":"stdout","text":["             coef  P>|t|  2.5 %  97.5 %\n","slr_l       0.079  0.025  0.013   0.144\n","mlr_l      -0.212  0.013 -0.363  -0.060\n","mlrFE_l     0.215  0.181 -0.102   0.532\n","forest_l   -0.116  0.463 -0.425   0.193\n","tree_l      0.031  0.737 -0.150   0.213\n","xgb_l      -0.022  0.847 -0.250   0.205\n","forestFE_l  0.167  0.326 -0.167   0.500\n","treeFE_l    0.042  0.621 -0.124   0.208\n","xgbFE_l     0.115  0.359 -0.131   0.362\n"]}],"source":["# Concatenate the summaries, reset the index, and then rename\n","plr_summary_l = pd.concat([slr_summary_l,mlr_summary_l, mlrFE_summary_l, forest_summary_l, tree_summary_l, boost_summary_l, forest_diff_summary_l, tree_diff_summary_l, boost_diff_summary_l])\n","plr_summary_l.index = ['slr_l', 'mlr_l', 'mlrFE_l', 'forest_l', 'tree_l', 'xgb_l', 'forestFE_l', 'treeFE_l', 'xgbFE_l']  # Assign the desired labels\n","\n","# Print the updated summary\n","print(plr_summary_l[['coef', 'P>|t|', '2.5 %', '97.5 %']].to_string(float_format='{:.3f}'.format))"]},{"cell_type":"code","source":["# Extract the coefficients into a list\n","coefficients_l = plr_summary_l['coef'].tolist()\n","\n","# Create the boxplot using seaborn\n","plt.figure(figsize=(10, 6))  # Adjust figure size if needed\n","sns.boxplot(x=coefficients_l)\n","plt.xlabel(\"Coefficients\")\n","plt.title(\"Distribution of Coefficients from Regression Models\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"r1zRErKmMy99","executionInfo":{"status":"ok","timestamp":1734352306152,"user_tz":-60,"elapsed":462,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"d7041213-53e5-4c45-9a60-63fefbbe0bca"},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Create a DataFrame for the boxplot\n","data = pd.DataFrame({\n","    'Coefficients': coefficients_l + coefficients_u,  # Combine coefficients\n","    'Group': ['Lower'] * len(coefficients_l) + ['Upper'] * len(coefficients_u)  # Create group labels\n","})\n","\n","# Create the vertical boxplot using seaborn\n","plt.figure(figsize=(8, 6))  # Adjust figure size if needed\n","sns.boxplot(x='Group', y='Coefficients', data=data)\n","plt.title('Distribution of Coefficients for Lower and Upper Groups')\n","plt.xlabel('Countries split according to their electoral democracy index')\n","plt.ylabel('Coefficients')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"1sG5s2nXNMGS","executionInfo":{"status":"ok","timestamp":1734352306535,"user_tz":-60,"elapsed":391,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"fdec8372-7862-4eee-cd60-6d998b69bed1"},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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xaxcudLUq1fPeHt7m8jISPP5559nug0//PCDGTx4sClTpowpVaqU6d27t/nrr7+c1lUQ+3vw4MFGktm4cWO2+yG368jNZ2zGPs14313t2vdPxrEeGxtr7r//flOqVClTpkwZM3z4cHPhwgWHebP7LkPBK35DFvjH6d27t5599lmtWrVKgwYNyrTPb7/9pjvvvFN169bVCy+8IG9vb+3fv18//fSTJCkyMlIvvPCCxo4dq8GDB6tVq1aSpObNm9uX8eeff6pTp0564IEH9PDDDys4ODjbuiZNmiSbzaann35aJ06c0PTp0xUVFaXt27fbR6ZzIze1Xc0Yo27dumnNmjUaMGCA6tevr5UrV+qpp57S0aNHnUZMf/zxRy1ZskSPPfaYSpUqpTfffFP33nuv4uPjddNNN2VZ14ULF9S2bVvt379f0dHRqlKlij777DP169dPZ86c0YgRIxQZGamFCxfq8ccfV6VKlfTEE09IksqWLZvpMr/55htduXIlx3OAM/z2229q1aqV/P399Z///Eeenp5655131LZtW/3www9q2rSppL9HFdu0aaOjR4/q3//+typXrqyff/5Zo0eP1vHjxzV9+vQsa23QoIH9XN927dqpT58+2db07bff6s4771RISIhGjBih8uXLKzY2VsuWLdOIESOynG/SpEl6/vnn1aNHDw0cOFAnT57UjBkz1Lp1a23bts1hlPX06dPq2LGj7rnnHvXo0UOLFy/W008/rTp16qhTp07ZHjOpqanq0KGDLl26pGHDhql8+fI6evSoli1bpjNnziggICDT+qZPn64FCxboiy++0KxZs+Tn52c/vWj8+PGaMGGCoqKiNGTIEMXFxWnWrFnavHmzfvrpJ4e/SuT1fZST7777Tp06dVLVqlU1fvx4XbhwQTNmzFCLFi0UExOj8PBw3XLLLQoMDNS6devUrVs3SdL69evl5uamHTt2KDk5Wf7+/kpPT9fPP/+swYMH25e/cOFC9e3bVx06dNArr7yi8+fPa9asWWrZsqW2bdvmcGHplStX1KFDB7Vs2VJTpkzJdiR78+bN+vnnn/XAAw+oUqVKOnTokGbNmqW2bdtq9+7dTvMOGzZMpUuX1rhx43To0CFNnz5d0dHR+vTTT+19xo4dqxdffFGdO3dW586dFRMTo/bt2ys1NfW69nF29u3bp549e+rRRx9V3759NW/ePN1///1asWKF2rVr59A3OjpagYGBGj9+vP0YOXz4sP0iUang9veyZctUvXp1+2dCbmW2jrx+xuZFjx49FB4ersmTJ2vjxo168803dfr0aS1YsEBSzt9lKARFnbzxz5fTiK8xxgQEBDiM3Fw7ovb666/nOHK0efPmLP913qZNGyPJzJ49O9NpmY34VqxY0SQnJ9vb//vf/xpJ5o033rC35WbEN6farh3x/d///mckmRdffNGh33333WdsNpvZv3+/vU2S8fLycmjLGB2bMWOG07quNn36dCPJLFq0yN6WmppqmjVrZvz8/By2PWNkKCePP/64kWS2bduWY19jjOnevbvx8vIyBw4csLcdO3bMlCpVyrRu3dreNnHiRFOyZEmzd+9eh/mfeeYZ4+7u7jCqmlWt+v+j41e7dsT3ypUrpkqVKiYsLMxptPPqkaBrj89Dhw4Zd3d3M2nSJId5fv31V+Ph4eHQnnEsLliwwN526dIlU758eXPvvffa27I6ZrZt22Ykmc8++8xpG3OS2QjsiRMnjJeXl2nfvr199NwYY9566y0jycydO9ep9szeR7ld37Xq169vypUrZ/788097244dO4ybm5vp06ePva1Lly4OI7n33HOPueeee4y7u7v9LxwxMTEOI8Nnz541gYGBZtCgQQ7rTEhIMAEBAQ7tffv2NZLMM888k6ttO3/+vFPbhg0bnF7bjM+/qKgoh2Po8ccfN+7u7vZR+ozXoUuXLg79nn32WSOpwEZ8JTmM8CYlJZmQkBCHz+OMbWjUqJFJTU21t7/66quFsr+TkpKMJNO9e3enaadPnzYnT560P65+XbJaR24/Y/Mz4tutWzeHfo899piRZHbs2GGMyd13GQoWd3XADcHPzy/buztkjJYtXbo03xeCeXt7q3///rnu36dPH5UqVcr+/L777lNISIiWL1+er/Xn1vLly+Xu7q7hw4c7tD/xxBMyxuibb75xaI+KilK1atXsz+vWrSt/f3/9/vvvOa6nfPnyevDBB+1tnp6eGj58uFJSUvTDDz/kufbk5GRJcthvWUlLS9OqVavUvXt3Va1a1d4eEhKihx56SD/++KN9eZ999platWql0qVL69SpU/ZHVFSU0tLStG7dujzXmplt27bp4MGDGjlypNN5sNndvmzJkiVKT09Xjx49HOorX768atSooTVr1jj09/Pz08MPP2x/7uXlpSZNmuT4mkmyj+iuXLlS58+fz8PWZe67775TamqqRo4c6XB+5KBBg+Tv76+vv/7aoX9e30fZOX78uLZv365+/fqpTJky9va6deuqXbt2Du+1Vq1aKSYmRufOnZP09186OnfurPr162v9+vWS/h4FttlsatmypaS/R+/PnDmjBx980OF1cXd3V9OmTZ1eF0kaMmRIrmq/+q8+ly9f1p9//qnq1asrMDBQMTExTv0HDx7scAy1atVKaWlpOnz4sKT/ex2GDRvm0K+gbx1YoUIF3X333fbn/v7+6tOnj7Zt26aEhASnbbh69H/IkCHy8PCwv04Ftb8zPgf8/PycprVt21Zly5a1P2bOnJnjOvL6GZsXQ4cOdXg+bNgw+zol13yX4foQfHFDSElJyTYs9ezZUy1atNDAgQMVHBysBx54QP/973/z9MFRsWLFPF3IVqNGDYfnNptN1atXL/DbAR0+fFgVKlRw2h+RkZH26VerXLmy0zJKly6t06dP57ieGjVqOF0MktV6csPf31+ScnWLupMnT+r8+fOqWbOm07TIyEilp6fryJEjkv7+c+yKFSscvuDKli2rqKgoSf930db1OnDggCTplltuydN8+/btkzFGNWrUcKoxNjbWqb5KlSo5BencvGaSVKVKFY0aNUrvvfeegoKC1KFDB82cOVNJSUl5qjlDxut87evg5eWlqlWrOh0HeX0f5Wfd0t/HwKlTp+xBt1WrVrpy5Yo2bNiguLg4nThxQq1atVLr1q0dgm/t2rXtIXrfvn2SpNtvv93pdVm1apXT6+Lh4ZHru41cuHBBY8eOVWhoqLy9vRUUFKSyZcvqzJkzmb4W175PS5cuLUn21zxjX1z7uVO2bFl7X1e49rirXr26U1tERIQkOX3WXVubn5+fQkJC7P0Kan9nfBampKQ4TXvnnXf07bffatGiRZnOm9k68voZmxfX7qNq1arJzc3Nvo9c8V2G68M5vihyf/zxh5KSkrK9vZKvr6/WrVunNWvW6Ouvv9aKFSv06aef6vbbb9eqVavk7u6e43rycl5ubmU1CpiWlparmlwhq/UYYwpl/VerVauWJOnXX3912S24JCk9PV3t2rXTf/7zn0ynZ3xRF5X09HTZbDZ98803mb4e145UXe9rNnXqVPXr109Lly7VqlWrNHz4cPs5hQV1m7gMBfE+yo3GjRvLx8dH69atU+XKlVWuXDlFRESoVatWevvtt3Xp0iWtX7/eYfQyI0wsXLhQ5cuXd1rmtXfm8Pb2zvGuABmGDRumefPmaeTIkWrWrJkCAgJks9n0wAMPZBpiCvp9mnF3kgsXLmQ6PeOvA/m5i0luFdT+DggIUEhIiHbt2uU0LeOc36wGJPLyml4ru8/3/C7DFd9luD4EXxS5hQsXSpI6dOiQbT83NzfdcccduuOOOzRt2jS99NJLGjNmjNasWaOoqCiX/5JWxuhFBmOM9u/f73C/4dKlS+vMmTNO8x4+fNjhz/d5qS0sLEzfffedzp496zAisWfPHvt0VwgLC9POnTuVnp7u8MVwPevp1KmT3N3dtWjRohwvcCtbtqxKlCihuLg4p2l79uyRm5ubQkNDJf09apKSkmIf4S0oGaeM7Nq1K0/rqlatmowxqlKlistCeE7HTJ06dVSnTh0999xz+vnnn9WiRQvNnj1bL774Yp7Wk/E6x8XFORyzqampOnjwYIHu86vXfa09e/YoKCjIfuupjNNB1q9fr8qVK9sv+GvVqpUuXbqkDz/8UImJiWrdurV9GRmvZ7ly5Vy+HYsXL1bfvn01depUe9vFixcz/TzIjYx9sW/fPofX4eTJk7n6S0B27yfp731cokQJBQUFObTv379fxhiH423v3r2S5PSLkvv27dNtt91mf56SkqLjx4+rc+fOkgp2f3fp0kXvvfeeNm3apCZNmlzXsnL7GZsx0n7ta5rdiPC+fftUpUoV+/P9+/crPT3dYV/m9F2GgsWpDihS33//vSZOnKgqVaqoV69eWfb766+/nNoyRhQvXbokSfYvyPx+8VxrwYIFDn+yX7x4sY4fP65OnTrZ26pVq6aNGzc6XHW9bNky+5/oM+Slts6dOystLU1vvfWWQ/vrr78um83msP7r0blzZyUkJDhcVX7lyhXNmDFDfn5+atOmTZ6XGRoaqkGDBmnVqlWaMWOG0/T09HRNnTpVf/zxh9zd3dW+fXstXbrUYbQmMTFRH330kVq2bGk/daJHjx7asGGDVq5c6bTMM2fO6MqVK3muNTMNGzZUlSpVNH36dKfXKruRuXvuuUfu7u6aMGGCUz9jjP78888815LVMZOcnOy0vXXq1JGbm5v9vZAXUVFR8vLy0ptvvulQ+/vvv6+kpCR16dIlz8vMrZCQENWvX18ffPCBw3bu2rVLq1atsgeqDK1atdIvv/yiNWvW2INvUFCQIiMj9corr9j7ZOjQoYP8/f310ksv6fLly07rP3nyZL5rd3d3d3qtZ8yYkafRwKtFRUXJ09NTM2bMcFju9OnTc11P+/bt9dVXXyk+Pt5hWnx8vL766iu1b9/eaUTx2LFj+uKLL+zPk5OTtWDBAtWvX99p1HbOnDkO+3HWrFm6cuWK/TOpIPf3f/7zH5UoUUKPPPKIEhMTnabnZeQ8t5+x/v7+CgoKcrqG4O23385y2deeY5zxOZixzNx8l6FgMeKLQvPNN99oz549unLlihITE/X999/r22+/VVhYmL788sts/wT3wgsvaN26derSpYvCwsJ04sQJvf3226pUqZL9QpZq1aopMDBQs2fPVqlSpVSyZEk1bdrU4V/feVGmTBm1bNlS/fv3V2JioqZPn67q1as73HJt4MCBWrx4sTp27KgePXrowIEDWrRokcPFZnmtrWvXrrrttts0ZswYHTp0SPXq1dOqVau0dOlSjRw50mnZ+TV48GC988476tevn7Zu3arw8HAtXrxYP/30k6ZPn56rC9QyM3XqVB04cEDDhw/XkiVLdOedd6p06dKKj4/XZ599pj179uiBBx6QJL344ov69ttv1bJlSz322GPy8PDQO++8o0uXLunVV1+1L/Opp57Sl19+qTvvvFP9+vVTo0aNdO7cOf36669avHixDh065DSSlR9ubm6aNWuWunbtqvr166t///4KCQnRnj179Ntvv2UavKW/X98XX3xRo0eP1qFDh9S9e3eVKlVKBw8e1BdffKHBgwc7/GJcbmR1zOzYsUPR0dG6//77FRERoStXrmjhwoVyd3fXvffem+dtLlu2rEaPHq0JEyaoY8eO6tatm+Li4vT222/rX//6l8NFePk1bdo0p1tVubm56dlnn9Vrr72mTp06qVmzZhowYID9dmYBAQEaP368wzytWrXSpEmTdOTIEYeA27p1a73zzjsKDw93ONXD399fs2bNUu/evdWwYUM98MADKlu2rOLj4/X111+rRYsWTuEnt+68804tXLhQAQEBql27tjZs2KDvvvsu21sIZqds2bJ68sknNXnyZN15553q3Lmztm3bpm+++SbXx/ZLL72kW2+9VQ0bNtTgwYMVHh6uQ4cOac6cObLZbHrppZec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t99+2x56pb9vcTZz5kx98803LisuMzNnzlR4eLh8fHzUtGlTbdq0Kcu+7777rlq1aqXSpUurdOnSioqKyrY/AAAA/rnyFXzT09Pl6enp1O7p6an09PTrLiorn376qUaNGqVx48YpJiZG9erVU4cOHXTixIlM+69du1YPPvig1qxZow0bNig0NFTt27fX0aNHC6xGAAAA3JjyFXxvv/12jRgxQseOHbO3HT16VI8//rjuuOMOlxV3rWnTpmnQoEHq37+/ateurdmzZ6tEiRKaO3dupv0//PBDPfbYY6pfv75q1aql9957T+np6Vq9enWB1QgAAIAbU76C71tvvaXk5GSFh4erWrVqqlatmqpUqaLk5GTNmDHD1TVKklJTU7V161ZFRUXZ29zc3BQVFaUNGzbkahnnz5/X5cuXVaZMmSz7XLp0ScnJyQ4PAAAAFH/5urgtNDRUMTEx+u6777Rnzx5JUmRkpEModbVTp04pLS1NwcHBDu3BwcH2GnLy9NNPq0KFCtnWOXnyZE2YMOG6agUAAMCNJ08jvt9//71q166t5ORk2Ww2tWvXTsOGDdOwYcP0r3/9SzfffLPWr19fULVel5dfflmffPKJvvjii2xvkj969GglJSXZH0eOHCnEKgEAAFBQ8hR8p0+frkGDBsnf399pWkBAgP79739r2rRpLivuakFBQXJ3d1diYqJDe2JiosqXL5/tvFOmTNHLL7+sVatWqW7dutn29fb2lr+/v8MDAAAAxV+egu+OHTvUsWPHLKe3b99eW7duve6iMuPl5aVGjRo5XJiWcaFas2bNspzv1Vdf1cSJE7VixQo1bty4QGoDAADAjS9P5/gmJiZmehsz+8I8PHTy5MnrLioro0aNUt++fdW4cWM1adJE06dP17lz59S/f39JUp8+fVSxYkVNnjxZkvTKK69o7Nix+uijjxQeHq6EhARJkp+fn/z8/AqsTgAAANx48hR8K1asqF27dql69eqZTt+5c6dCQkJcUlhmevbsqZMnT2rs2LFKSEhQ/fr1tWLFCvsFb/Hx8XJz+79B7FmzZik1NVX33Xefw3LGjRun8ePHF1idAAAAuPHkKfh27txZzz//vDp27Oh0gdiFCxc0btw43XnnnS4t8FrR0dGKjo7OdNratWsdnh86dKhAawEAAEDxkafg+9xzz2nJkiWKiIhQdHS0atasKUnas2ePZs6cqbS0NI0ZM6ZACgUAAACuR56Cb3BwsH7++WcNGTJEo0ePljFGkmSz2dShQwfNnDnT6T67AAAAwI0gzz9gERYWpuXLl+v06dPav3+/jDGqUaOGSpcuXRD1AQAAAC6Rr19uk6TSpUvrX//6lytrAQBYhNuFM0VdAgAXKw7v63wHXwAA8sv34LqiLgGABRF8AQCF7kKV1kr3DSzqMgC4kNuFMzf8P2oJvgCAQpfuG6j0kkFFXQYAi8nTTxYDAAAAxRXBFwAAAJZA8AUAAIAlEHwBAABgCQRfAAAAWALBFwAAAJZA8AUAAIAlEHwBAABgCQRfAAAAWALBFwAAAJZA8AUAAIAlEHwBAABgCQRfAAAAWALBFwAAAJZA8AUAAIAlEHwBAABgCQRfAAAAWALBFwAAAJZA8AUAAIAlEHwBAABgCQRfAAAAWALBFwAAAJbgUdQFIHuJiYlKSkoq6jJQCA4fPuzwX/zzBQQEKDg4uKjLAADLIPjewBITE/Vw7z66nHqpqEtBIZo0aVJRl4BC4unlrUULFxB+AaCQEHxvYElJSbqcekkXqrZRuk9AUZcDwIXcLiZJv/+gpKQkgi8AFBKCbzGQ7hOg9JJBRV0GAABAscbFbQAAALAEgi8AAAAsgeALAAAASyD4AgAAwBIIvgAAALAEgi8AAAAsgeALAAAASyD4AgAAwBIIvgAAALAEgi8AAAAsgeALAAAASyD4AgAAwBI8iroAAID1uF1MKuoSALhYcXhfE3wBAIUmICBAnl7e0u8/FHUpAAqAp5e3AgICirqMLBF8AQCFJjg4WIsWLlBS0o0/MoTrd/jwYU2aNEljxoxRWFhYUZeDQhAQEKDg4OCiLiNLBF8AQKEKDg6+ob8Y4XphYWGKiIgo6jIALm4DAACANRB8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFiCR1EXgJy5XThT1CUAcDHe1wBQ+Ai+xYDvwXVFXQIAAECxR/AtBi5Uaa1038CiLgOAC7ldOMM/agGgkBF8i4F030Cllwwq6jIAAACKNS5uAwAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAllDsgu/MmTMVHh4uHx8fNW3aVJs2bcq2/2effaZatWrJx8dHderU0fLlywupUgAAANxIilXw/fTTTzVq1CiNGzdOMTExqlevnjp06KATJ05k2v/nn3/Wgw8+qAEDBmjbtm3q3r27unfvrl27dhVy5QAAAChqxSr4Tps2TYMGDVL//v1Vu3ZtzZ49WyVKlNDcuXMz7f/GG2+oY8eOeuqppxQZGamJEyeqYcOGeuutt7Jcx6VLl5ScnOzwAAAAQPFXbIJvamqqtm7dqqioKHubm5uboqKitGHDhkzn2bBhg0N/SerQoUOW/SVp8uTJCggIsD9CQ0NdswEAAAAoUsUm+J46dUppaWkKDg52aA8ODlZCQkKm8yQkJOSpvySNHj1aSUlJ9seRI0euv3gAAAAUOY+iLuBG4+3tLW9v76IuAwAAAC5WbEZ8g4KC5O7ursTERIf2xMRElS9fPtN5ypcvn6f+AAAA+OcqNsHXy8tLjRo10urVq+1t6enpWr16tZo1a5bpPM2aNXPoL0nffvttlv0BAADwz1WsTnUYNWqU+vbtq8aNG6tJkyaaPn26zp07p/79+0uS+vTpo4oVK2ry5MmSpBEjRqhNmzaaOnWqunTpok8++URbtmzRnDlzinIzAAAAUASKVfDt2bOnTp48qbFjxyohIUH169fXihUr7BewxcfHy83t/waxmzdvro8++kjPPfecnn32WdWoUUP/+9//dMsttxTVJgAAAKCIFKvgK0nR0dGKjo7OdNratWud2u6//37df//9BVwVAAAAbnTF5hxfAAAA4HoUuxFfK3K7mFTUJQBwMd7XAFD4CL43sICAAHl6eUu//1DUpQAoAJ5e3goICCjqMgDAMgi+N7Dg4GAtWrhASUmMDFnB4cOHNWnSJI0ZM0ZhYWFFXQ4KQUBAgNOvSwIACg7B9wYXHBzMF6PFhIWFKSIioqjLAADgH4eL2wAAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYgkdRFwAAwD/dxYsXFR8fX9RlFLrDhw87/NdqKleuLB8fn6IuA1ch+AIAUMDi4+M1ePDgoi6jyEyaNKmoSygSc+bMUURERFGXgasQfAEAKGCVK1fWnDlziroMFLLKlSsXdQm4BsEXAIAC5uPjw8gfcAPg4jYAAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJxSb4/vXXX+rVq5f8/f0VGBioAQMGKCUlJdv+w4YNU82aNeXr66vKlStr+PDhSkpKKsSqAQAAcKMoNsG3V69e+u233/Ttt99q2bJlWrdunQYPHpxl/2PHjunYsWOaMmWKdu3apfnz52vFihUaMGBAIVYNAACAG4VHUReQG7GxsVqxYoU2b96sxo0bS5JmzJihzp07a8qUKapQoYLTPLfccos+//xz+/Nq1app0qRJevjhh3XlyhV5eBSLTQcAAICLFIsR3w0bNigwMNAeeiUpKipKbm5u+uWXX3K9nKSkJPn7+2cbei9duqTk5GSHBwAAAIq/YhF8ExISVK5cOYc2Dw8PlSlTRgkJCblaxqlTpzRx4sRsT4+QpMmTJysgIMD+CA0NzXfdAAAAuHEUafB95plnZLPZsn3s2bPnuteTnJysLl26qHbt2ho/fny2fUePHq2kpCT748iRI9e9fgAAABS9Ij3R9YknnlC/fv2y7VO1alWVL19eJ06ccGi/cuWK/vrrL5UvXz7b+c+ePauOHTuqVKlS+uKLL+Tp6Zltf29vb3l7e+eqfgAAABQfRRp8y5Ytq7Jly+bYr1mzZjpz5oy2bt2qRo0aSZK+//57paenq2nTplnOl5ycrA4dOsjb21tffvmlfHx8XFY7AAAAipdicWuDyMhIdezYUYMGDdLs2bN1+fJlRUdH64EHHrDf0eHo0aO64447tGDBAjVp0kTJyclq3769zp8/r0WLFjlcqFa2bFm5u7sX5SYhGxcvXlR8fHxRl1HoDh8+7PBfq6lcuTL/OAUAFKhiEXwl6cMPP1R0dLTuuOMOubm56d5779Wbb75pn3758mXFxcXp/PnzkqSYmBj7HR+qV6/usKyDBw8qPDy80GpH3sTHx+d4EeI/2aRJk4q6hCIxZ84cRUREFHUZAIB/MJsxxhR1ETey5ORkBQQE2G+FhoJn1RFfq2PEFwCQX7nNa8VmxBfW4ePjw8gfAABwuWJxH18AAADgehF8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFgCwRcAAACWQPAFAACAJXgUdQE3OmOMJCk5ObmIKwEAAEBmMnJaRm7LCsE3B2fPnpUkhYaGFnElAAAAyM7Zs2cVEBCQ5XSbySkaW1x6erqOHTumUqVKyWazFXU5+AdLTk5WaGiojhw5In9//6IuBwCuG59rKCzGGJ09e1YVKlSQm1vWZ/Iy4psDNzc3VapUqajLgIX4+/vzBQHgH4XPNRSG7EZ6M3BxGwAAACyB4AsAAABLIPgCNwhvb2+NGzdO3t7eRV0KALgEn2u40XBxGwAAACyBEV8AAABYAsEXAAAAlkDwBQAAgCUQfAEAAGAJBF/gOvTr10/du3cv6jIAwGXatm2rkSNHOrXPnz9fgYGBhV4P4EoEX+AfKjU1tahLAACXSktLU3p6elGXgWKM4AsUkB9++EFNmjSRt7e3QkJC9Mwzz+jKlSuSpGXLlikwMFBpaWmSpO3bt8tms+mZZ56xzz9w4EA9/PDD9uc//vijWrVqJV9fX4WGhmr48OE6d+6cfXp4eLgmTpyoPn36yN/fX4MHDy6kLQVgNRl/7ZowYYLKli0rf39/Pfroow7/4G7btq2io6MVHR2tgIAABQUF6fnnn9fVd1G9dOmSnnzySVWsWFElS5ZU06ZNtXbtWvv0jFHmL7/8UrVr15a3t7fi4+MLc1PxD0PwBQrA0aNH1blzZ/3rX//Sjh07NGvWLL3//vt68cUXJUmtWrXS2bNntW3bNkl/h+SgoCCHD/wffvhBbdu2lSQdOHBAHTt21L333qudO3fq008/1Y8//qjo6GiH9U6ZMkX16tXTtm3b9PzzzxfKtgKwptWrVys2NlZr167Vxx9/rCVLlmjChAkOfT744AN5eHho06ZNeuONNzRt2jS999579unR0dHasGGDPvnkE+3cuVP333+/OnbsqH379tn7nD9/Xq+88oree+89/fbbbypXrlyhbSP+gQyAfOvbt6+56667nNqfffZZU7NmTZOenm5vmzlzpvHz8zNpaWnGGGMaNmxoXnvtNWOMMd27dzeTJk0yXl5e5uzZs+aPP/4wkszevXuNMcYMGDDADB482GEd69evN25ububChQvGGGPCwsJM9+7dC2IzAVhImzZtzIgRI5za582bZwICAowxf3/2lSlTxpw7d84+fdasWQ6fcW3atDGRkZEOn4NPP/20iYyMNMYYc/jwYePu7m6OHj3qsJ477rjDjB492r5OSWb79u2u3ERYGCO+QAGIjY1Vs2bNZLPZ7G0tWrRQSkqK/vjjD0lSmzZttHbtWhljtH79et1zzz2KjIzUjz/+qB9++EEVKlRQjRo1JEk7duzQ/Pnz5efnZ3906NBB6enpOnjwoH0djRs3LtwNBWBZ9erVU4kSJezPmzVrppSUFB05csTeduuttzp8DjZr1kz79u1TWlqafv31V6WlpSkiIsLhs+2HH37QgQMH7PN4eXmpbt26hbNR+MfzKOoCAKtq27at5s6dqx07dsjT01O1atVS27ZttXbtWp0+fVpt2rSx901JSdG///1vDR8+3Gk5lStXtv9/yZIlC6V2AP9c/v7+SkpKcmo/c+aMAgICXLaelJQUubu7a+vWrXJ3d3eY5ufnZ/9/X19fh/AMXA+CL1AAIiMj9fnnn8sYY//A/umnn1SqVClVqlRJ0v+d5/v666/bQ27btm318ssv6/Tp03riiSfsy2vYsKF2796t6tWrF/7GALCUmjVratWqVU7tMTExioiIsD/fsWOHLly4IF9fX0nSxo0b5efnp9DQUHufX375xWEZGzduVI0aNeTu7q4GDRooLS1NJ06cUKtWrQpoawBHnOoAXKekpCRt377d4TF48GAdOXJEw4YN0549e7R06VKNGzdOo0aNkpvb32+70qVLq27duvrwww/tF7G1bt1aMTEx2rt3r8OI79NPP62ff/5Z0dHR2r59u/bt26elS5c6XdwGANdryJAh2rt3r4YPH66dO3cqLi5O06ZN08cff+zwD/LU1FQNGDBAu3fv1vLlyzVu3DhFR0fbP+MkKT4+XqNGjVJcXJw+/vhjzZgxQyNGjJAkRUREqFevXurTp4+WLFmigwcPatOmTZo8ebK+/vrrQt9uWAMjvsB1Wrt2rRo0aODQNmDAAC1fvlxPPfWU6tWrpzJlymjAgAF67rnnHPq1adNG27dvtwffMmXKqHbt2kpMTFTNmjXt/erWrasffvhBY8aMUatWrWSMUbVq1dSzZ88C3z4A1lK1alWtW7dOY8aMUVRUlFJTU1WrVi199tln6tixo73fHXfcoRo1aqh169a6dOmSHnzwQY0fP95hWX369NGFCxfUpEkTubu7a8SIEQ63Wpw3b55efPFFPfHEEzp69KiCgoJ066236s477yyszYXF2Iy56oZ6AAAAOejXr5/OnDmj//3vf1n2adu2rerXr6/p06cXWl1ATjjVAQAAAJZA8AUAAIAlcKoDAAAALIERXwAAAFgCwRcAAACWQPAFAACAJRB8AQAAYAkEXwAAAFgCwRcoAm3bttXIkSOLuowshYeHO9x03mazZXuj+uJu/vz5CgwMtD8fP3686tevX2T1uIorjrOC3BfF/bjq16+funfvnqd5rj3WkDNXHMeHDh2SzWbT9u3bXVITii+CL4q1hIQEDRs2TFWrVpW3t7dCQ0PVtWtXrV69utBrycuX+JIlSzRx4sSCLciFjh8/rk6dOkmyxhfIk08+WSjHUH6CU2bWrl0rm82mM2fOXPeyrlVY+8IVinuQRuaK2+clbmweRV0AkF+HDh1SixYtFBgYqNdee0116tTR5cuXtXLlSg0dOlR79uwp6hKdpKamysvLS2XKlCnqUvKkfPnyRV2CS2Ts/5z4+fnJz8+vECq68eW0L3K7T4uTy5cvy9PTs6jLuKGkpaXJZrPJza3wx8uK2+clbmyM+KLYeuyxx2Sz2bRp0ybde++9ioiI0M0336xRo0Zp48aN9n7x8fG666675OfnJ39/f/Xo0UOJiYn26ZmNuo0cOVJt27a1P2/btq2GDx+u//znPypTpozKly+v8ePH26eHh4dLku6++27ZbDb784w/E7/33nuqUqWKfHx87Mu7+k93ly5d0pNPPqmKFSuqZMmSatq0qdauXWuffvjwYXXt2lWlS5dWyZIldfPNN2v58uVZ7pu3335bNWrUkI+Pj4KDg3Xfffc5bEt0dLSio6MVEBCgoKAgPf/888rut2yuHkmrUqWKJKlBgway2WwO++lqaWlpGjBggKpUqSJfX1/VrFlTb7zxhlO/uXPn6uabb5a3t7dCQkIUHR1tn3bmzBn9+9//VnBwsHx8fHTLLbdo2bJl9umff/65fd7w8HBNnTrVYdnh4eGaOHGi+vTpI39/fw0ePFjS339urly5skqUKKG7775bf/75p8N81/55P+MYmTJlikJCQnTTTTdp6NChunz5sr3P8ePH1aVLF/n6+qpKlSr66KOPnE4ZuXYdH3zwgZYuXSqbzSabzWZ/zX/99Vfdfvvt8vX11U033aTBgwcrJSUl0+UcOnRIt912mySpdOnSstls6tevn316enp6lsdtxj4eOHCgypYtK39/f91+++3asWNHjvti0qRJqlChgmrWrJlpXZK0dOlSNWzYUD4+PqpataomTJigK1euZNn/yJEj6tGjhwIDA1WmTBndddddOnTokEOfrI6XrN6DkjRr1ixVq1ZNXl5eqlmzphYuXOiwTJvNplmzZqlbt24qWbKkJk2alOvjNyc5HWu52U82m03vvPOO7rzzTpUoUUKRkZHasGGD9u/fr7Zt26pkyZJq3ry5Dhw44LDcnLY7u/dXxikZX375pWrXri1vb2/Fx8dr8+bNateunYKCghQQEKA2bdooJiYmV8s9d+6c/P39tXjxYof+//vf/1SyZEmdPXs203147edleHi4XnrpJT3yyCMqVaqUKleurDlz5jjMs2nTJjVo0EA+Pj5q3Lixtm3b5rTcXbt2qVOnTvLz81NwcLB69+6tU6dOSfr7ryheXl5av369vf+rr76qcuXKOXx/oBgyQDH0559/GpvNZl566aVs+6WlpZn69eubli1bmi1btpiNGzeaRo0amTZt2tj79O3b19x1110O840YMcKhT5s2bYy/v78ZP3682bt3r/nggw+MzWYzq1atMsYYc+LECSPJzJs3zxw/ftycOHHCGGPMuHHjTMmSJU3Hjh1NTEyM2bFjh315I0aMsC9/4MCBpnnz5mbdunVm//795rXXXjPe3t5m7969xhhjunTpYtq1a2d27txpDhw4YL766ivzww8/ZLrNmzdvNu7u7uajjz4yhw4dMjExMeaNN95w2BY/Pz8zYsQIs2fPHrNo0SJTokQJM2fOHHufsLAw8/rrr9ufSzJffPGFMcaYTZs2GUnmu+++M8ePHzd//vlnpnWkpqaasWPHms2bN5vff//dvp5PP/3U3uftt982Pj4+Zvr06SYuLs5s2rTJvt60tDRz6623mptvvtmsWrXKvt3Lly83xhizZcsW4+bmZl544QUTFxdn5s2bZ3x9fc28efMctsPf399MmTLF7N+/3+zfv99s3LjRuLm5mVdeecXExcWZN954wwQGBpqAgAD7fOPGjTP16tWzP+/bt6/x9/c3jz76qImNjTVfffWV0z6Liooy9evXNxs3bjRbt241bdq0Mb6+vg778Wpnz541PXr0MB07djTHjx83x48fN5cuXTIpKSkmJCTE3HPPPebXX381q1evNlWqVDF9+/bNdDlXrlwxn3/+uZFk4uLizPHjx82ZM2fsr3V2x21G3V27djWbN282e/fuNU888YS56aab7K9rZvvCz8/P9O7d2+zatcvs2rUr07rWrVtn/P39zfz5882BAwfMqlWrTHh4uBk/fry9z9XHVWpqqomMjDSPPPKI2blzp9m9e7d56KGHTM2aNc2lS5eMMdkfL1m9B5csWWI8PT3NzJkzTVxcnJk6dapxd3c333//vUMd5cqVM3PnzjUHDhwwhw8fztXxm9lnx9Vyc6zldj9VrFjRfPrppyYuLs50797dhIeHm9tvv92sWLHC7N6929x6662mY8eO9nly2u6c3l/z5s0znp6epnnz5uann34ye/bsMefOnTOrV682CxcuNLGxsWb37t1mwIABJjg42CQnJ+dquYMGDTKdO3d22E/dunUzffr0yXI/Xvt5GRYWZsqUKWNmzpxp9u3bZyZPnmzc3NzMnj17jDF/v7fKli1rHnroIbNr1y7z1VdfmapVqxpJZtu2bcYYY06fPm3Kli1rRo8ebWJjY01MTIxp166due222+zreeqpp0xYWJg5c+aMiYmJMV5eXmbp0qVZ1onigeCLYumXX34xksySJUuy7bdq1Srj7u5u4uPj7W2//fabkWQ2bdpkjMl98G3ZsqVDn3/961/m6aeftj+/+ks8w7hx44ynp6f9S/jq5WV8kB8+fNi4u7ubo0ePOvS54447zOjRo40xxtSpU8fhizA7n3/+ufH397d/EV2rTZs2JjIy0qSnp9vbnn76aRMZGWl/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\n"},"metadata":{}}]},{"cell_type":"code","source":["import scipy.stats as stats\n","# Perform ANOVA test\n","fvalue, pvalue = stats.f_oneway(data['Coefficients'][data['Group'] == 'Lower'],\n","                                 data['Coefficients'][data['Group'] == 'Upper'])\n","\n","# Print the results\n","print(\"ANOVA Results:\")\n","print(\"F-value:\", fvalue)\n","print(\"P-value:\", pvalue)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"clywoTvgvKXP","executionInfo":{"status":"ok","timestamp":1734352306535,"user_tz":-60,"elapsed":30,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"61225cc2-884e-4b93-cb3b-bbdce2d8b2ed"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["ANOVA Results:\n","F-value: 5.08790074022205\n","P-value: 0.038447743918929994\n"]}]},{"cell_type":"code","source":["import scipy.stats as stats\n","# Create a DataFrame\n","data = pd.DataFrame({\n","    'Coefficients': coefficients_l + coefficients_u,\n","    'Group': ['Lower'] * len(coefficients_l) + ['Upper'] * len(coefficients_u)\n","})\n","\n","# Perform one-way ANOVA\n","groups = [group for _, group in data.groupby('Group')['Coefficients']]\n","f_value, p_value = stats.f_oneway(*groups)\n","\n","# Calculate sum of squares\n","grand_mean = data['Coefficients'].mean()\n","ss_total = sum((data['Coefficients'] - grand_mean)**2)\n","ss_treatment = sum(len(group) * (group.mean() - grand_mean)**2 for group in groups)\n","ss_error = ss_total - ss_treatment\n","\n","# Calculate degrees of freedom\n","df_treatment = len(groups) - 1\n","df_error = len(data) - len(groups)\n","df_total = len(data) - 1\n","\n","# Calculate mean squares\n","ms_treatment = ss_treatment / df_treatment\n","ms_error = ss_error / df_error\n","\n","# Create ANOVA table\n","anova_table = pd.DataFrame({\n","    'Source': ['Treatment', 'Error'],\n","    'Sum of Squares (SS)': [ss_treatment, ss_error],\n","    'df': [df_treatment, df_error],\n","    'Mean Squares (MS)': [ms_treatment, ms_error],\n","    'F': [f_value, np.nan],\n","    'P-value': [p_value, np.nan]\n","})\n","\n","# Format the table\n","anova_table['Sum of Squares (SS)'] = anova_table['Sum of Squares (SS)'].round(1)\n","anova_table['Mean Squares (MS)'] = anova_table['Mean Squares (MS)'].round(1)\n","anova_table['F'] = anova_table['F'].round(3)\n","anova_table['P-value'] = anova_table['P-value'].round(4)\n","\n","print(anova_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oym7M745y2oN","executionInfo":{"status":"ok","timestamp":1734352306535,"user_tz":-60,"elapsed":24,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"46d587db-4b79-4c29-fa53-90c865b00666"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["      Source  Sum of Squares (SS)  df  Mean Squares (MS)      F  P-value\n","0  Treatment                  0.3   1                0.3  5.088   0.0384\n","1      Error                  1.0  16                0.1    NaN      NaN\n"]}]},{"cell_type":"code","execution_count":64,"metadata":{"executionInfo":{"elapsed":361,"status":"ok","timestamp":1734352306882,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"},"user_tz":-60},"id":"M0BT8vk6iH_n","colab":{"base_uri":"https://localhost:8080/","height":411},"outputId":"451ecf55-5d01-494e-dd65-8e96f8e9e864"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["errors = np.full((2, plr_summary_l.shape[0]), np.nan)\n","errors[0, :] = plr_summary_l['coef'] - plr_summary_l['2.5 %']\n","errors[1, :] = plr_summary_l['97.5 %'] - plr_summary_l['coef']\n","# Plot error bars for all models\n","plt.errorbar(plr_summary_l.index, plr_summary_l['coef'], yerr=errors, fmt='o', capsize=5)\n","\n","# Plot the first two coefficients in orange\n","plt.errorbar(plr_summary_l.index[:3], plr_summary_l['coef'][:3], yerr=errors[:, :3], fmt='o', color='orange', capsize=5)\n","\n","plt.errorbar(plr_summary_l.index[6:], plr_summary_l['coef'][6:], yerr=errors[:, 6:], fmt='o', color='green', capsize=5)\n","\n","\n","plt.ylim([-1, 1])\n","\n","plt.legend(['DML', 'No ML', 'ML (FE)'], loc='upper right')  # Place legend in upper left corner\n","\n","#add horizontal bar at 1\n","plt.axhline(y=0, color='b', linestyle='-')\n","\n","plt.title('Summary of the (partially) linear regression models \\n')\n","_ =  plt.ylabel('Coefficients and 95%-CI')\n","plt.rcParams['figure.figsize'] = [20, 8]"]},{"cell_type":"markdown","source":["### Heterogeneity analysis"],"metadata":{"id":"NpGlqsAfbPbF"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Set figure size\n","plt.figure(figsize=(12, 6))\n","\n","# Set the positions of the bars\n","x = np.arange(len(plr_summary_l.index))\n","width = 0.35\n","\n","# Calculate error bars for both groups\n","errors_l = np.full((2, plr_summary_l.shape[0]), np.nan)\n","errors_l[0, :] = plr_summary_l['coef'] - plr_summary_l['2.5 %']\n","errors_l[1, :] = plr_summary_l['97.5 %'] - plr_summary_l['coef']\n","\n","errors_u = np.full((2, plr_summary_u.shape[0]), np.nan)\n","errors_u[0, :] = plr_summary_u['coef'] - plr_summary_u['2.5 %']\n","errors_u[1, :] = plr_summary_u['97.5 %'] - plr_summary_u['coef']\n","\n","# Create bars\n","plt.bar(x - width/2, plr_summary_l['coef'], width, label='Lower Group', color='#3182bd', yerr=errors_l, capsize=5)\n","plt.bar(x + width/2, plr_summary_u['coef'], width, label='Upper Group', color='#fd8d3c', yerr=errors_u, capsize=5)\n","\n","# Customize the plot\n","plt.xlabel('Regression models used')\n","plt.ylabel('Coefficient of transport_trend per person')\n","plt.title('Coefficients of transport trend per person by democracy level')\n","plt.xticks(x, ['slr', 'mlr', 'mlrFE', 'forest', 'tree', 'xgb', 'forestFE', 'treeFE', 'xgbFE'\n","               ], rotation=45, ha='right')\n","plt.legend()\n","\n","# Add a grid for better readability\n","plt.grid(True, linestyle='--', alpha=0.7)\n","plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)\n","\n","# Adjust layout to prevent label cutoff\n","plt.tight_layout()\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"hyXGZeh3beSK","executionInfo":{"status":"ok","timestamp":1734352491861,"user_tz":-60,"elapsed":2804,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2392fdbe-976f-4497-edf0-4376aa5d4fe3"},"execution_count":67,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Set figure size\n","plt.figure(figsize=(12, 6))\n","\n","# Set the positions of the bars\n","x = np.arange(len(plr_summary_l.index))\n","width = 0.35\n","\n","# Create bars without error bars (yerr=None)\n","plt.bar(x - width/2, plr_summary_l['coef'], width, label='Lower Group', color='#3182bd')\n","plt.bar(x + width/2, plr_summary_u['coef'], width, label='Upper Group', color='#fd8d3c')\n","\n","# Customize the plot\n","plt.xlabel('Regression models used')\n","plt.ylabel('Coefficient of transport_trend per person')\n","plt.title('Coefficients of transport trend per person by democracy level')\n","plt.xticks(x, ['slr', 'mlr', 'mlrFE', 'forest', 'tree', 'xgb', 'forestFE', 'treeFE', 'xgbFE'], rotation=45, ha='right')\n","plt.legend()\n","\n","# Add a grid for better readability\n","plt.grid(True, linestyle='--', alpha=0.7)\n","plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)\n","\n","# Add significance stars\n","for i, p_val in enumerate(plr_summary_l['P>|t|']):\n","    if p_val < 0.01:\n","        stars = '***'\n","    elif p_val < 0.05:\n","        stars = '**'\n","    elif p_val < 0.1:\n","        stars = '*'\n","    else:\n","        stars = ''  # No stars if not significant\n","\n","    # Adjust star position for Lower Group\n","    plt.text(x[i] - width/2, plr_summary_l['coef'][i] + 0.05, stars, ha='center', va='bottom')\n","\n","for i, p_val in enumerate(plr_summary_u['P>|t|']):\n","    if p_val < 0.01:\n","        stars = '***'\n","    elif p_val < 0.05:\n","        stars = '**'\n","    elif p_val < 0.1:\n","        stars = '*'\n","    else:\n","        stars = ''\n","\n","    # Adjust star position for Upper Group\n","    plt.text(x[i] + width/2, plr_summary_u['coef'][i] + 0.05, stars, ha='center', va='bottom')\n","\n","# Adjust layout to prevent label cutoff\n","plt.tight_layout()\n","plt.ylim([-0.3, 1.1])\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":700},"id":"yrZk_2qwketb","executionInfo":{"status":"ok","timestamp":1734354350364,"user_tz":-60,"elapsed":1331,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"369d44ca-f3fa-4f28-cf25-fec2b8862baf"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-78-fdd566096006>:38: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  plt.text(x[i] - width/2, plr_summary_l['coef'][i] + 0.05, stars, ha='center', va='bottom')\n","<ipython-input-78-fdd566096006>:51: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  plt.text(x[i] + width/2, plr_summary_u['coef'][i] + 0.05, stars, ha='center', va='bottom')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Set figure size\n","plt.figure(figsize=(12, 6))\n","\n","# Function to add significance levels to the plot (modified)\n","def add_significance_levels(x_positions, coefficients, p_values, errors):\n","    for i, p in enumerate(p_values):\n","        y_position = coefficients[i] + errors[1, i] + 0.05  # Position above upper error bar\n","        if p < 0.01:\n","            plt.text(x_positions[i], y_position, \"***\", ha='center', va='bottom', fontsize=12)\n","        elif p < 0.05:\n","            plt.text(x_positions[i], y_position, \"**\", ha='center', va='bottom', fontsize=12)\n","        elif p < 0.1:\n","            plt.text(x_positions[i], y_position, \"*\", ha='center', va='bottom', fontsize=12)\n","\n","# Add significance levels for both groups (calling the modified function)\n","add_significance_levels(x - offset, plr_summary_l['coef'], plr_summary_l['P>|t|'], errors_l)\n","add_significance_levels(x + offset, plr_summary_u['coef'], plr_summary_u['P>|t|'], errors_u)\n","\n","# Set the positions of the points with an offset for each group\n","num_models = len(plr_summary_l.index)  # Assuming both groups have the same number of models\n","x = np.arange(num_models)\n","offset = 0.2  # Adjust this value to control the spacing between groups\n","\n","# Calculate error bars for both groups (same as before)\n","errors_l = np.full((2, plr_summary_l.shape[0]), np.nan)\n","errors_l[0, :] = plr_summary_l['coef'] - plr_summary_l['2.5 %']\n","errors_l[1, :] = plr_summary_l['97.5 %'] - plr_summary_l['coef']\n","\n","errors_u = np.full((2, plr_summary_u.shape[0]), np.nan)\n","errors_u[0, :] = plr_summary_u['coef'] - plr_summary_u['2.5 %']\n","errors_u[1, :] = plr_summary_u['97.5 %'] - plr_summary_u['coef']\n","\n","# Plot confidence intervals as error bars with dots for coefficients, using offset\n","plt.errorbar(x - offset, plr_summary_l['coef'], yerr=errors_l, fmt='o', label='Lower Group', color='#3182bd', capsize=5)\n","plt.errorbar(x + offset, plr_summary_u['coef'], yerr=errors_u, fmt='o', label='Upper Group', color='#fd8d3c', capsize=5)\n","\n","# Customize the plot (same as before)\n","plt.ylim([-0.5, 1.2])\n","plt.xlabel('Regression models used')\n","plt.ylabel('Coefficient of transport_trend per person')\n","plt.title('Coefficients of transport trend per person by democracy level')\n","plt.xticks(x, ['slr', 'mlr', 'mlrFE', 'forest', 'tree', 'xgb', 'forestFE', 'treeFE', 'xgbFE'], rotation=45, ha='right')\n","plt.legend()\n","plt.grid(True, linestyle='--', alpha=0.7)\n","plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"id":"lgHxXFI7fELi","executionInfo":{"status":"ok","timestamp":1734354062985,"user_tz":-60,"elapsed":3156,"user":{"displayName":"Felix Hatzold","userId":"03671145179043625691"}},"outputId":"2ce86075-28d9-40d6-f203-02950450c759"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-74-34cf5d56b3bc>:10: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  y_position = coefficients[i] + errors[1, i] + 0.05  # Position above upper error bar\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}